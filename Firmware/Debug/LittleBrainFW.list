
LittleBrainFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800bdf8  0800bdf8  0001bdf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0d8  0800c0d8  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0d8  0800c0d8  0001c0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0e0  0800c0e0  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0e0  0800c0e0  0001c0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0e4  0800c0e4  0001c0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800c0e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b40  20000350  0800c438  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e90  0800c438  00021e90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a06c  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003778  00000000  00000000  0003a3ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001370  00000000  00000000  0003db68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d8  00000000  00000000  0003eed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022940  00000000  00000000  000400b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011538  00000000  00000000  000629f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c29a3  00000000  00000000  00073f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001368cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005abc  00000000  00000000  00136948  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bde0 	.word	0x0800bde0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0800bde0 	.word	0x0800bde0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6a3a      	ldr	r2, [r7, #32]
 8000ecc:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ed2:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6858      	ldr	r0, [r3, #4]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	899b      	ldrh	r3, [r3, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f001 ffc8 	bl	8002e84 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f001 f967 	bl	80021c8 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6858      	ldr	r0, [r3, #4]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	899b      	ldrh	r3, [r3, #12]
 8000f02:	2201      	movs	r2, #1
 8000f04:	4619      	mov	r1, r3
 8000f06:	f001 ffbd 	bl	8002e84 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000f0a:	2032      	movs	r0, #50	; 0x32
 8000f0c:	f001 f95c 	bl	80021c8 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8000f10:	22b6      	movs	r2, #182	; 0xb6
 8000f12:	217e      	movs	r1, #126	; 0x7e
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f000 f953 	bl	80011c0 <BMI088_WriteAccRegister>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	7dfb      	ldrb	r3, [r7, #23]
 8000f20:	4413      	add	r3, r2
 8000f22:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8000f24:	2032      	movs	r0, #50	; 0x32
 8000f26:	f001 f94f 	bl	80021c8 <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8000f2a:	f107 0316 	add.w	r3, r7, #22
 8000f2e:	461a      	mov	r2, r3
 8000f30:	2100      	movs	r1, #0
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	f000 f8ca 	bl	80010cc <BMI088_ReadAccRegister>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	7dfb      	ldrb	r3, [r7, #23]
 8000f3e:	4413      	add	r3, r2
 8000f40:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 8000f42:	200a      	movs	r0, #10
 8000f44:	f001 f940 	bl	80021c8 <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 8000f48:	22a8      	movs	r2, #168	; 0xa8
 8000f4a:	2140      	movs	r1, #64	; 0x40
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f000 f937 	bl	80011c0 <BMI088_WriteAccRegister>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
 8000f58:	4413      	add	r3, r2
 8000f5a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f001 f933 	bl	80021c8 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 8000f62:	2200      	movs	r2, #0
 8000f64:	2141      	movs	r1, #65	; 0x41
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f000 f92a 	bl	80011c0 <BMI088_WriteAccRegister>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	4413      	add	r3, r2
 8000f74:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f76:	200a      	movs	r0, #10
 8000f78:	f001 f926 	bl	80021c8 <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8000f7c:	220a      	movs	r2, #10
 8000f7e:	2153      	movs	r1, #83	; 0x53
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 f91d 	bl	80011c0 <BMI088_WriteAccRegister>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	7dfb      	ldrb	r3, [r7, #23]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f90:	200a      	movs	r0, #10
 8000f92:	f001 f919 	bl	80021c8 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8000f96:	2204      	movs	r2, #4
 8000f98:	2158      	movs	r1, #88	; 0x58
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f000 f910 	bl	80011c0 <BMI088_WriteAccRegister>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	7dfb      	ldrb	r3, [r7, #23]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000faa:	200a      	movs	r0, #10
 8000fac:	f001 f90c 	bl	80021c8 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	217c      	movs	r1, #124	; 0x7c
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f000 f903 	bl	80011c0 <BMI088_WriteAccRegister>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000fc4:	200a      	movs	r0, #10
 8000fc6:	f001 f8ff 	bl	80021c8 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 8000fca:	2204      	movs	r2, #4
 8000fcc:	217d      	movs	r1, #125	; 0x7d
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 f8f6 	bl	80011c0 <BMI088_WriteAccRegister>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	4413      	add	r3, r2
 8000fdc:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000fde:	200a      	movs	r0, #10
 8000fe0:	f001 f8f2 	bl	80021c8 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4a37      	ldr	r2, [pc, #220]	; (80010c4 <BMI088_Init+0x21c>)
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6898      	ldr	r0, [r3, #8]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	89db      	ldrh	r3, [r3, #14]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f001 ff45 	bl	8002e84 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8000ffa:	22b6      	movs	r2, #182	; 0xb6
 8000ffc:	2114      	movs	r1, #20
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f000 f918 	bl	8001234 <BMI088_WriteGyrRegister>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	7dfb      	ldrb	r3, [r7, #23]
 800100a:	4413      	add	r3, r2
 800100c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 800100e:	20fa      	movs	r0, #250	; 0xfa
 8001010:	f001 f8da 	bl	80021c8 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 8001014:	f107 0316 	add.w	r3, r7, #22
 8001018:	461a      	mov	r2, r3
 800101a:	2100      	movs	r1, #0
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f000 f893 	bl	8001148 <BMI088_ReadGyrRegister>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	4413      	add	r3, r2
 800102a:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 800102c:	200a      	movs	r0, #10
 800102e:	f001 f8cb 	bl	80021c8 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8001032:	2201      	movs	r2, #1
 8001034:	210f      	movs	r1, #15
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f000 f8fc 	bl	8001234 <BMI088_WriteGyrRegister>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	4413      	add	r3, r2
 8001044:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001046:	200a      	movs	r0, #10
 8001048:	f001 f8be 	bl	80021c8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x07); /* ODR = 100 Hz, Filter bandwidth = 32 Hz */
 800104c:	2207      	movs	r2, #7
 800104e:	2110      	movs	r1, #16
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f000 f8ef 	bl	8001234 <BMI088_WriteGyrRegister>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	7dfb      	ldrb	r3, [r7, #23]
 800105c:	4413      	add	r3, r2
 800105e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001060:	200a      	movs	r0, #10
 8001062:	f001 f8b1 	bl	80021c8 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	2115      	movs	r1, #21
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f000 f8e2 	bl	8001234 <BMI088_WriteGyrRegister>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	4413      	add	r3, r2
 8001078:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f001 f8a4 	bl	80021c8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8001080:	2201      	movs	r2, #1
 8001082:	2116      	movs	r1, #22
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 f8d5 	bl	8001234 <BMI088_WriteGyrRegister>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	4413      	add	r3, r2
 8001092:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001094:	200a      	movs	r0, #10
 8001096:	f001 f897 	bl	80021c8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 800109a:	2201      	movs	r2, #1
 800109c:	2118      	movs	r1, #24
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f000 f8c8 	bl	8001234 <BMI088_WriteGyrRegister>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	4413      	add	r3, r2
 80010ac:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010ae:	200a      	movs	r0, #10
 80010b0:	f001 f88a 	bl	80021c8 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to deg/s) */
	imu->gyrConversion = 1000.0f / 32768.0f; /* Datasheet page 39 */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <BMI088_Init+0x220>)
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28

	return status;
 80010ba:	7dfb      	ldrb	r3, [r7, #23]

}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	3a6b70a4 	.word	0x3a6b70a4
 80010c8:	3cfa0000 	.word	0x3cfa0000

080010cc <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	460b      	mov	r3, r1
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80010da:	7afb      	ldrb	r3, [r7, #11]
 80010dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	753b      	strb	r3, [r7, #20]
 80010e4:	2300      	movs	r3, #0
 80010e6:	757b      	strb	r3, [r7, #21]
 80010e8:	2300      	movs	r3, #0
 80010ea:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6858      	ldr	r0, [r3, #4]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	899b      	ldrh	r3, [r3, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	f001 fec4 	bl	8002e84 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	f107 0210 	add.w	r2, r7, #16
 8001104:	f107 0114 	add.w	r1, r7, #20
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2303      	movs	r3, #3
 8001110:	f003 fe3e 	bl	8004d90 <HAL_SPI_TransmitReceive>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	bf0c      	ite	eq
 800111a:	2301      	moveq	r3, #1
 800111c:	2300      	movne	r3, #0
 800111e:	b2db      	uxtb	r3, r3
 8001120:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6858      	ldr	r0, [r3, #4]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	899b      	ldrh	r3, [r3, #12]
 800112a:	2201      	movs	r2, #1
 800112c:	4619      	mov	r1, r3
 800112e:	f001 fea9 	bl	8002e84 <HAL_GPIO_WritePin>

	if (status == 1) {
 8001132:	7dfb      	ldrb	r3, [r7, #23]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d102      	bne.n	800113e <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8001138:	7cba      	ldrb	r2, [r7, #18]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800113e:	7dfb      	ldrb	r3, [r7, #23]

}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af02      	add	r7, sp, #8
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	460b      	mov	r3, r1
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 8001156:	7afb      	ldrb	r3, [r7, #11]
 8001158:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800115c:	b2db      	uxtb	r3, r3
 800115e:	753b      	strb	r3, [r7, #20]
 8001160:	2300      	movs	r3, #0
 8001162:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6898      	ldr	r0, [r3, #8]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	89db      	ldrh	r3, [r3, #14]
 800116c:	2200      	movs	r2, #0
 800116e:	4619      	mov	r1, r3
 8001170:	f001 fe88 	bl	8002e84 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	f107 0210 	add.w	r2, r7, #16
 800117c:	f107 0114 	add.w	r1, r7, #20
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2302      	movs	r3, #2
 8001188:	f003 fe02 	bl	8004d90 <HAL_SPI_TransmitReceive>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	bf0c      	ite	eq
 8001192:	2301      	moveq	r3, #1
 8001194:	2300      	movne	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6898      	ldr	r0, [r3, #8]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	89db      	ldrh	r3, [r3, #14]
 80011a2:	2201      	movs	r2, #1
 80011a4:	4619      	mov	r1, r3
 80011a6:	f001 fe6d 	bl	8002e84 <HAL_GPIO_WritePin>

	if (status == 1) {
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d102      	bne.n	80011b6 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 80011b0:	7c7a      	ldrb	r2, [r7, #17]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80011b6:	7dfb      	ldrb	r3, [r7, #23]

}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
 80011cc:	4613      	mov	r3, r2
 80011ce:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	733b      	strb	r3, [r7, #12]
 80011d4:	78bb      	ldrb	r3, [r7, #2]
 80011d6:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6858      	ldr	r0, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	899b      	ldrh	r3, [r3, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	f001 fe4e 	bl	8002e84 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	f107 010c 	add.w	r1, r7, #12
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	2202      	movs	r2, #2
 80011f6:	f003 fc97 	bl	8004b28 <HAL_SPI_Transmit>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	bf0c      	ite	eq
 8001200:	2301      	moveq	r3, #1
 8001202:	2300      	movne	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001208:	bf00      	nop
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f004 f98a 	bl	8005528 <HAL_SPI_GetState>
 8001214:	4603      	mov	r3, r0
 8001216:	2b01      	cmp	r3, #1
 8001218:	d1f7      	bne.n	800120a <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6858      	ldr	r0, [r3, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	899b      	ldrh	r3, [r3, #12]
 8001222:	2201      	movs	r2, #1
 8001224:	4619      	mov	r1, r3
 8001226:	f001 fe2d 	bl	8002e84 <HAL_GPIO_WritePin>

	return status;
 800122a:	7bfb      	ldrb	r3, [r7, #15]

}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
 8001240:	4613      	mov	r3, r2
 8001242:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8001244:	78fb      	ldrb	r3, [r7, #3]
 8001246:	733b      	strb	r3, [r7, #12]
 8001248:	78bb      	ldrb	r3, [r7, #2]
 800124a:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6898      	ldr	r0, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	89db      	ldrh	r3, [r3, #14]
 8001254:	2200      	movs	r2, #0
 8001256:	4619      	mov	r1, r3
 8001258:	f001 fe14 	bl	8002e84 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	f107 010c 	add.w	r1, r7, #12
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	2202      	movs	r2, #2
 800126a:	f003 fc5d 	bl	8004b28 <HAL_SPI_Transmit>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	bf0c      	ite	eq
 8001274:	2301      	moveq	r3, #1
 8001276:	2300      	movne	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800127c:	bf00      	nop
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f004 f950 	bl	8005528 <HAL_SPI_GetState>
 8001288:	4603      	mov	r3, r0
 800128a:	2b01      	cmp	r3, #1
 800128c:	d1f7      	bne.n	800127e <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6898      	ldr	r0, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	89db      	ldrh	r3, [r3, #14]
 8001296:	2201      	movs	r2, #1
 8001298:	4619      	mov	r1, r3
 800129a:	f001 fdf3 	bl	8002e84 <HAL_GPIO_WritePin>

	return status;
 800129e:	7bfb      	ldrb	r3, [r7, #15]

}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	2392      	movs	r3, #146	; 0x92
 80012bc:	723b      	strb	r3, [r7, #8]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6858      	ldr	r0, [r3, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	899b      	ldrh	r3, [r3, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	4619      	mov	r1, r3
 80012ca:	f001 fddb 	bl	8002e84 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, txBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f103 0212 	add.w	r2, r3, #18
 80012d8:	f107 0108 	add.w	r1, r7, #8
 80012dc:	2308      	movs	r3, #8
 80012de:	f003 fef9 	bl	80050d4 <HAL_SPI_TransmitReceive_DMA>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d104      	bne.n	80012f2 <BMI088_ReadAccelerometerDMA+0x4a>

		imu->readingAcc = 1;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	741a      	strb	r2, [r3, #16]
		return 1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <BMI088_ReadAccelerometerDMA+0x4c>

	} else {

		return 0;
 80012f2:	2300      	movs	r3, #0

	}

}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6858      	ldr	r0, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	899b      	ldrh	r3, [r3, #12]
 800130c:	2201      	movs	r2, #1
 800130e:	4619      	mov	r1, r3
 8001310:	f001 fdb8 	bl	8002e84 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7d5b      	ldrb	r3, [r3, #21]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7d1b      	ldrb	r3, [r3, #20]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	b21b      	sxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7ddb      	ldrb	r3, [r3, #23]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21a      	sxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7d9b      	ldrb	r3, [r3, #22]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7e5b      	ldrb	r3, [r3, #25]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21a      	sxth	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7e1b      	ldrb	r3, [r3, #24]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	b21b      	sxth	r3, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc[0] = imu->accConversion * accX;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001362:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	imu->acc[1] = imu->accConversion * accY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800137e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	imu->acc[2] = imu->accConversion * accZ;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800139a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80013c0:	2382      	movs	r3, #130	; 0x82
 80013c2:	723b      	strb	r3, [r7, #8]
 80013c4:	2300      	movs	r3, #0
 80013c6:	727b      	strb	r3, [r7, #9]
 80013c8:	2300      	movs	r3, #0
 80013ca:	72bb      	strb	r3, [r7, #10]
 80013cc:	2300      	movs	r3, #0
 80013ce:	72fb      	strb	r3, [r7, #11]
 80013d0:	2300      	movs	r3, #0
 80013d2:	733b      	strb	r3, [r7, #12]
 80013d4:	2300      	movs	r3, #0
 80013d6:	737b      	strb	r3, [r7, #13]
 80013d8:	2300      	movs	r3, #0
 80013da:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6898      	ldr	r0, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	89db      	ldrh	r3, [r3, #14]
 80013e4:	2200      	movs	r2, #0
 80013e6:	4619      	mov	r1, r3
 80013e8:	f001 fd4c 	bl	8002e84 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, txBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f103 021a 	add.w	r2, r3, #26
 80013f6:	f107 0108 	add.w	r1, r7, #8
 80013fa:	2307      	movs	r3, #7
 80013fc:	f003 fe6a 	bl	80050d4 <HAL_SPI_TransmitReceive_DMA>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d104      	bne.n	8001410 <BMI088_ReadGyroscopeDMA+0x58>

		imu->readingGyr = 1;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	745a      	strb	r2, [r3, #17]
		return 1;
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <BMI088_ReadGyroscopeDMA+0x5a>

	} else {

		return 0;
 8001410:	2300      	movs	r3, #0

	}

}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 800141a:	b580      	push	{r7, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6898      	ldr	r0, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	89db      	ldrh	r3, [r3, #14]
 800142a:	2201      	movs	r2, #1
 800142c:	4619      	mov	r1, r3
 800142e:	f001 fd29 	bl	8002e84 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7f1b      	ldrb	r3, [r3, #28]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	b21a      	sxth	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7edb      	ldrb	r3, [r3, #27]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	b21b      	sxth	r3, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7f9b      	ldrb	r3, [r3, #30]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	b21a      	sxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7f5b      	ldrb	r3, [r3, #29]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	b21b      	sxth	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3020 	ldrb.w	r3, [r3, #32]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b21a      	sxth	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7fdb      	ldrb	r3, [r3, #31]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	b21b      	sxth	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr[0] = imu->gyrConversion * gyrX;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->gyr[1] = imu->gyrConversion * gyrY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800149e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->gyr[2] = imu->gyrConversion * gyrZ;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80014ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

	if (imu.readingAcc) {
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_SPI_TxRxCpltCallback+0x2c>)
 80014e2:	7c1b      	ldrb	r3, [r3, #16]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <HAL_SPI_TxRxCpltCallback+0x16>

		BMI088_ReadAccelerometerDMA_Complete(&imu);
 80014e8:	4806      	ldr	r0, [pc, #24]	; (8001504 <HAL_SPI_TxRxCpltCallback+0x2c>)
 80014ea:	f7ff ff07 	bl	80012fc <BMI088_ReadAccelerometerDMA_Complete>

	}

	if (imu.readingGyr) {
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_SPI_TxRxCpltCallback+0x2c>)
 80014f0:	7c5b      	ldrb	r3, [r3, #17]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d002      	beq.n	80014fc <HAL_SPI_TxRxCpltCallback+0x24>

		BMI088_ReadGyroscopeDMA_Complete(&imu);
 80014f6:	4803      	ldr	r0, [pc, #12]	; (8001504 <HAL_SPI_TxRxCpltCallback+0x2c>)
 80014f8:	f7ff ff8f 	bl	800141a <BMI088_ReadGyroscopeDMA_Complete>

	}

}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200003bc 	.word	0x200003bc

08001508 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == INT_ACC_Pin) {
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	2b04      	cmp	r3, #4
 8001516:	d103      	bne.n	8001520 <HAL_GPIO_EXTI_Callback+0x18>

		BMI088_ReadAccelerometerDMA(&imu);
 8001518:	4806      	ldr	r0, [pc, #24]	; (8001534 <HAL_GPIO_EXTI_Callback+0x2c>)
 800151a:	f7ff fec5 	bl	80012a8 <BMI088_ReadAccelerometerDMA>

		//BMI088_ReadGyroscope(&imu);

	}

}
 800151e:	e005      	b.n	800152c <HAL_GPIO_EXTI_Callback+0x24>
	} else if (GPIO_Pin == INT_GYR_Pin) {
 8001520:	88fb      	ldrh	r3, [r7, #6]
 8001522:	2b08      	cmp	r3, #8
 8001524:	d102      	bne.n	800152c <HAL_GPIO_EXTI_Callback+0x24>
		BMI088_ReadGyroscopeDMA(&imu);
 8001526:	4803      	ldr	r0, [pc, #12]	; (8001534 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001528:	f7ff ff46 	bl	80013b8 <BMI088_ReadGyroscopeDMA>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200003bc 	.word	0x200003bc

08001538 <LED_RGB_Init>:

void LED_RGB_Init() {
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0

	/* Start RGB LED PWM timers */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800153c:	2100      	movs	r1, #0
 800153e:	4806      	ldr	r0, [pc, #24]	; (8001558 <LED_RGB_Init+0x20>)
 8001540:	f004 fa5e 	bl	8005a00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001544:	2104      	movs	r1, #4
 8001546:	4804      	ldr	r0, [pc, #16]	; (8001558 <LED_RGB_Init+0x20>)
 8001548:	f004 fa5a 	bl	8005a00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800154c:	2100      	movs	r1, #0
 800154e:	4803      	ldr	r0, [pc, #12]	; (800155c <LED_RGB_Init+0x24>)
 8001550:	f004 fa56 	bl	8005a00 <HAL_TIM_PWM_Start>

}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000400 	.word	0x20000400
 800155c:	2000037c 	.word	0x2000037c

08001560 <LED_RGB_SetIntensity>:

void LED_RGB_SetIntensity(uint8_t red, uint8_t green, uint8_t blue) {
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	460b      	mov	r3, r1
 800156c:	71bb      	strb	r3, [r7, #6]
 800156e:	4613      	mov	r3, r2
 8001570:	717b      	strb	r3, [r7, #5]

	htim3.Instance->CCR1 = 100 - red;
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <LED_RGB_SetIntensity+0x44>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = 100 - green;
 800157e:	79bb      	ldrb	r3, [r7, #6]
 8001580:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <LED_RGB_SetIntensity+0x44>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR1 = 100 - blue;
 800158a:	797b      	ldrb	r3, [r7, #5]
 800158c:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <LED_RGB_SetIntensity+0x48>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000400 	.word	0x20000400
 80015a8:	2000037c 	.word	0x2000037c

080015ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015b0:	b0ae      	sub	sp, #184	; 0xb8
 80015b2:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b4:	f000 fd96 	bl	80020e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b8:	f000 f884 	bl	80016c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015bc:	f000 fa78 	bl	8001ab0 <MX_GPIO_Init>
  MX_DMA_Init();
 80015c0:	f000 fa4e 	bl	8001a60 <MX_DMA_Init>
  MX_SPI1_Init();
 80015c4:	f000 f8e8 	bl	8001798 <MX_SPI1_Init>
  MX_SPI3_Init();
 80015c8:	f000 f91c 	bl	8001804 <MX_SPI3_Init>
  MX_TIM3_Init();
 80015cc:	f000 f950 	bl	8001870 <MX_TIM3_Init>
  MX_TIM4_Init();
 80015d0:	f000 f9d0 	bl	8001974 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80015d4:	f007 fe8e 	bl	80092f4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  LED_RGB_Init();
 80015d8:	f7ff ffae 	bl	8001538 <LED_RGB_Init>
  LED_RGB_SetIntensity(0, 0, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	2000      	movs	r0, #0
 80015e2:	f7ff ffbd 	bl	8001560 <LED_RGB_SetIntensity>

  BMI088_Init(&imu, &hspi1, GPIOA, SPI1_NCS_ACC_Pin, GPIOC, SPI1_NCS_GYR_Pin);
 80015e6:	2310      	movs	r3, #16
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <main+0x104>)
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2310      	movs	r3, #16
 80015f0:	4a30      	ldr	r2, [pc, #192]	; (80016b4 <main+0x108>)
 80015f2:	4931      	ldr	r1, [pc, #196]	; (80016b8 <main+0x10c>)
 80015f4:	4831      	ldr	r0, [pc, #196]	; (80016bc <main+0x110>)
 80015f6:	f7ff fc57 	bl	8000ea8 <BMI088_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  sprintf(logBuf, "%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\r\n", imu.acc[0], imu.acc[1], imu.acc[2],
 80015fa:	4b30      	ldr	r3, [pc, #192]	; (80016bc <main+0x110>)
 80015fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ffa2 	bl	8000548 <__aeabi_f2d>
 8001604:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001608:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <main+0x110>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff9b 	bl	8000548 <__aeabi_f2d>
 8001612:	4604      	mov	r4, r0
 8001614:	460d      	mov	r5, r1
 8001616:	4b29      	ldr	r3, [pc, #164]	; (80016bc <main+0x110>)
 8001618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff94 	bl	8000548 <__aeabi_f2d>
 8001620:	4680      	mov	r8, r0
 8001622:	4689      	mov	r9, r1
			  	  	  	  	  	  	  	  	  	  	    imu.gyr[0], imu.gyr[1], imu.gyr[2]);
 8001624:	4b25      	ldr	r3, [pc, #148]	; (80016bc <main+0x110>)
 8001626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	  sprintf(logBuf, "%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\r\n", imu.acc[0], imu.acc[1], imu.acc[2],
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff8d 	bl	8000548 <__aeabi_f2d>
 800162e:	4682      	mov	sl, r0
 8001630:	468b      	mov	fp, r1
			  	  	  	  	  	  	  	  	  	  	    imu.gyr[0], imu.gyr[1], imu.gyr[2]);
 8001632:	4b22      	ldr	r3, [pc, #136]	; (80016bc <main+0x110>)
 8001634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	  sprintf(logBuf, "%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\r\n", imu.acc[0], imu.acc[1], imu.acc[2],
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff86 	bl	8000548 <__aeabi_f2d>
 800163c:	e9c7 0100 	strd	r0, r1, [r7]
			  	  	  	  	  	  	  	  	  	  	    imu.gyr[0], imu.gyr[1], imu.gyr[2]);
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <main+0x110>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	  sprintf(logBuf, "%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\r\n", imu.acc[0], imu.acc[1], imu.acc[2],
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff7f 	bl	8000548 <__aeabi_f2d>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	f107 0010 	add.w	r0, r7, #16
 8001652:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001656:	ed97 7b00 	vldr	d7, [r7]
 800165a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800165e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001662:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001666:	e9cd 4500 	strd	r4, r5, [sp]
 800166a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800166e:	4914      	ldr	r1, [pc, #80]	; (80016c0 <main+0x114>)
 8001670:	f009 f896 	bl	800a7a0 <siprintf>

	  CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe fda9 	bl	80001d0 <strlen>
 800167e:	4603      	mov	r3, r0
 8001680:	b29a      	uxth	r2, r3
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f007 fef1 	bl	8009470 <CDC_Transmit_FS>

	  LED_RGB_SetIntensity(100, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	2064      	movs	r0, #100	; 0x64
 8001694:	f7ff ff64 	bl	8001560 <LED_RGB_SetIntensity>
	  HAL_Delay(250);
 8001698:	20fa      	movs	r0, #250	; 0xfa
 800169a:	f000 fd95 	bl	80021c8 <HAL_Delay>

	  LED_RGB_SetIntensity(0, 0, 100);
 800169e:	2264      	movs	r2, #100	; 0x64
 80016a0:	2100      	movs	r1, #0
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff ff5c 	bl	8001560 <LED_RGB_SetIntensity>
	  HAL_Delay(250);
 80016a8:	20fa      	movs	r0, #250	; 0xfa
 80016aa:	f000 fd8d 	bl	80021c8 <HAL_Delay>
	  sprintf(logBuf, "%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\r\n", imu.acc[0], imu.acc[1], imu.acc[2],
 80016ae:	e7a4      	b.n	80015fa <main+0x4e>
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020000 	.word	0x40020000
 80016b8:	20000498 	.word	0x20000498
 80016bc:	200003bc 	.word	0x200003bc
 80016c0:	0800bdf8 	.word	0x0800bdf8

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b094      	sub	sp, #80	; 0x50
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	2230      	movs	r2, #48	; 0x30
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f008 fb48 	bl	8009d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <SystemClock_Config+0xcc>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a27      	ldr	r2, [pc, #156]	; (8001790 <SystemClock_Config+0xcc>)
 80016f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <SystemClock_Config+0xcc>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <SystemClock_Config+0xd0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a21      	ldr	r2, [pc, #132]	; (8001794 <SystemClock_Config+0xd0>)
 800170e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <SystemClock_Config+0xd0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001720:	2301      	movs	r3, #1
 8001722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172a:	2302      	movs	r3, #2
 800172c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800172e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001734:	2308      	movs	r3, #8
 8001736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001738:	23a8      	movs	r3, #168	; 0xa8
 800173a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800173c:	2302      	movs	r3, #2
 800173e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001740:	2307      	movs	r3, #7
 8001742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001744:	f107 0320 	add.w	r3, r7, #32
 8001748:	4618      	mov	r0, r3
 800174a:	f002 fd51 	bl	80041f0 <HAL_RCC_OscConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001754:	f000 fa40 	bl	8001bd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001758:	230f      	movs	r3, #15
 800175a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175c:	2302      	movs	r3, #2
 800175e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800176a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	2105      	movs	r1, #5
 8001776:	4618      	mov	r0, r3
 8001778:	f002 ffaa 	bl	80046d0 <HAL_RCC_ClockConfig>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001782:	f000 fa29 	bl	8001bd8 <Error_Handler>
  }
}
 8001786:	bf00      	nop
 8001788:	3750      	adds	r7, #80	; 0x50
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	40007000 	.word	0x40007000

08001798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <MX_SPI1_Init+0x64>)
 800179e:	4a18      	ldr	r2, [pc, #96]	; (8001800 <MX_SPI1_Init+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <MX_SPI1_Init+0x64>)
 80017a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <MX_SPI1_Init+0x64>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <MX_SPI1_Init+0x64>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_SPI1_Init+0x64>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_SPI1_Init+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_SPI1_Init+0x64>)
 80017c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_SPI1_Init+0x64>)
 80017cc:	2218      	movs	r2, #24
 80017ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <MX_SPI1_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_SPI1_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <MX_SPI1_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_SPI1_Init+0x64>)
 80017e4:	220a      	movs	r2, #10
 80017e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017e8:	4804      	ldr	r0, [pc, #16]	; (80017fc <MX_SPI1_Init+0x64>)
 80017ea:	f003 f939 	bl	8004a60 <HAL_SPI_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017f4:	f000 f9f0 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000498 	.word	0x20000498
 8001800:	40013000 	.word	0x40013000

08001804 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001808:	4b17      	ldr	r3, [pc, #92]	; (8001868 <MX_SPI3_Init+0x64>)
 800180a:	4a18      	ldr	r2, [pc, #96]	; (800186c <MX_SPI3_Init+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <MX_SPI3_Init+0x64>)
 8001810:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001814:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <MX_SPI3_Init+0x64>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <MX_SPI3_Init+0x64>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_SPI3_Init+0x64>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_SPI3_Init+0x64>)
 800182a:	2200      	movs	r2, #0
 800182c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_SPI3_Init+0x64>)
 8001830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001834:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_SPI3_Init+0x64>)
 8001838:	2210      	movs	r2, #16
 800183a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <MX_SPI3_Init+0x64>)
 800183e:	2200      	movs	r2, #0
 8001840:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_SPI3_Init+0x64>)
 8001844:	2200      	movs	r2, #0
 8001846:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <MX_SPI3_Init+0x64>)
 800184a:	2200      	movs	r2, #0
 800184c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_SPI3_Init+0x64>)
 8001850:	220a      	movs	r2, #10
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <MX_SPI3_Init+0x64>)
 8001856:	f003 f903 	bl	8004a60 <HAL_SPI_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001860:	f000 f9ba 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000440 	.word	0x20000440
 800186c:	40003c00 	.word	0x40003c00

08001870 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08e      	sub	sp, #56	; 0x38
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001884:	f107 0320 	add.w	r3, r7, #32
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	615a      	str	r2, [r3, #20]
 800189e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018a0:	4b32      	ldr	r3, [pc, #200]	; (800196c <MX_TIM3_Init+0xfc>)
 80018a2:	4a33      	ldr	r2, [pc, #204]	; (8001970 <MX_TIM3_Init+0x100>)
 80018a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80018a6:	4b31      	ldr	r3, [pc, #196]	; (800196c <MX_TIM3_Init+0xfc>)
 80018a8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80018ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ae:	4b2f      	ldr	r3, [pc, #188]	; (800196c <MX_TIM3_Init+0xfc>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80018b4:	4b2d      	ldr	r3, [pc, #180]	; (800196c <MX_TIM3_Init+0xfc>)
 80018b6:	2263      	movs	r2, #99	; 0x63
 80018b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ba:	4b2c      	ldr	r3, [pc, #176]	; (800196c <MX_TIM3_Init+0xfc>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c0:	4b2a      	ldr	r3, [pc, #168]	; (800196c <MX_TIM3_Init+0xfc>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018c6:	4829      	ldr	r0, [pc, #164]	; (800196c <MX_TIM3_Init+0xfc>)
 80018c8:	f004 f83a 	bl	8005940 <HAL_TIM_Base_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80018d2:	f000 f981 	bl	8001bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e0:	4619      	mov	r1, r3
 80018e2:	4822      	ldr	r0, [pc, #136]	; (800196c <MX_TIM3_Init+0xfc>)
 80018e4:	f004 f990 	bl	8005c08 <HAL_TIM_ConfigClockSource>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80018ee:	f000 f973 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018f2:	481e      	ldr	r0, [pc, #120]	; (800196c <MX_TIM3_Init+0xfc>)
 80018f4:	f004 f84f 	bl	8005996 <HAL_TIM_PWM_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80018fe:	f000 f96b 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800190a:	f107 0320 	add.w	r3, r7, #32
 800190e:	4619      	mov	r1, r3
 8001910:	4816      	ldr	r0, [pc, #88]	; (800196c <MX_TIM3_Init+0xfc>)
 8001912:	f004 fd41 	bl	8006398 <HAL_TIMEx_MasterConfigSynchronization>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800191c:	f000 f95c 	bl	8001bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001920:	2360      	movs	r3, #96	; 0x60
 8001922:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	2200      	movs	r2, #0
 8001934:	4619      	mov	r1, r3
 8001936:	480d      	ldr	r0, [pc, #52]	; (800196c <MX_TIM3_Init+0xfc>)
 8001938:	f004 f8a0 	bl	8005a7c <HAL_TIM_PWM_ConfigChannel>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001942:	f000 f949 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2204      	movs	r2, #4
 800194a:	4619      	mov	r1, r3
 800194c:	4807      	ldr	r0, [pc, #28]	; (800196c <MX_TIM3_Init+0xfc>)
 800194e:	f004 f895 	bl	8005a7c <HAL_TIM_PWM_ConfigChannel>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001958:	f000 f93e 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800195c:	4803      	ldr	r0, [pc, #12]	; (800196c <MX_TIM3_Init+0xfc>)
 800195e:	f000 fa91 	bl	8001e84 <HAL_TIM_MspPostInit>

}
 8001962:	bf00      	nop
 8001964:	3738      	adds	r7, #56	; 0x38
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000400 	.word	0x20000400
 8001970:	40000400 	.word	0x40000400

08001974 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08e      	sub	sp, #56	; 0x38
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001988:	f107 0320 	add.w	r3, r7, #32
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
 80019a0:	615a      	str	r2, [r3, #20]
 80019a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019a4:	4b2c      	ldr	r3, [pc, #176]	; (8001a58 <MX_TIM4_Init+0xe4>)
 80019a6:	4a2d      	ldr	r2, [pc, #180]	; (8001a5c <MX_TIM4_Init+0xe8>)
 80019a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 80019aa:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <MX_TIM4_Init+0xe4>)
 80019ac:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80019b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b2:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <MX_TIM4_Init+0xe4>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80019b8:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <MX_TIM4_Init+0xe4>)
 80019ba:	2263      	movs	r2, #99	; 0x63
 80019bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <MX_TIM4_Init+0xe4>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <MX_TIM4_Init+0xe4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019ca:	4823      	ldr	r0, [pc, #140]	; (8001a58 <MX_TIM4_Init+0xe4>)
 80019cc:	f003 ffb8 	bl	8005940 <HAL_TIM_Base_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80019d6:	f000 f8ff 	bl	8001bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e4:	4619      	mov	r1, r3
 80019e6:	481c      	ldr	r0, [pc, #112]	; (8001a58 <MX_TIM4_Init+0xe4>)
 80019e8:	f004 f90e 	bl	8005c08 <HAL_TIM_ConfigClockSource>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80019f2:	f000 f8f1 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019f6:	4818      	ldr	r0, [pc, #96]	; (8001a58 <MX_TIM4_Init+0xe4>)
 80019f8:	f003 ffcd 	bl	8005996 <HAL_TIM_PWM_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001a02:	f000 f8e9 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	4619      	mov	r1, r3
 8001a14:	4810      	ldr	r0, [pc, #64]	; (8001a58 <MX_TIM4_Init+0xe4>)
 8001a16:	f004 fcbf 	bl	8006398 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001a20:	f000 f8da 	bl	8001bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a24:	2360      	movs	r3, #96	; 0x60
 8001a26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2200      	movs	r2, #0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4807      	ldr	r0, [pc, #28]	; (8001a58 <MX_TIM4_Init+0xe4>)
 8001a3c:	f004 f81e 	bl	8005a7c <HAL_TIM_PWM_ConfigChannel>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001a46:	f000 f8c7 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a4a:	4803      	ldr	r0, [pc, #12]	; (8001a58 <MX_TIM4_Init+0xe4>)
 8001a4c:	f000 fa1a 	bl	8001e84 <HAL_TIM_MspPostInit>

}
 8001a50:	bf00      	nop
 8001a52:	3738      	adds	r7, #56	; 0x38
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	2000037c 	.word	0x2000037c
 8001a5c:	40000800 	.word	0x40000800

08001a60 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <MX_DMA_Init+0x4c>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <MX_DMA_Init+0x4c>)
 8001a70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <MX_DMA_Init+0x4c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	2038      	movs	r0, #56	; 0x38
 8001a88:	f000 fc9b 	bl	80023c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a8c:	2038      	movs	r0, #56	; 0x38
 8001a8e:	f000 fcb4 	bl	80023fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	203b      	movs	r0, #59	; 0x3b
 8001a98:	f000 fc93 	bl	80023c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a9c:	203b      	movs	r0, #59	; 0x3b
 8001a9e:	f000 fcac 	bl	80023fa <HAL_NVIC_EnableIRQ>

}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800

08001ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b3f      	ldr	r3, [pc, #252]	; (8001bc8 <MX_GPIO_Init+0x118>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a3e      	ldr	r2, [pc, #248]	; (8001bc8 <MX_GPIO_Init+0x118>)
 8001ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b3c      	ldr	r3, [pc, #240]	; (8001bc8 <MX_GPIO_Init+0x118>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b38      	ldr	r3, [pc, #224]	; (8001bc8 <MX_GPIO_Init+0x118>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a37      	ldr	r2, [pc, #220]	; (8001bc8 <MX_GPIO_Init+0x118>)
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b35      	ldr	r3, [pc, #212]	; (8001bc8 <MX_GPIO_Init+0x118>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <MX_GPIO_Init+0x118>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a30      	ldr	r2, [pc, #192]	; (8001bc8 <MX_GPIO_Init+0x118>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b2e      	ldr	r3, [pc, #184]	; (8001bc8 <MX_GPIO_Init+0x118>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <MX_GPIO_Init+0x118>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <MX_GPIO_Init+0x118>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <MX_GPIO_Init+0x118>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NCS_ACC_Pin|SPI3_NCS_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	f248 0110 	movw	r1, #32784	; 0x8010
 8001b3c:	4823      	ldr	r0, [pc, #140]	; (8001bcc <MX_GPIO_Init+0x11c>)
 8001b3e:	f001 f9a1 	bl	8002e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_NCS_GYR_Pin|FLASH_NHOLD_Pin|FLASH_NWP_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	21d0      	movs	r1, #208	; 0xd0
 8001b46:	4822      	ldr	r0, [pc, #136]	; (8001bd0 <MX_GPIO_Init+0x120>)
 8001b48:	f001 f99c 	bl	8002e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 8001b4c:	230c      	movs	r3, #12
 8001b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <MX_GPIO_Init+0x124>)
 8001b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	481c      	ldr	r0, [pc, #112]	; (8001bd0 <MX_GPIO_Init+0x120>)
 8001b60:	f000 fff6 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_NCS_ACC_Pin SPI3_NCS_Pin */
  GPIO_InitStruct.Pin = SPI1_NCS_ACC_Pin|SPI3_NCS_Pin;
 8001b64:	f248 0310 	movw	r3, #32784	; 0x8010
 8001b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4813      	ldr	r0, [pc, #76]	; (8001bcc <MX_GPIO_Init+0x11c>)
 8001b7e:	f000 ffe7 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_NCS_GYR_Pin FLASH_NHOLD_Pin FLASH_NWP_Pin */
  GPIO_InitStruct.Pin = SPI1_NCS_GYR_Pin|FLASH_NHOLD_Pin|FLASH_NWP_Pin;
 8001b82:	23d0      	movs	r3, #208	; 0xd0
 8001b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b86:	2301      	movs	r3, #1
 8001b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <MX_GPIO_Init+0x120>)
 8001b9a:	f000 ffd9 	bl	8002b50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2008      	movs	r0, #8
 8001ba4:	f000 fc0d 	bl	80023c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001ba8:	2008      	movs	r0, #8
 8001baa:	f000 fc26 	bl	80023fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2009      	movs	r0, #9
 8001bb4:	f000 fc05 	bl	80023c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001bb8:	2009      	movs	r0, #9
 8001bba:	f000 fc1e 	bl	80023fa <HAL_NVIC_EnableIRQ>

}
 8001bbe:	bf00      	nop
 8001bc0:	3728      	adds	r7, #40	; 0x28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	10110000 	.word	0x10110000

08001bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_MspInit+0x4c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <HAL_MspInit+0x4c>)
 8001bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_MspInit+0x4c>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	603b      	str	r3, [r7, #0]
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_MspInit+0x4c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_MspInit+0x4c>)
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_MspInit+0x4c>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800

08001c38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08c      	sub	sp, #48	; 0x30
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a66      	ldr	r2, [pc, #408]	; (8001df0 <HAL_SPI_MspInit+0x1b8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	f040 8093 	bne.w	8001d82 <HAL_SPI_MspInit+0x14a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	4b64      	ldr	r3, [pc, #400]	; (8001df4 <HAL_SPI_MspInit+0x1bc>)
 8001c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c64:	4a63      	ldr	r2, [pc, #396]	; (8001df4 <HAL_SPI_MspInit+0x1bc>)
 8001c66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c6a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6c:	4b61      	ldr	r3, [pc, #388]	; (8001df4 <HAL_SPI_MspInit+0x1bc>)
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	4b5d      	ldr	r3, [pc, #372]	; (8001df4 <HAL_SPI_MspInit+0x1bc>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	4a5c      	ldr	r2, [pc, #368]	; (8001df4 <HAL_SPI_MspInit+0x1bc>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6313      	str	r3, [r2, #48]	; 0x30
 8001c88:	4b5a      	ldr	r3, [pc, #360]	; (8001df4 <HAL_SPI_MspInit+0x1bc>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c94:	23e0      	movs	r3, #224	; 0xe0
 8001c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	4619      	mov	r1, r3
 8001cae:	4852      	ldr	r0, [pc, #328]	; (8001df8 <HAL_SPI_MspInit+0x1c0>)
 8001cb0:	f000 ff4e 	bl	8002b50 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001cb4:	4b51      	ldr	r3, [pc, #324]	; (8001dfc <HAL_SPI_MspInit+0x1c4>)
 8001cb6:	4a52      	ldr	r2, [pc, #328]	; (8001e00 <HAL_SPI_MspInit+0x1c8>)
 8001cb8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001cba:	4b50      	ldr	r3, [pc, #320]	; (8001dfc <HAL_SPI_MspInit+0x1c4>)
 8001cbc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001cc0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cc2:	4b4e      	ldr	r3, [pc, #312]	; (8001dfc <HAL_SPI_MspInit+0x1c4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc8:	4b4c      	ldr	r3, [pc, #304]	; (8001dfc <HAL_SPI_MspInit+0x1c4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cce:	4b4b      	ldr	r3, [pc, #300]	; (8001dfc <HAL_SPI_MspInit+0x1c4>)
 8001cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cd4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cd6:	4b49      	ldr	r3, [pc, #292]	; (8001dfc <HAL_SPI_MspInit+0x1c4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cdc:	4b47      	ldr	r3, [pc, #284]	; (8001dfc <HAL_SPI_MspInit+0x1c4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001ce2:	4b46      	ldr	r3, [pc, #280]	; (8001dfc <HAL_SPI_MspInit+0x1c4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ce8:	4b44      	ldr	r3, [pc, #272]	; (8001dfc <HAL_SPI_MspInit+0x1c4>)
 8001cea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cee:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cf0:	4b42      	ldr	r3, [pc, #264]	; (8001dfc <HAL_SPI_MspInit+0x1c4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001cf6:	4841      	ldr	r0, [pc, #260]	; (8001dfc <HAL_SPI_MspInit+0x1c4>)
 8001cf8:	f000 fb9a 	bl	8002430 <HAL_DMA_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001d02:	f7ff ff69 	bl	8001bd8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a3c      	ldr	r2, [pc, #240]	; (8001dfc <HAL_SPI_MspInit+0x1c4>)
 8001d0a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d0c:	4a3b      	ldr	r2, [pc, #236]	; (8001dfc <HAL_SPI_MspInit+0x1c4>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001d12:	4b3c      	ldr	r3, [pc, #240]	; (8001e04 <HAL_SPI_MspInit+0x1cc>)
 8001d14:	4a3c      	ldr	r2, [pc, #240]	; (8001e08 <HAL_SPI_MspInit+0x1d0>)
 8001d16:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001d18:	4b3a      	ldr	r3, [pc, #232]	; (8001e04 <HAL_SPI_MspInit+0x1cc>)
 8001d1a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001d1e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d20:	4b38      	ldr	r3, [pc, #224]	; (8001e04 <HAL_SPI_MspInit+0x1cc>)
 8001d22:	2240      	movs	r2, #64	; 0x40
 8001d24:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d26:	4b37      	ldr	r3, [pc, #220]	; (8001e04 <HAL_SPI_MspInit+0x1cc>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d2c:	4b35      	ldr	r3, [pc, #212]	; (8001e04 <HAL_SPI_MspInit+0x1cc>)
 8001d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d32:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d34:	4b33      	ldr	r3, [pc, #204]	; (8001e04 <HAL_SPI_MspInit+0x1cc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d3a:	4b32      	ldr	r3, [pc, #200]	; (8001e04 <HAL_SPI_MspInit+0x1cc>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001d40:	4b30      	ldr	r3, [pc, #192]	; (8001e04 <HAL_SPI_MspInit+0x1cc>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d46:	4b2f      	ldr	r3, [pc, #188]	; (8001e04 <HAL_SPI_MspInit+0x1cc>)
 8001d48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d4c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_SPI_MspInit+0x1cc>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d54:	482b      	ldr	r0, [pc, #172]	; (8001e04 <HAL_SPI_MspInit+0x1cc>)
 8001d56:	f000 fb6b 	bl	8002430 <HAL_DMA_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8001d60:	f7ff ff3a 	bl	8001bd8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <HAL_SPI_MspInit+0x1cc>)
 8001d68:	649a      	str	r2, [r3, #72]	; 0x48
 8001d6a:	4a26      	ldr	r2, [pc, #152]	; (8001e04 <HAL_SPI_MspInit+0x1cc>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	2023      	movs	r0, #35	; 0x23
 8001d76:	f000 fb24 	bl	80023c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001d7a:	2023      	movs	r0, #35	; 0x23
 8001d7c:	f000 fb3d 	bl	80023fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d80:	e031      	b.n	8001de6 <HAL_SPI_MspInit+0x1ae>
  else if(hspi->Instance==SPI3)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a21      	ldr	r2, [pc, #132]	; (8001e0c <HAL_SPI_MspInit+0x1d4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d12c      	bne.n	8001de6 <HAL_SPI_MspInit+0x1ae>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <HAL_SPI_MspInit+0x1bc>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	4a17      	ldr	r2, [pc, #92]	; (8001df4 <HAL_SPI_MspInit+0x1bc>)
 8001d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_SPI_MspInit+0x1bc>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_SPI_MspInit+0x1bc>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	4a10      	ldr	r2, [pc, #64]	; (8001df4 <HAL_SPI_MspInit+0x1bc>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	6313      	str	r3, [r2, #48]	; 0x30
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_SPI_MspInit+0x1bc>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001dc4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dda:	f107 031c 	add.w	r3, r7, #28
 8001dde:	4619      	mov	r1, r3
 8001de0:	480b      	ldr	r0, [pc, #44]	; (8001e10 <HAL_SPI_MspInit+0x1d8>)
 8001de2:	f000 feb5 	bl	8002b50 <HAL_GPIO_Init>
}
 8001de6:	bf00      	nop
 8001de8:	3730      	adds	r7, #48	; 0x30
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40013000 	.word	0x40013000
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	200004f0 	.word	0x200004f0
 8001e00:	40026410 	.word	0x40026410
 8001e04:	20000550 	.word	0x20000550
 8001e08:	40026458 	.word	0x40026458
 8001e0c:	40003c00 	.word	0x40003c00
 8001e10:	40020800 	.word	0x40020800

08001e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <HAL_TIM_Base_MspInit+0x64>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10e      	bne.n	8001e44 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_TIM_Base_MspInit+0x68>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <HAL_TIM_Base_MspInit+0x68>)
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_TIM_Base_MspInit+0x68>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e42:	e012      	b.n	8001e6a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <HAL_TIM_Base_MspInit+0x6c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d10d      	bne.n	8001e6a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_TIM_Base_MspInit+0x68>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	4a09      	ldr	r2, [pc, #36]	; (8001e7c <HAL_TIM_Base_MspInit+0x68>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <HAL_TIM_Base_MspInit+0x68>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40000400 	.word	0x40000400
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40000800 	.word	0x40000800

08001e84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a24      	ldr	r2, [pc, #144]	; (8001f34 <HAL_TIM_MspPostInit+0xb0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d11e      	bne.n	8001ee4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <HAL_TIM_MspPostInit+0xb4>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a22      	ldr	r2, [pc, #136]	; (8001f38 <HAL_TIM_MspPostInit+0xb4>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <HAL_TIM_MspPostInit+0xb4>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 8001ec2:	2330      	movs	r3, #48	; 0x30
 8001ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	4619      	mov	r1, r3
 8001edc:	4817      	ldr	r0, [pc, #92]	; (8001f3c <HAL_TIM_MspPostInit+0xb8>)
 8001ede:	f000 fe37 	bl	8002b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ee2:	e022      	b.n	8001f2a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a15      	ldr	r2, [pc, #84]	; (8001f40 <HAL_TIM_MspPostInit+0xbc>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d11d      	bne.n	8001f2a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_TIM_MspPostInit+0xb4>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_TIM_MspPostInit+0xb4>)
 8001ef8:	f043 0302 	orr.w	r3, r3, #2
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_TIM_MspPostInit+0xb4>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001f0a:	2340      	movs	r3, #64	; 0x40
 8001f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	4619      	mov	r1, r3
 8001f24:	4805      	ldr	r0, [pc, #20]	; (8001f3c <HAL_TIM_MspPostInit+0xb8>)
 8001f26:	f000 fe13 	bl	8002b50 <HAL_GPIO_Init>
}
 8001f2a:	bf00      	nop
 8001f2c:	3728      	adds	r7, #40	; 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40000400 	.word	0x40000400
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020400 	.word	0x40020400
 8001f40:	40000800 	.word	0x40000800

08001f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f56:	e7fe      	b.n	8001f56 <HardFault_Handler+0x4>

08001f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <MemManage_Handler+0x4>

08001f5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <BusFault_Handler+0x4>

08001f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <UsageFault_Handler+0x4>

08001f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f98:	f000 f8f6 	bl	8002188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001fa4:	2004      	movs	r0, #4
 8001fa6:	f000 ff87 	bl	8002eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}

08001fae <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001fb2:	2008      	movs	r0, #8
 8001fb4:	f000 ff80 	bl	8002eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <SPI1_IRQHandler+0x10>)
 8001fc2:	f003 f989 	bl	80052d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000498 	.word	0x20000498

08001fd0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <DMA2_Stream0_IRQHandler+0x10>)
 8001fd6:	f000 fb53 	bl	8002680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200004f0 	.word	0x200004f0

08001fe4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <DMA2_Stream3_IRQHandler+0x10>)
 8001fea:	f000 fb49 	bl	8002680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000550 	.word	0x20000550

08001ff8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <OTG_FS_IRQHandler+0x10>)
 8001ffe:	f001 f8c3 	bl	8003188 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20001a84 	.word	0x20001a84

0800200c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <_sbrk+0x50>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <_sbrk+0x16>
		heap_end = &end;
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <_sbrk+0x50>)
 800201e:	4a10      	ldr	r2, [pc, #64]	; (8002060 <_sbrk+0x54>)
 8002020:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <_sbrk+0x50>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <_sbrk+0x50>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4413      	add	r3, r2
 8002030:	466a      	mov	r2, sp
 8002032:	4293      	cmp	r3, r2
 8002034:	d907      	bls.n	8002046 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002036:	f007 fe5d 	bl	8009cf4 <__errno>
 800203a:	4602      	mov	r2, r0
 800203c:	230c      	movs	r3, #12
 800203e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
 8002044:	e006      	b.n	8002054 <_sbrk+0x48>
	}

	heap_end += incr;
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <_sbrk+0x50>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	4a03      	ldr	r2, [pc, #12]	; (800205c <_sbrk+0x50>)
 8002050:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002052:	68fb      	ldr	r3, [r7, #12]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	2000036c 	.word	0x2000036c
 8002060:	20001e90 	.word	0x20001e90

08002064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <SystemInit+0x28>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	4a07      	ldr	r2, [pc, #28]	; (800208c <SystemInit+0x28>)
 8002070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <SystemInit+0x28>)
 800207a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800207e:	609a      	str	r2, [r3, #8]
#endif
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002094:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002096:	e003      	b.n	80020a0 <LoopCopyDataInit>

08002098 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800209a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800209c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800209e:	3104      	adds	r1, #4

080020a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020a0:	480b      	ldr	r0, [pc, #44]	; (80020d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020a8:	d3f6      	bcc.n	8002098 <CopyDataInit>
  ldr  r2, =_sbss
 80020aa:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020ac:	e002      	b.n	80020b4 <LoopFillZerobss>

080020ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020b0:	f842 3b04 	str.w	r3, [r2], #4

080020b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020b8:	d3f9      	bcc.n	80020ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020ba:	f7ff ffd3 	bl	8002064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020be:	f007 fe1f 	bl	8009d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020c2:	f7ff fa73 	bl	80015ac <main>
  bx  lr    
 80020c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020cc:	0800c0e8 	.word	0x0800c0e8
  ldr  r0, =_sdata
 80020d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020d4:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 80020d8:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 80020dc:	20001e90 	.word	0x20001e90

080020e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e0:	e7fe      	b.n	80020e0 <ADC_IRQHandler>
	...

080020e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020e8:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <HAL_Init+0x40>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0d      	ldr	r2, [pc, #52]	; (8002124 <HAL_Init+0x40>)
 80020ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_Init+0x40>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_Init+0x40>)
 80020fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_Init+0x40>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <HAL_Init+0x40>)
 8002106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800210c:	2003      	movs	r0, #3
 800210e:	f000 f94d 	bl	80023ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002112:	2000      	movs	r0, #0
 8002114:	f000 f808 	bl	8002128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002118:	f7ff fd66 	bl	8001be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023c00 	.word	0x40023c00

08002128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_InitTick+0x54>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_InitTick+0x58>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
 800213a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f965 	bl	8002416 <HAL_SYSTICK_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e00e      	b.n	8002174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b0f      	cmp	r3, #15
 800215a:	d80a      	bhi.n	8002172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800215c:	2200      	movs	r2, #0
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f000 f92d 	bl	80023c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002168:	4a06      	ldr	r2, [pc, #24]	; (8002184 <HAL_InitTick+0x5c>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000000 	.word	0x20000000
 8002180:	20000008 	.word	0x20000008
 8002184:	20000004 	.word	0x20000004

08002188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_IncTick+0x20>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_IncTick+0x24>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4413      	add	r3, r2
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_IncTick+0x24>)
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000008 	.word	0x20000008
 80021ac:	200005b0 	.word	0x200005b0

080021b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return uwTick;
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_GetTick+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	200005b0 	.word	0x200005b0

080021c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d0:	f7ff ffee 	bl	80021b0 <HAL_GetTick>
 80021d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e0:	d005      	beq.n	80021ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_Delay+0x40>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ee:	bf00      	nop
 80021f0:	f7ff ffde 	bl	80021b0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d8f7      	bhi.n	80021f0 <HAL_Delay+0x28>
  {
  }
}
 8002200:	bf00      	nop
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000008 	.word	0x20000008

0800220c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002228:	4013      	ands	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223e:	4a04      	ldr	r2, [pc, #16]	; (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	60d3      	str	r3, [r2, #12]
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <__NVIC_GetPriorityGrouping+0x18>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	f003 0307 	and.w	r3, r3, #7
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	2b00      	cmp	r3, #0
 8002280:	db0b      	blt.n	800229a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	4907      	ldr	r1, [pc, #28]	; (80022a8 <__NVIC_EnableIRQ+0x38>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	2001      	movs	r0, #1
 8002292:	fa00 f202 	lsl.w	r2, r0, r2
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000e100 	.word	0xe000e100

080022ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	db0a      	blt.n	80022d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	490c      	ldr	r1, [pc, #48]	; (80022f8 <__NVIC_SetPriority+0x4c>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	0112      	lsls	r2, r2, #4
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	440b      	add	r3, r1
 80022d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d4:	e00a      	b.n	80022ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4908      	ldr	r1, [pc, #32]	; (80022fc <__NVIC_SetPriority+0x50>)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	3b04      	subs	r3, #4
 80022e4:	0112      	lsls	r2, r2, #4
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	440b      	add	r3, r1
 80022ea:	761a      	strb	r2, [r3, #24]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000e100 	.word	0xe000e100
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f1c3 0307 	rsb	r3, r3, #7
 800231a:	2b04      	cmp	r3, #4
 800231c:	bf28      	it	cs
 800231e:	2304      	movcs	r3, #4
 8002320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3304      	adds	r3, #4
 8002326:	2b06      	cmp	r3, #6
 8002328:	d902      	bls.n	8002330 <NVIC_EncodePriority+0x30>
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3b03      	subs	r3, #3
 800232e:	e000      	b.n	8002332 <NVIC_EncodePriority+0x32>
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	f04f 32ff 	mov.w	r2, #4294967295
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	401a      	ands	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002348:	f04f 31ff 	mov.w	r1, #4294967295
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	43d9      	mvns	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	4313      	orrs	r3, r2
         );
}
 800235a:	4618      	mov	r0, r3
 800235c:	3724      	adds	r7, #36	; 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002378:	d301      	bcc.n	800237e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237a:	2301      	movs	r3, #1
 800237c:	e00f      	b.n	800239e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <SysTick_Config+0x40>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002386:	210f      	movs	r1, #15
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
 800238c:	f7ff ff8e 	bl	80022ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <SysTick_Config+0x40>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002396:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <SysTick_Config+0x40>)
 8002398:	2207      	movs	r2, #7
 800239a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	e000e010 	.word	0xe000e010

080023ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff29 	bl	800220c <__NVIC_SetPriorityGrouping>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d4:	f7ff ff3e 	bl	8002254 <__NVIC_GetPriorityGrouping>
 80023d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	6978      	ldr	r0, [r7, #20]
 80023e0:	f7ff ff8e 	bl	8002300 <NVIC_EncodePriority>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff5d 	bl	80022ac <__NVIC_SetPriority>
}
 80023f2:	bf00      	nop
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff31 	bl	8002270 <__NVIC_EnableIRQ>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ffa2 	bl	8002368 <SysTick_Config>
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800243c:	f7ff feb8 	bl	80021b0 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e099      	b.n	8002580 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0201 	bic.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800246c:	e00f      	b.n	800248e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800246e:	f7ff fe9f 	bl	80021b0 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b05      	cmp	r3, #5
 800247a:	d908      	bls.n	800248e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2220      	movs	r2, #32
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2203      	movs	r2, #3
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e078      	b.n	8002580 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e8      	bne.n	800246e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	4b38      	ldr	r3, [pc, #224]	; (8002588 <HAL_DMA_Init+0x158>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d107      	bne.n	80024f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	4313      	orrs	r3, r2
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f023 0307 	bic.w	r3, r3, #7
 800250e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	2b04      	cmp	r3, #4
 8002520:	d117      	bne.n	8002552 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00e      	beq.n	8002552 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fa91 	bl	8002a5c <DMA_CheckFifoParam>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2240      	movs	r2, #64	; 0x40
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800254e:	2301      	movs	r3, #1
 8002550:	e016      	b.n	8002580 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fa48 	bl	80029f0 <DMA_CalcBaseAndBitshift>
 8002560:	4603      	mov	r3, r0
 8002562:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	223f      	movs	r2, #63	; 0x3f
 800256a:	409a      	lsls	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	f010803f 	.word	0xf010803f

0800258c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_DMA_Start_IT+0x26>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e040      	b.n	8002634 <HAL_DMA_Start_IT+0xa8>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d12f      	bne.n	8002626 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2202      	movs	r2, #2
 80025ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f9da 	bl	8002994 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	223f      	movs	r2, #63	; 0x3f
 80025e6:	409a      	lsls	r2, r3
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0216 	orr.w	r2, r2, #22
 80025fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d007      	beq.n	8002614 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0208 	orr.w	r2, r2, #8
 8002612:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e005      	b.n	8002632 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800262e:	2302      	movs	r3, #2
 8002630:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002632:	7dfb      	ldrb	r3, [r7, #23]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d004      	beq.n	800265a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2280      	movs	r2, #128	; 0x80
 8002654:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e00c      	b.n	8002674 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2205      	movs	r2, #5
 800265e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0201 	bic.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800268c:	4b92      	ldr	r3, [pc, #584]	; (80028d8 <HAL_DMA_IRQHandler+0x258>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a92      	ldr	r2, [pc, #584]	; (80028dc <HAL_DMA_IRQHandler+0x25c>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	0a9b      	lsrs	r3, r3, #10
 8002698:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026aa:	2208      	movs	r2, #8
 80026ac:	409a      	lsls	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d01a      	beq.n	80026ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0204 	bic.w	r2, r2, #4
 80026d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	2208      	movs	r2, #8
 80026da:	409a      	lsls	r2, r3
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e4:	f043 0201 	orr.w	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	2201      	movs	r2, #1
 80026f2:	409a      	lsls	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d012      	beq.n	8002722 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270e:	2201      	movs	r2, #1
 8002710:	409a      	lsls	r2, r3
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	f043 0202 	orr.w	r2, r3, #2
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002726:	2204      	movs	r2, #4
 8002728:	409a      	lsls	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4013      	ands	r3, r2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d012      	beq.n	8002758 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00b      	beq.n	8002758 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	2204      	movs	r2, #4
 8002746:	409a      	lsls	r2, r3
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002750:	f043 0204 	orr.w	r2, r3, #4
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275c:	2210      	movs	r2, #16
 800275e:	409a      	lsls	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d043      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d03c      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	2210      	movs	r2, #16
 800277c:	409a      	lsls	r2, r3
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d018      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d108      	bne.n	80027b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d024      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	4798      	blx	r3
 80027ae:	e01f      	b.n	80027f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01b      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	4798      	blx	r3
 80027c0:	e016      	b.n	80027f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d107      	bne.n	80027e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0208 	bic.w	r2, r2, #8
 80027de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f4:	2220      	movs	r2, #32
 80027f6:	409a      	lsls	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 808e 	beq.w	800291e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 8086 	beq.w	800291e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002816:	2220      	movs	r2, #32
 8002818:	409a      	lsls	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b05      	cmp	r3, #5
 8002828:	d136      	bne.n	8002898 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0216 	bic.w	r2, r2, #22
 8002838:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002848:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <HAL_DMA_IRQHandler+0x1da>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0208 	bic.w	r2, r2, #8
 8002868:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	223f      	movs	r2, #63	; 0x3f
 8002870:	409a      	lsls	r2, r3
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288a:	2b00      	cmp	r3, #0
 800288c:	d07d      	beq.n	800298a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
        }
        return;
 8002896:	e078      	b.n	800298a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d01c      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d108      	bne.n	80028c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d030      	beq.n	800291e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4798      	blx	r3
 80028c4:	e02b      	b.n	800291e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d027      	beq.n	800291e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	4798      	blx	r3
 80028d6:	e022      	b.n	800291e <HAL_DMA_IRQHandler+0x29e>
 80028d8:	20000000 	.word	0x20000000
 80028dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10f      	bne.n	800290e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0210 	bic.w	r2, r2, #16
 80028fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	2b00      	cmp	r3, #0
 8002924:	d032      	beq.n	800298c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d022      	beq.n	8002978 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2205      	movs	r2, #5
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0201 	bic.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	3301      	adds	r3, #1
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	429a      	cmp	r2, r3
 8002954:	d307      	bcc.n	8002966 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f2      	bne.n	800294a <HAL_DMA_IRQHandler+0x2ca>
 8002964:	e000      	b.n	8002968 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002966:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	4798      	blx	r3
 8002988:	e000      	b.n	800298c <HAL_DMA_IRQHandler+0x30c>
        return;
 800298a:	bf00      	nop
    }
  }
}
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop

08002994 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b40      	cmp	r3, #64	; 0x40
 80029c0:	d108      	bne.n	80029d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029d2:	e007      	b.n	80029e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	60da      	str	r2, [r3, #12]
}
 80029e4:	bf00      	nop
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	3b10      	subs	r3, #16
 8002a00:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <DMA_CalcBaseAndBitshift+0x64>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	091b      	lsrs	r3, r3, #4
 8002a08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a0a:	4a13      	ldr	r2, [pc, #76]	; (8002a58 <DMA_CalcBaseAndBitshift+0x68>)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4413      	add	r3, r2
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d909      	bls.n	8002a32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a26:	f023 0303 	bic.w	r3, r3, #3
 8002a2a:	1d1a      	adds	r2, r3, #4
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	659a      	str	r2, [r3, #88]	; 0x58
 8002a30:	e007      	b.n	8002a42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a3a:	f023 0303 	bic.w	r3, r3, #3
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	aaaaaaab 	.word	0xaaaaaaab
 8002a58:	0800be70 	.word	0x0800be70

08002a5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d11f      	bne.n	8002ab6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d855      	bhi.n	8002b28 <DMA_CheckFifoParam+0xcc>
 8002a7c:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <DMA_CheckFifoParam+0x28>)
 8002a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a82:	bf00      	nop
 8002a84:	08002a95 	.word	0x08002a95
 8002a88:	08002aa7 	.word	0x08002aa7
 8002a8c:	08002a95 	.word	0x08002a95
 8002a90:	08002b29 	.word	0x08002b29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d045      	beq.n	8002b2c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa4:	e042      	b.n	8002b2c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aae:	d13f      	bne.n	8002b30 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab4:	e03c      	b.n	8002b30 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002abe:	d121      	bne.n	8002b04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d836      	bhi.n	8002b34 <DMA_CheckFifoParam+0xd8>
 8002ac6:	a201      	add	r2, pc, #4	; (adr r2, 8002acc <DMA_CheckFifoParam+0x70>)
 8002ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002acc:	08002add 	.word	0x08002add
 8002ad0:	08002ae3 	.word	0x08002ae3
 8002ad4:	08002add 	.word	0x08002add
 8002ad8:	08002af5 	.word	0x08002af5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae0:	e02f      	b.n	8002b42 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d024      	beq.n	8002b38 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af2:	e021      	b.n	8002b38 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002afc:	d11e      	bne.n	8002b3c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b02:	e01b      	b.n	8002b3c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d902      	bls.n	8002b10 <DMA_CheckFifoParam+0xb4>
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d003      	beq.n	8002b16 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b0e:	e018      	b.n	8002b42 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
      break;
 8002b14:	e015      	b.n	8002b42 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00e      	beq.n	8002b40 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
      break;
 8002b26:	e00b      	b.n	8002b40 <DMA_CheckFifoParam+0xe4>
      break;
 8002b28:	bf00      	nop
 8002b2a:	e00a      	b.n	8002b42 <DMA_CheckFifoParam+0xe6>
      break;
 8002b2c:	bf00      	nop
 8002b2e:	e008      	b.n	8002b42 <DMA_CheckFifoParam+0xe6>
      break;
 8002b30:	bf00      	nop
 8002b32:	e006      	b.n	8002b42 <DMA_CheckFifoParam+0xe6>
      break;
 8002b34:	bf00      	nop
 8002b36:	e004      	b.n	8002b42 <DMA_CheckFifoParam+0xe6>
      break;
 8002b38:	bf00      	nop
 8002b3a:	e002      	b.n	8002b42 <DMA_CheckFifoParam+0xe6>
      break;   
 8002b3c:	bf00      	nop
 8002b3e:	e000      	b.n	8002b42 <DMA_CheckFifoParam+0xe6>
      break;
 8002b40:	bf00      	nop
    }
  } 
  
  return status; 
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	; 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	e16b      	b.n	8002e44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	f040 815a 	bne.w	8002e3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d00b      	beq.n	8002baa <HAL_GPIO_Init+0x5a>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d007      	beq.n	8002baa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b9e:	2b11      	cmp	r3, #17
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b12      	cmp	r3, #18
 8002ba8:	d130      	bne.n	8002c0c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002be0:	2201      	movs	r2, #1
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f003 0201 	and.w	r2, r3, #1
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	2203      	movs	r2, #3
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d003      	beq.n	8002c4c <HAL_GPIO_Init+0xfc>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b12      	cmp	r3, #18
 8002c4a:	d123      	bne.n	8002c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	08da      	lsrs	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3208      	adds	r2, #8
 8002c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	220f      	movs	r2, #15
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	08da      	lsrs	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3208      	adds	r2, #8
 8002c8e:	69b9      	ldr	r1, [r7, #24]
 8002c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0203 	and.w	r2, r3, #3
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80b4 	beq.w	8002e3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	4b5f      	ldr	r3, [pc, #380]	; (8002e58 <HAL_GPIO_Init+0x308>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	4a5e      	ldr	r2, [pc, #376]	; (8002e58 <HAL_GPIO_Init+0x308>)
 8002ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce6:	4b5c      	ldr	r3, [pc, #368]	; (8002e58 <HAL_GPIO_Init+0x308>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cf2:	4a5a      	ldr	r2, [pc, #360]	; (8002e5c <HAL_GPIO_Init+0x30c>)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	220f      	movs	r2, #15
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a51      	ldr	r2, [pc, #324]	; (8002e60 <HAL_GPIO_Init+0x310>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d02b      	beq.n	8002d76 <HAL_GPIO_Init+0x226>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a50      	ldr	r2, [pc, #320]	; (8002e64 <HAL_GPIO_Init+0x314>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d025      	beq.n	8002d72 <HAL_GPIO_Init+0x222>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a4f      	ldr	r2, [pc, #316]	; (8002e68 <HAL_GPIO_Init+0x318>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01f      	beq.n	8002d6e <HAL_GPIO_Init+0x21e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4e      	ldr	r2, [pc, #312]	; (8002e6c <HAL_GPIO_Init+0x31c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d019      	beq.n	8002d6a <HAL_GPIO_Init+0x21a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a4d      	ldr	r2, [pc, #308]	; (8002e70 <HAL_GPIO_Init+0x320>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_GPIO_Init+0x216>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a4c      	ldr	r2, [pc, #304]	; (8002e74 <HAL_GPIO_Init+0x324>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00d      	beq.n	8002d62 <HAL_GPIO_Init+0x212>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a4b      	ldr	r2, [pc, #300]	; (8002e78 <HAL_GPIO_Init+0x328>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <HAL_GPIO_Init+0x20e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4a      	ldr	r2, [pc, #296]	; (8002e7c <HAL_GPIO_Init+0x32c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d101      	bne.n	8002d5a <HAL_GPIO_Init+0x20a>
 8002d56:	2307      	movs	r3, #7
 8002d58:	e00e      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	e00c      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d5e:	2306      	movs	r3, #6
 8002d60:	e00a      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d62:	2305      	movs	r3, #5
 8002d64:	e008      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d66:	2304      	movs	r3, #4
 8002d68:	e006      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e004      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e002      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d76:	2300      	movs	r3, #0
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	f002 0203 	and.w	r2, r2, #3
 8002d7e:	0092      	lsls	r2, r2, #2
 8002d80:	4093      	lsls	r3, r2
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d88:	4934      	ldr	r1, [pc, #208]	; (8002e5c <HAL_GPIO_Init+0x30c>)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	3302      	adds	r3, #2
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d96:	4b3a      	ldr	r3, [pc, #232]	; (8002e80 <HAL_GPIO_Init+0x330>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dba:	4a31      	ldr	r2, [pc, #196]	; (8002e80 <HAL_GPIO_Init+0x330>)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dc0:	4b2f      	ldr	r3, [pc, #188]	; (8002e80 <HAL_GPIO_Init+0x330>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002de4:	4a26      	ldr	r2, [pc, #152]	; (8002e80 <HAL_GPIO_Init+0x330>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dea:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <HAL_GPIO_Init+0x330>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e0e:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <HAL_GPIO_Init+0x330>)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e14:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <HAL_GPIO_Init+0x330>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e38:	4a11      	ldr	r2, [pc, #68]	; (8002e80 <HAL_GPIO_Init+0x330>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3301      	adds	r3, #1
 8002e42:	61fb      	str	r3, [r7, #28]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	2b0f      	cmp	r3, #15
 8002e48:	f67f ae90 	bls.w	8002b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	3724      	adds	r7, #36	; 0x24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40013800 	.word	0x40013800
 8002e60:	40020000 	.word	0x40020000
 8002e64:	40020400 	.word	0x40020400
 8002e68:	40020800 	.word	0x40020800
 8002e6c:	40020c00 	.word	0x40020c00
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40021400 	.word	0x40021400
 8002e78:	40021800 	.word	0x40021800
 8002e7c:	40021c00 	.word	0x40021c00
 8002e80:	40013c00 	.word	0x40013c00

08002e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
 8002e90:	4613      	mov	r3, r2
 8002e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e94:	787b      	ldrb	r3, [r7, #1]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e9a:	887a      	ldrh	r2, [r7, #2]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ea0:	e003      	b.n	8002eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ea2:	887b      	ldrh	r3, [r7, #2]
 8002ea4:	041a      	lsls	r2, r3, #16
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	619a      	str	r2, [r3, #24]
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ec2:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d006      	beq.n	8002edc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ece:	4a05      	ldr	r2, [pc, #20]	; (8002ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fb16 	bl	8001508 <HAL_GPIO_EXTI_Callback>
  }
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40013c00 	.word	0x40013c00

08002ee8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eea:	b08f      	sub	sp, #60	; 0x3c
 8002eec:	af0a      	add	r7, sp, #40	; 0x28
 8002eee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e10f      	b.n	800311a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d106      	bne.n	8002f1a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f006 fbf1 	bl	80096fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d102      	bne.n	8002f34 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f003 fbbe 	bl	80066ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	687e      	ldr	r6, [r7, #4]
 8002f46:	466d      	mov	r5, sp
 8002f48:	f106 0410 	add.w	r4, r6, #16
 8002f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f58:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f5c:	1d33      	adds	r3, r6, #4
 8002f5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f60:	6838      	ldr	r0, [r7, #0]
 8002f62:	f003 fa95 	bl	8006490 <USB_CoreInit>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0d0      	b.n	800311a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f003 fbac 	bl	80066dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	e04a      	b.n	8003020 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f8a:	7bfa      	ldrb	r2, [r7, #15]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	333d      	adds	r3, #61	; 0x3d
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	333c      	adds	r3, #60	; 0x3c
 8002fae:	7bfa      	ldrb	r2, [r7, #15]
 8002fb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	b298      	uxth	r0, r3
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3342      	adds	r3, #66	; 0x42
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fca:	7bfa      	ldrb	r2, [r7, #15]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	333f      	adds	r3, #63	; 0x3f
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fde:	7bfa      	ldrb	r2, [r7, #15]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	3344      	adds	r3, #68	; 0x44
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ff2:	7bfa      	ldrb	r2, [r7, #15]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	3348      	adds	r3, #72	; 0x48
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	3350      	adds	r3, #80	; 0x50
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	3301      	adds	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	429a      	cmp	r2, r3
 8003028:	d3af      	bcc.n	8002f8a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800302a:	2300      	movs	r3, #0
 800302c:	73fb      	strb	r3, [r7, #15]
 800302e:	e044      	b.n	80030ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003046:	7bfa      	ldrb	r2, [r7, #15]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003058:	7bfa      	ldrb	r2, [r7, #15]
 800305a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800305c:	7bfa      	ldrb	r2, [r7, #15]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	3301      	adds	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d3b5      	bcc.n	8003030 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	603b      	str	r3, [r7, #0]
 80030ca:	687e      	ldr	r6, [r7, #4]
 80030cc:	466d      	mov	r5, sp
 80030ce:	f106 0410 	add.w	r4, r6, #16
 80030d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030de:	e885 0003 	stmia.w	r5, {r0, r1}
 80030e2:	1d33      	adds	r3, r6, #4
 80030e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e6:	6838      	ldr	r0, [r7, #0]
 80030e8:	f003 fb22 	bl	8006730 <USB_DevInit>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00d      	b.n	800311a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f004 fb6a 	bl	80077ec <USB_DevDisconnect>

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003122 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_PCD_Start+0x1c>
 800313a:	2302      	movs	r3, #2
 800313c:	e020      	b.n	8003180 <HAL_PCD_Start+0x5e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	2b01      	cmp	r3, #1
 800314c:	d109      	bne.n	8003162 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003152:	2b01      	cmp	r3, #1
 8003154:	d005      	beq.n	8003162 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f003 fa96 	bl	8006698 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f004 fb1a 	bl	80077aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b08d      	sub	sp, #52	; 0x34
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f004 fbd8 	bl	8007954 <USB_GetMode>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f040 839d 	bne.w	80038e6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f004 fb3c 	bl	800782e <USB_ReadInterrupts>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 8393 	beq.w	80038e4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f004 fb33 	bl	800782e <USB_ReadInterrupts>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d107      	bne.n	80031e2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f002 0202 	and.w	r2, r2, #2
 80031e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f004 fb21 	bl	800782e <USB_ReadInterrupts>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d161      	bne.n	80032ba <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0210 	bic.w	r2, r2, #16
 8003204:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	f003 020f 	and.w	r2, r3, #15
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	3304      	adds	r3, #4
 8003224:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	0c5b      	lsrs	r3, r3, #17
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	2b02      	cmp	r3, #2
 8003230:	d124      	bne.n	800327c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d035      	beq.n	80032aa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003248:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800324c:	b29b      	uxth	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	6a38      	ldr	r0, [r7, #32]
 8003252:	f004 f987 	bl	8007564 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003262:	441a      	add	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003274:	441a      	add	r2, r3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	619a      	str	r2, [r3, #24]
 800327a:	e016      	b.n	80032aa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	0c5b      	lsrs	r3, r3, #17
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	2b06      	cmp	r3, #6
 8003286:	d110      	bne.n	80032aa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800328e:	2208      	movs	r2, #8
 8003290:	4619      	mov	r1, r3
 8003292:	6a38      	ldr	r0, [r7, #32]
 8003294:	f004 f966 	bl	8007564 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	699a      	ldr	r2, [r3, #24]
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032a4:	441a      	add	r2, r3
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699a      	ldr	r2, [r3, #24]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0210 	orr.w	r2, r2, #16
 80032b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f004 fab5 	bl	800782e <USB_ReadInterrupts>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032ce:	d16e      	bne.n	80033ae <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f004 fabb 	bl	8007854 <USB_ReadDevAllOutEpInterrupt>
 80032de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80032e0:	e062      	b.n	80033a8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d057      	beq.n	800339c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f004 fae0 	bl	80078bc <USB_ReadDevOutEPInterrupt>
 80032fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00c      	beq.n	8003322 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003314:	461a      	mov	r2, r3
 8003316:	2301      	movs	r3, #1
 8003318:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800331a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 fdb1 	bl	8003e84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00c      	beq.n	8003346 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003338:	461a      	mov	r2, r3
 800333a:	2308      	movs	r3, #8
 800333c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800333e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 feab 	bl	800409c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335c:	461a      	mov	r2, r3
 800335e:	2310      	movs	r3, #16
 8003360:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003378:	461a      	mov	r2, r3
 800337a:	2320      	movs	r3, #32
 800337c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d009      	beq.n	800339c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	4413      	add	r3, r2
 8003390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003394:	461a      	mov	r2, r3
 8003396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800339a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	3301      	adds	r3, #1
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d199      	bne.n	80032e2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f004 fa3b 	bl	800782e <USB_ReadInterrupts>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033c2:	f040 80c0 	bne.w	8003546 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f004 fa5c 	bl	8007888 <USB_ReadDevAllInEpInterrupt>
 80033d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80033d6:	e0b2      	b.n	800353e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80033d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80a7 	beq.w	8003532 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f004 fa82 	bl	80078f8 <USB_ReadDevInEPInterrupt>
 80033f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d057      	beq.n	80034b0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	2201      	movs	r2, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	43db      	mvns	r3, r3
 800341a:	69f9      	ldr	r1, [r7, #28]
 800341c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003420:	4013      	ands	r3, r2
 8003422:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003430:	461a      	mov	r2, r3
 8003432:	2301      	movs	r3, #1
 8003434:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d132      	bne.n	80034a4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3348      	adds	r3, #72	; 0x48
 800344e:	6819      	ldr	r1, [r3, #0]
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4403      	add	r3, r0
 800345e:	3344      	adds	r3, #68	; 0x44
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4419      	add	r1, r3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4403      	add	r3, r0
 8003472:	3348      	adds	r3, #72	; 0x48
 8003474:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	2b00      	cmp	r3, #0
 800347a:	d113      	bne.n	80034a4 <HAL_PCD_IRQHandler+0x31c>
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	3350      	adds	r3, #80	; 0x50
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d108      	bne.n	80034a4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800349c:	461a      	mov	r2, r3
 800349e:	2101      	movs	r1, #1
 80034a0:	f004 fa8a 	bl	80079b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f006 f9a7 	bl	80097fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c6:	461a      	mov	r2, r3
 80034c8:	2308      	movs	r3, #8
 80034ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e2:	461a      	mov	r2, r3
 80034e4:	2310      	movs	r3, #16
 80034e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034fe:	461a      	mov	r2, r3
 8003500:	2340      	movs	r3, #64	; 0x40
 8003502:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800351a:	461a      	mov	r2, r3
 800351c:	2302      	movs	r3, #2
 800351e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800352a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fc1b 	bl	8003d68 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	3301      	adds	r3, #1
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	085b      	lsrs	r3, r3, #1
 800353c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	2b00      	cmp	r3, #0
 8003542:	f47f af49 	bne.w	80033d8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f004 f96f 	bl	800782e <USB_ReadInterrupts>
 8003550:	4603      	mov	r3, r0
 8003552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800355a:	d122      	bne.n	80035a2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003576:	2b01      	cmp	r3, #1
 8003578:	d108      	bne.n	800358c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003582:	2100      	movs	r1, #0
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fe27 	bl	80041d8 <HAL_PCDEx_LPM_Callback>
 800358a:	e002      	b.n	8003592 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f006 f9ad 	bl	80098ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80035a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f004 f941 	bl	800782e <USB_ReadInterrupts>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b6:	d112      	bne.n	80035de <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d102      	bne.n	80035ce <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f006 f969 	bl	80098a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80035dc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f004 f923 	bl	800782e <USB_ReadInterrupts>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f2:	f040 80c7 	bne.w	8003784 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2110      	movs	r1, #16
 8003610:	4618      	mov	r0, r3
 8003612:	f003 f9f1 	bl	80069f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003616:	2300      	movs	r3, #0
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800361a:	e056      	b.n	80036ca <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003628:	461a      	mov	r2, r3
 800362a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800362e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003640:	0151      	lsls	r1, r2, #5
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	440a      	add	r2, r1
 8003646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800364a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800364e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003660:	0151      	lsls	r1, r2, #5
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	440a      	add	r2, r1
 8003666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800366a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800366e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	4413      	add	r3, r2
 8003678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800367c:	461a      	mov	r2, r3
 800367e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003682:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003694:	0151      	lsls	r1, r2, #5
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	440a      	add	r2, r1
 800369a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800369e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b4:	0151      	lsls	r1, r2, #5
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	440a      	add	r2, r1
 80036ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	3301      	adds	r3, #1
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d3a3      	bcc.n	800361c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d016      	beq.n	800371e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003700:	f043 030b 	orr.w	r3, r3, #11
 8003704:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003716:	f043 030b 	orr.w	r3, r3, #11
 800371a:	6453      	str	r3, [r2, #68]	; 0x44
 800371c:	e015      	b.n	800374a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800372c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003730:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003734:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003744:	f043 030b 	orr.w	r3, r3, #11
 8003748:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003758:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800375c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800376e:	461a      	mov	r2, r3
 8003770:	f004 f922 	bl	80079b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003782:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f004 f850 	bl	800782e <USB_ReadInterrupts>
 800378e:	4603      	mov	r3, r0
 8003790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003798:	d124      	bne.n	80037e4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f004 f8e6 	bl	8007970 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f003 f986 	bl	8006aba <USB_GetDevSpeed>
 80037ae:	4603      	mov	r3, r0
 80037b0:	461a      	mov	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681c      	ldr	r4, [r3, #0]
 80037ba:	f001 f945 	bl	8004a48 <HAL_RCC_GetHCLKFreq>
 80037be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	4620      	mov	r0, r4
 80037ca:	f002 fec3 	bl	8006554 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f006 f83d 	bl	800984e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80037e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f004 f820 	bl	800782e <USB_ReadInterrupts>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d10a      	bne.n	800380e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f006 f81a 	bl	8009832 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f002 0208 	and.w	r2, r2, #8
 800380c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f004 f80b 	bl	800782e <USB_ReadInterrupts>
 8003818:	4603      	mov	r3, r0
 800381a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800381e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003822:	d10f      	bne.n	8003844 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	b2db      	uxtb	r3, r3
 800382c:	4619      	mov	r1, r3
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f006 f87c 	bl	800992c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003842:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f003 fff0 	bl	800782e <USB_ReadInterrupts>
 800384e:	4603      	mov	r3, r0
 8003850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003854:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003858:	d10f      	bne.n	800387a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	b2db      	uxtb	r3, r3
 8003862:	4619      	mov	r1, r3
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f006 f84f 	bl	8009908 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f003 ffd5 	bl	800782e <USB_ReadInterrupts>
 8003884:	4603      	mov	r3, r0
 8003886:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800388a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388e:	d10a      	bne.n	80038a6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f006 f85d 	bl	8009950 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80038a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f003 ffbf 	bl	800782e <USB_ReadInterrupts>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d115      	bne.n	80038e6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f006 f84d 	bl	800996c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	e000      	b.n	80038e6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80038e4:	bf00      	nop
    }
  }
}
 80038e6:	3734      	adds	r7, #52	; 0x34
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd90      	pop	{r4, r7, pc}

080038ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_PCD_SetAddress+0x1a>
 8003902:	2302      	movs	r3, #2
 8003904:	e013      	b.n	800392e <HAL_PCD_SetAddress+0x42>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f003 ff1d 	bl	800775e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	4608      	mov	r0, r1
 8003940:	4611      	mov	r1, r2
 8003942:	461a      	mov	r2, r3
 8003944:	4603      	mov	r3, r0
 8003946:	70fb      	strb	r3, [r7, #3]
 8003948:	460b      	mov	r3, r1
 800394a:	803b      	strh	r3, [r7, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003954:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003958:	2b00      	cmp	r3, #0
 800395a:	da0f      	bge.n	800397c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	f003 020f 	and.w	r2, r3, #15
 8003962:	4613      	mov	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	3338      	adds	r3, #56	; 0x38
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4413      	add	r3, r2
 8003970:	3304      	adds	r3, #4
 8003972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2201      	movs	r2, #1
 8003978:	705a      	strb	r2, [r3, #1]
 800397a:	e00f      	b.n	800399c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	f003 020f 	and.w	r2, r3, #15
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	4413      	add	r3, r2
 8003992:	3304      	adds	r3, #4
 8003994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039a8:	883a      	ldrh	r2, [r7, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	78ba      	ldrb	r2, [r7, #2]
 80039b2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d004      	beq.n	80039c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039c6:	78bb      	ldrb	r3, [r7, #2]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d102      	bne.n	80039d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_PCD_EP_Open+0xaa>
 80039dc:	2302      	movs	r3, #2
 80039de:	e00e      	b.n	80039fe <HAL_PCD_EP_Open+0xc8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68f9      	ldr	r1, [r7, #12]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f003 f888 	bl	8006b04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80039fc:	7afb      	ldrb	r3, [r7, #11]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	da0f      	bge.n	8003a3a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	f003 020f 	and.w	r2, r3, #15
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	3338      	adds	r3, #56	; 0x38
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3304      	adds	r3, #4
 8003a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	705a      	strb	r2, [r3, #1]
 8003a38:	e00f      	b.n	8003a5a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	f003 020f 	and.w	r2, r3, #15
 8003a40:	4613      	mov	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	4413      	add	r3, r2
 8003a50:	3304      	adds	r3, #4
 8003a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_PCD_EP_Close+0x6e>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e00e      	b.n	8003a92 <HAL_PCD_EP_Close+0x8c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68f9      	ldr	r1, [r7, #12]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f003 f8c6 	bl	8006c14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b086      	sub	sp, #24
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aaa:	7afb      	ldrb	r3, [r7, #11]
 8003aac:	f003 020f 	and.w	r2, r3, #15
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003adc:	7afb      	ldrb	r3, [r7, #11]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d102      	bne.n	8003af6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003af6:	7afb      	ldrb	r3, [r7, #11]
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	6979      	ldr	r1, [r7, #20]
 8003b0e:	f003 fba1 	bl	8007254 <USB_EP0StartXfer>
 8003b12:	e008      	b.n	8003b26 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	6979      	ldr	r1, [r7, #20]
 8003b22:	f003 f953 	bl	8006dcc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	f003 020f 	and.w	r2, r3, #15
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b52:	681b      	ldr	r3, [r3, #0]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	607a      	str	r2, [r7, #4]
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b70:	7afb      	ldrb	r3, [r7, #11]
 8003b72:	f003 020f 	and.w	r2, r3, #15
 8003b76:	4613      	mov	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	3338      	adds	r3, #56	; 0x38
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4413      	add	r3, r2
 8003b84:	3304      	adds	r3, #4
 8003b86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2200      	movs	r2, #0
 8003b98:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ba0:	7afb      	ldrb	r3, [r7, #11]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d102      	bne.n	8003bba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bba:	7afb      	ldrb	r3, [r7, #11]
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	6979      	ldr	r1, [r7, #20]
 8003bd2:	f003 fb3f 	bl	8007254 <USB_EP0StartXfer>
 8003bd6:	e008      	b.n	8003bea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6818      	ldr	r0, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	6979      	ldr	r1, [r7, #20]
 8003be6:	f003 f8f1 	bl	8006dcc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	f003 020f 	and.w	r2, r3, #15
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d901      	bls.n	8003c12 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e050      	b.n	8003cb4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	da0f      	bge.n	8003c3a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	f003 020f 	and.w	r2, r3, #15
 8003c20:	4613      	mov	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	3338      	adds	r3, #56	; 0x38
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3304      	adds	r3, #4
 8003c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	705a      	strb	r2, [r3, #1]
 8003c38:	e00d      	b.n	8003c56 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_PCD_EP_SetStall+0x82>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e01e      	b.n	8003cb4 <HAL_PCD_EP_SetStall+0xc0>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68f9      	ldr	r1, [r7, #12]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f003 fc96 	bl	80075b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6818      	ldr	r0, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	b2d9      	uxtb	r1, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f003 fe87 	bl	80079b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	f003 020f 	and.w	r2, r3, #15
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d901      	bls.n	8003cda <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e042      	b.n	8003d60 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	da0f      	bge.n	8003d02 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	f003 020f 	and.w	r2, r3, #15
 8003ce8:	4613      	mov	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	3338      	adds	r3, #56	; 0x38
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	705a      	strb	r2, [r3, #1]
 8003d00:	e00f      	b.n	8003d22 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d02:	78fb      	ldrb	r3, [r7, #3]
 8003d04:	f003 020f 	and.w	r2, r3, #15
 8003d08:	4613      	mov	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	4413      	add	r3, r2
 8003d18:	3304      	adds	r3, #4
 8003d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_PCD_EP_ClrStall+0x86>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e00e      	b.n	8003d60 <HAL_PCD_EP_ClrStall+0xa4>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68f9      	ldr	r1, [r7, #12]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f003 fc9e 	bl	8007692 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08a      	sub	sp, #40	; 0x28
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	3338      	adds	r3, #56	; 0x38
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	699a      	ldr	r2, [r3, #24]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d901      	bls.n	8003da0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e06c      	b.n	8003e7a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	695a      	ldr	r2, [r3, #20]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d902      	bls.n	8003dbc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	3303      	adds	r3, #3
 8003dc0:	089b      	lsrs	r3, r3, #2
 8003dc2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dc4:	e02b      	b.n	8003e1e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d902      	bls.n	8003de2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3303      	adds	r3, #3
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	68d9      	ldr	r1, [r3, #12]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	4603      	mov	r3, r0
 8003e00:	6978      	ldr	r0, [r7, #20]
 8003e02:	f003 fb7a 	bl	80074fa <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	441a      	add	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	441a      	add	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d809      	bhi.n	8003e48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	699a      	ldr	r2, [r3, #24]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d203      	bcs.n	8003e48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1be      	bne.n	8003dc6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d811      	bhi.n	8003e78 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	6939      	ldr	r1, [r7, #16]
 8003e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e74:	4013      	ands	r3, r2
 8003e76:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	333c      	adds	r3, #60	; 0x3c
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	f040 80a0 	bne.w	8003ffc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d015      	beq.n	8003ef2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4a72      	ldr	r2, [pc, #456]	; (8004094 <PCD_EP_OutXfrComplete_int+0x210>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	f240 80dd 	bls.w	800408a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 80d7 	beq.w	800408a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eee:	6093      	str	r3, [r2, #8]
 8003ef0:	e0cb      	b.n	800408a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d009      	beq.n	8003f10 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f08:	461a      	mov	r2, r3
 8003f0a:	2320      	movs	r3, #32
 8003f0c:	6093      	str	r3, [r2, #8]
 8003f0e:	e0bc      	b.n	800408a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f040 80b7 	bne.w	800408a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4a5d      	ldr	r2, [pc, #372]	; (8004094 <PCD_EP_OutXfrComplete_int+0x210>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d90f      	bls.n	8003f44 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f40:	6093      	str	r3, [r2, #8]
 8003f42:	e0a2      	b.n	800408a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f56:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	0159      	lsls	r1, r3, #5
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	440b      	add	r3, r1
 8003f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003f6a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4403      	add	r3, r0
 8003f7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003f7e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	1a9b      	subs	r3, r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f92:	6819      	ldr	r1, [r3, #0]
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4403      	add	r3, r0
 8003fa2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4419      	add	r1, r3
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	1a9b      	subs	r3, r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4403      	add	r3, r0
 8003fb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fbc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d114      	bne.n	8003fee <PCD_EP_OutXfrComplete_int+0x16a>
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d108      	bne.n	8003fee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2101      	movs	r1, #1
 8003fea:	f003 fce5 	bl	80079b8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f005 fbe7 	bl	80097c8 <HAL_PCD_DataOutStageCallback>
 8003ffa:	e046      	b.n	800408a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4a26      	ldr	r2, [pc, #152]	; (8004098 <PCD_EP_OutXfrComplete_int+0x214>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d124      	bne.n	800404e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401a:	461a      	mov	r2, r3
 800401c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004020:	6093      	str	r3, [r2, #8]
 8004022:	e032      	b.n	800408a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d008      	beq.n	8004040 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403a:	461a      	mov	r2, r3
 800403c:	2320      	movs	r3, #32
 800403e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	b2db      	uxtb	r3, r3
 8004044:	4619      	mov	r1, r3
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f005 fbbe 	bl	80097c8 <HAL_PCD_DataOutStageCallback>
 800404c:	e01d      	b.n	800408a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d114      	bne.n	800407e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d108      	bne.n	800407e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6818      	ldr	r0, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004076:	461a      	mov	r2, r3
 8004078:	2100      	movs	r1, #0
 800407a:	f003 fc9d 	bl	80079b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f005 fb9f 	bl	80097c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	4f54300a 	.word	0x4f54300a
 8004098:	4f54310a 	.word	0x4f54310a

0800409c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	333c      	adds	r3, #60	; 0x3c
 80040b4:	3304      	adds	r3, #4
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4a15      	ldr	r2, [pc, #84]	; (8004124 <PCD_EP_OutSetupPacket_int+0x88>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d90e      	bls.n	80040f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d009      	beq.n	80040f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e8:	461a      	mov	r2, r3
 80040ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f005 fb57 	bl	80097a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4a0a      	ldr	r2, [pc, #40]	; (8004124 <PCD_EP_OutSetupPacket_int+0x88>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d90c      	bls.n	8004118 <PCD_EP_OutSetupPacket_int+0x7c>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d108      	bne.n	8004118 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004110:	461a      	mov	r2, r3
 8004112:	2101      	movs	r1, #1
 8004114:	f003 fc50 	bl	80079b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	4f54300a 	.word	0x4f54300a

08004128 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	70fb      	strb	r3, [r7, #3]
 8004134:	4613      	mov	r3, r2
 8004136:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d107      	bne.n	8004156 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004146:	883b      	ldrh	r3, [r7, #0]
 8004148:	0419      	lsls	r1, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	430a      	orrs	r2, r1
 8004152:	629a      	str	r2, [r3, #40]	; 0x28
 8004154:	e028      	b.n	80041a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	0c1b      	lsrs	r3, r3, #16
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	4413      	add	r3, r2
 8004162:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004164:	2300      	movs	r3, #0
 8004166:	73fb      	strb	r3, [r7, #15]
 8004168:	e00d      	b.n	8004186 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	3340      	adds	r3, #64	; 0x40
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	0c1b      	lsrs	r3, r3, #16
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	4413      	add	r3, r2
 800417e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	3301      	adds	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
 8004186:	7bfa      	ldrb	r2, [r7, #15]
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	3b01      	subs	r3, #1
 800418c:	429a      	cmp	r2, r3
 800418e:	d3ec      	bcc.n	800416a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004190:	883b      	ldrh	r3, [r7, #0]
 8004192:	0418      	lsls	r0, r3, #16
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6819      	ldr	r1, [r3, #0]
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	3b01      	subs	r3, #1
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	4302      	orrs	r2, r0
 80041a0:	3340      	adds	r3, #64	; 0x40
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	887a      	ldrh	r2, [r7, #2]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e25b      	b.n	80046ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d075      	beq.n	80042fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800420e:	4ba3      	ldr	r3, [pc, #652]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	2b04      	cmp	r3, #4
 8004218:	d00c      	beq.n	8004234 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800421a:	4ba0      	ldr	r3, [pc, #640]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004222:	2b08      	cmp	r3, #8
 8004224:	d112      	bne.n	800424c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004226:	4b9d      	ldr	r3, [pc, #628]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004232:	d10b      	bne.n	800424c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004234:	4b99      	ldr	r3, [pc, #612]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d05b      	beq.n	80042f8 <HAL_RCC_OscConfig+0x108>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d157      	bne.n	80042f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e236      	b.n	80046ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004254:	d106      	bne.n	8004264 <HAL_RCC_OscConfig+0x74>
 8004256:	4b91      	ldr	r3, [pc, #580]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a90      	ldr	r2, [pc, #576]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e01d      	b.n	80042a0 <HAL_RCC_OscConfig+0xb0>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800426c:	d10c      	bne.n	8004288 <HAL_RCC_OscConfig+0x98>
 800426e:	4b8b      	ldr	r3, [pc, #556]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a8a      	ldr	r2, [pc, #552]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	4b88      	ldr	r3, [pc, #544]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a87      	ldr	r2, [pc, #540]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	e00b      	b.n	80042a0 <HAL_RCC_OscConfig+0xb0>
 8004288:	4b84      	ldr	r3, [pc, #528]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a83      	ldr	r2, [pc, #524]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 800428e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	4b81      	ldr	r3, [pc, #516]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a80      	ldr	r2, [pc, #512]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 800429a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800429e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d013      	beq.n	80042d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a8:	f7fd ff82 	bl	80021b0 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b0:	f7fd ff7e 	bl	80021b0 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b64      	cmp	r3, #100	; 0x64
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e1fb      	b.n	80046ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c2:	4b76      	ldr	r3, [pc, #472]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0f0      	beq.n	80042b0 <HAL_RCC_OscConfig+0xc0>
 80042ce:	e014      	b.n	80042fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d0:	f7fd ff6e 	bl	80021b0 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042d8:	f7fd ff6a 	bl	80021b0 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	; 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e1e7      	b.n	80046ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ea:	4b6c      	ldr	r3, [pc, #432]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0xe8>
 80042f6:	e000      	b.n	80042fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d063      	beq.n	80043ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004306:	4b65      	ldr	r3, [pc, #404]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00b      	beq.n	800432a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004312:	4b62      	ldr	r3, [pc, #392]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800431a:	2b08      	cmp	r3, #8
 800431c:	d11c      	bne.n	8004358 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800431e:	4b5f      	ldr	r3, [pc, #380]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d116      	bne.n	8004358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432a:	4b5c      	ldr	r3, [pc, #368]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <HAL_RCC_OscConfig+0x152>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d001      	beq.n	8004342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e1bb      	b.n	80046ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004342:	4b56      	ldr	r3, [pc, #344]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	4952      	ldr	r1, [pc, #328]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004356:	e03a      	b.n	80043ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d020      	beq.n	80043a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004360:	4b4f      	ldr	r3, [pc, #316]	; (80044a0 <HAL_RCC_OscConfig+0x2b0>)
 8004362:	2201      	movs	r2, #1
 8004364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004366:	f7fd ff23 	bl	80021b0 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800436e:	f7fd ff1f 	bl	80021b0 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e19c      	b.n	80046ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004380:	4b46      	ldr	r3, [pc, #280]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0f0      	beq.n	800436e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438c:	4b43      	ldr	r3, [pc, #268]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4940      	ldr	r1, [pc, #256]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 800439c:	4313      	orrs	r3, r2
 800439e:	600b      	str	r3, [r1, #0]
 80043a0:	e015      	b.n	80043ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043a2:	4b3f      	ldr	r3, [pc, #252]	; (80044a0 <HAL_RCC_OscConfig+0x2b0>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fd ff02 	bl	80021b0 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043b0:	f7fd fefe 	bl	80021b0 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e17b      	b.n	80046ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c2:	4b36      	ldr	r3, [pc, #216]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d030      	beq.n	800443c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d016      	beq.n	8004410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043e2:	4b30      	ldr	r3, [pc, #192]	; (80044a4 <HAL_RCC_OscConfig+0x2b4>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e8:	f7fd fee2 	bl	80021b0 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f0:	f7fd fede 	bl	80021b0 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e15b      	b.n	80046ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004402:	4b26      	ldr	r3, [pc, #152]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0x200>
 800440e:	e015      	b.n	800443c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004410:	4b24      	ldr	r3, [pc, #144]	; (80044a4 <HAL_RCC_OscConfig+0x2b4>)
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004416:	f7fd fecb 	bl	80021b0 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800441e:	f7fd fec7 	bl	80021b0 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e144      	b.n	80046ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004430:	4b1a      	ldr	r3, [pc, #104]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f0      	bne.n	800441e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80a0 	beq.w	800458a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444a:	2300      	movs	r3, #0
 800444c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444e:	4b13      	ldr	r3, [pc, #76]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10f      	bne.n	800447a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	4b0f      	ldr	r3, [pc, #60]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	4a0e      	ldr	r2, [pc, #56]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 8004464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004468:	6413      	str	r3, [r2, #64]	; 0x40
 800446a:	4b0c      	ldr	r3, [pc, #48]	; (800449c <HAL_RCC_OscConfig+0x2ac>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004476:	2301      	movs	r3, #1
 8004478:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <HAL_RCC_OscConfig+0x2b8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d121      	bne.n	80044ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <HAL_RCC_OscConfig+0x2b8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a07      	ldr	r2, [pc, #28]	; (80044a8 <HAL_RCC_OscConfig+0x2b8>)
 800448c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004492:	f7fd fe8d 	bl	80021b0 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004498:	e011      	b.n	80044be <HAL_RCC_OscConfig+0x2ce>
 800449a:	bf00      	nop
 800449c:	40023800 	.word	0x40023800
 80044a0:	42470000 	.word	0x42470000
 80044a4:	42470e80 	.word	0x42470e80
 80044a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ac:	f7fd fe80 	bl	80021b0 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e0fd      	b.n	80046ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044be:	4b81      	ldr	r3, [pc, #516]	; (80046c4 <HAL_RCC_OscConfig+0x4d4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d106      	bne.n	80044e0 <HAL_RCC_OscConfig+0x2f0>
 80044d2:	4b7d      	ldr	r3, [pc, #500]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	4a7c      	ldr	r2, [pc, #496]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	6713      	str	r3, [r2, #112]	; 0x70
 80044de:	e01c      	b.n	800451a <HAL_RCC_OscConfig+0x32a>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2b05      	cmp	r3, #5
 80044e6:	d10c      	bne.n	8004502 <HAL_RCC_OscConfig+0x312>
 80044e8:	4b77      	ldr	r3, [pc, #476]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 80044ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ec:	4a76      	ldr	r2, [pc, #472]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 80044ee:	f043 0304 	orr.w	r3, r3, #4
 80044f2:	6713      	str	r3, [r2, #112]	; 0x70
 80044f4:	4b74      	ldr	r3, [pc, #464]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f8:	4a73      	ldr	r2, [pc, #460]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004500:	e00b      	b.n	800451a <HAL_RCC_OscConfig+0x32a>
 8004502:	4b71      	ldr	r3, [pc, #452]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	4a70      	ldr	r2, [pc, #448]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	6713      	str	r3, [r2, #112]	; 0x70
 800450e:	4b6e      	ldr	r3, [pc, #440]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	4a6d      	ldr	r2, [pc, #436]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 8004514:	f023 0304 	bic.w	r3, r3, #4
 8004518:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d015      	beq.n	800454e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004522:	f7fd fe45 	bl	80021b0 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004528:	e00a      	b.n	8004540 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800452a:	f7fd fe41 	bl	80021b0 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	f241 3288 	movw	r2, #5000	; 0x1388
 8004538:	4293      	cmp	r3, r2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e0bc      	b.n	80046ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004540:	4b61      	ldr	r3, [pc, #388]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 8004542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0ee      	beq.n	800452a <HAL_RCC_OscConfig+0x33a>
 800454c:	e014      	b.n	8004578 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800454e:	f7fd fe2f 	bl	80021b0 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004554:	e00a      	b.n	800456c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004556:	f7fd fe2b 	bl	80021b0 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	f241 3288 	movw	r2, #5000	; 0x1388
 8004564:	4293      	cmp	r3, r2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e0a6      	b.n	80046ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800456c:	4b56      	ldr	r3, [pc, #344]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1ee      	bne.n	8004556 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004578:	7dfb      	ldrb	r3, [r7, #23]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d105      	bne.n	800458a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800457e:	4b52      	ldr	r3, [pc, #328]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	4a51      	ldr	r2, [pc, #324]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 8004584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004588:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 8092 	beq.w	80046b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004594:	4b4c      	ldr	r3, [pc, #304]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 030c 	and.w	r3, r3, #12
 800459c:	2b08      	cmp	r3, #8
 800459e:	d05c      	beq.n	800465a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d141      	bne.n	800462c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a8:	4b48      	ldr	r3, [pc, #288]	; (80046cc <HAL_RCC_OscConfig+0x4dc>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ae:	f7fd fdff 	bl	80021b0 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b6:	f7fd fdfb 	bl	80021b0 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e078      	b.n	80046ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c8:	4b3f      	ldr	r3, [pc, #252]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f0      	bne.n	80045b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	019b      	lsls	r3, r3, #6
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	3b01      	subs	r3, #1
 80045ee:	041b      	lsls	r3, r3, #16
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	061b      	lsls	r3, r3, #24
 80045f8:	4933      	ldr	r1, [pc, #204]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045fe:	4b33      	ldr	r3, [pc, #204]	; (80046cc <HAL_RCC_OscConfig+0x4dc>)
 8004600:	2201      	movs	r2, #1
 8004602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004604:	f7fd fdd4 	bl	80021b0 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800460c:	f7fd fdd0 	bl	80021b0 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e04d      	b.n	80046ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461e:	4b2a      	ldr	r3, [pc, #168]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCC_OscConfig+0x41c>
 800462a:	e045      	b.n	80046b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800462c:	4b27      	ldr	r3, [pc, #156]	; (80046cc <HAL_RCC_OscConfig+0x4dc>)
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004632:	f7fd fdbd 	bl	80021b0 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800463a:	f7fd fdb9 	bl	80021b0 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e036      	b.n	80046ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464c:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f0      	bne.n	800463a <HAL_RCC_OscConfig+0x44a>
 8004658:	e02e      	b.n	80046b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e029      	b.n	80046ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004666:	4b18      	ldr	r3, [pc, #96]	; (80046c8 <HAL_RCC_OscConfig+0x4d8>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	429a      	cmp	r2, r3
 8004678:	d11c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d115      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800468e:	4013      	ands	r3, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004694:	4293      	cmp	r3, r2
 8004696:	d10d      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d106      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40007000 	.word	0x40007000
 80046c8:	40023800 	.word	0x40023800
 80046cc:	42470060 	.word	0x42470060

080046d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0cc      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046e4:	4b68      	ldr	r3, [pc, #416]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d90c      	bls.n	800470c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f2:	4b65      	ldr	r3, [pc, #404]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	4b63      	ldr	r3, [pc, #396]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0b8      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d020      	beq.n	800475a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004724:	4b59      	ldr	r3, [pc, #356]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	4a58      	ldr	r2, [pc, #352]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800472e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800473c:	4b53      	ldr	r3, [pc, #332]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	4a52      	ldr	r2, [pc, #328]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004748:	4b50      	ldr	r3, [pc, #320]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	494d      	ldr	r1, [pc, #308]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	4313      	orrs	r3, r2
 8004758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d044      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d107      	bne.n	800477e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476e:	4b47      	ldr	r3, [pc, #284]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d119      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e07f      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d003      	beq.n	800478e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800478a:	2b03      	cmp	r3, #3
 800478c:	d107      	bne.n	800479e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478e:	4b3f      	ldr	r3, [pc, #252]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e06f      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479e:	4b3b      	ldr	r3, [pc, #236]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e067      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ae:	4b37      	ldr	r3, [pc, #220]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f023 0203 	bic.w	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	4934      	ldr	r1, [pc, #208]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047c0:	f7fd fcf6 	bl	80021b0 <HAL_GetTick>
 80047c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c6:	e00a      	b.n	80047de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c8:	f7fd fcf2 	bl	80021b0 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e04f      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047de:	4b2b      	ldr	r3, [pc, #172]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 020c 	and.w	r2, r3, #12
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d1eb      	bne.n	80047c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047f0:	4b25      	ldr	r3, [pc, #148]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d20c      	bcs.n	8004818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fe:	4b22      	ldr	r3, [pc, #136]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004806:	4b20      	ldr	r3, [pc, #128]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e032      	b.n	800487e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004824:	4b19      	ldr	r3, [pc, #100]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4916      	ldr	r1, [pc, #88]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d009      	beq.n	8004856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004842:	4b12      	ldr	r3, [pc, #72]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	490e      	ldr	r1, [pc, #56]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	4313      	orrs	r3, r2
 8004854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004856:	f000 f821 	bl	800489c <HAL_RCC_GetSysClockFreq>
 800485a:	4601      	mov	r1, r0
 800485c:	4b0b      	ldr	r3, [pc, #44]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	4a0a      	ldr	r2, [pc, #40]	; (8004890 <HAL_RCC_ClockConfig+0x1c0>)
 8004868:	5cd3      	ldrb	r3, [r2, r3]
 800486a:	fa21 f303 	lsr.w	r3, r1, r3
 800486e:	4a09      	ldr	r2, [pc, #36]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004872:	4b09      	ldr	r3, [pc, #36]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7fd fc56 	bl	8002128 <HAL_InitTick>

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40023c00 	.word	0x40023c00
 800488c:	40023800 	.word	0x40023800
 8004890:	0800be60 	.word	0x0800be60
 8004894:	20000000 	.word	0x20000000
 8004898:	20000004 	.word	0x20000004

0800489c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800489c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	607b      	str	r3, [r7, #4]
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	2300      	movs	r3, #0
 80048ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048b2:	4b63      	ldr	r3, [pc, #396]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d007      	beq.n	80048ce <HAL_RCC_GetSysClockFreq+0x32>
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d008      	beq.n	80048d4 <HAL_RCC_GetSysClockFreq+0x38>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f040 80b4 	bne.w	8004a30 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048c8:	4b5e      	ldr	r3, [pc, #376]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048ca:	60bb      	str	r3, [r7, #8]
       break;
 80048cc:	e0b3      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048ce:	4b5d      	ldr	r3, [pc, #372]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048d0:	60bb      	str	r3, [r7, #8]
      break;
 80048d2:	e0b0      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048d4:	4b5a      	ldr	r3, [pc, #360]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048de:	4b58      	ldr	r3, [pc, #352]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d04a      	beq.n	8004980 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ea:	4b55      	ldr	r3, [pc, #340]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	099b      	lsrs	r3, r3, #6
 80048f0:	f04f 0400 	mov.w	r4, #0
 80048f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	ea03 0501 	and.w	r5, r3, r1
 8004900:	ea04 0602 	and.w	r6, r4, r2
 8004904:	4629      	mov	r1, r5
 8004906:	4632      	mov	r2, r6
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	f04f 0400 	mov.w	r4, #0
 8004910:	0154      	lsls	r4, r2, #5
 8004912:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004916:	014b      	lsls	r3, r1, #5
 8004918:	4619      	mov	r1, r3
 800491a:	4622      	mov	r2, r4
 800491c:	1b49      	subs	r1, r1, r5
 800491e:	eb62 0206 	sbc.w	r2, r2, r6
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	f04f 0400 	mov.w	r4, #0
 800492a:	0194      	lsls	r4, r2, #6
 800492c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004930:	018b      	lsls	r3, r1, #6
 8004932:	1a5b      	subs	r3, r3, r1
 8004934:	eb64 0402 	sbc.w	r4, r4, r2
 8004938:	f04f 0100 	mov.w	r1, #0
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	00e2      	lsls	r2, r4, #3
 8004942:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004946:	00d9      	lsls	r1, r3, #3
 8004948:	460b      	mov	r3, r1
 800494a:	4614      	mov	r4, r2
 800494c:	195b      	adds	r3, r3, r5
 800494e:	eb44 0406 	adc.w	r4, r4, r6
 8004952:	f04f 0100 	mov.w	r1, #0
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	02a2      	lsls	r2, r4, #10
 800495c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004960:	0299      	lsls	r1, r3, #10
 8004962:	460b      	mov	r3, r1
 8004964:	4614      	mov	r4, r2
 8004966:	4618      	mov	r0, r3
 8004968:	4621      	mov	r1, r4
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f04f 0400 	mov.w	r4, #0
 8004970:	461a      	mov	r2, r3
 8004972:	4623      	mov	r3, r4
 8004974:	f7fc f918 	bl	8000ba8 <__aeabi_uldivmod>
 8004978:	4603      	mov	r3, r0
 800497a:	460c      	mov	r4, r1
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	e049      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004980:	4b2f      	ldr	r3, [pc, #188]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	099b      	lsrs	r3, r3, #6
 8004986:	f04f 0400 	mov.w	r4, #0
 800498a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	ea03 0501 	and.w	r5, r3, r1
 8004996:	ea04 0602 	and.w	r6, r4, r2
 800499a:	4629      	mov	r1, r5
 800499c:	4632      	mov	r2, r6
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	f04f 0400 	mov.w	r4, #0
 80049a6:	0154      	lsls	r4, r2, #5
 80049a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049ac:	014b      	lsls	r3, r1, #5
 80049ae:	4619      	mov	r1, r3
 80049b0:	4622      	mov	r2, r4
 80049b2:	1b49      	subs	r1, r1, r5
 80049b4:	eb62 0206 	sbc.w	r2, r2, r6
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	f04f 0400 	mov.w	r4, #0
 80049c0:	0194      	lsls	r4, r2, #6
 80049c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049c6:	018b      	lsls	r3, r1, #6
 80049c8:	1a5b      	subs	r3, r3, r1
 80049ca:	eb64 0402 	sbc.w	r4, r4, r2
 80049ce:	f04f 0100 	mov.w	r1, #0
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	00e2      	lsls	r2, r4, #3
 80049d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049dc:	00d9      	lsls	r1, r3, #3
 80049de:	460b      	mov	r3, r1
 80049e0:	4614      	mov	r4, r2
 80049e2:	195b      	adds	r3, r3, r5
 80049e4:	eb44 0406 	adc.w	r4, r4, r6
 80049e8:	f04f 0100 	mov.w	r1, #0
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	02a2      	lsls	r2, r4, #10
 80049f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049f6:	0299      	lsls	r1, r3, #10
 80049f8:	460b      	mov	r3, r1
 80049fa:	4614      	mov	r4, r2
 80049fc:	4618      	mov	r0, r3
 80049fe:	4621      	mov	r1, r4
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f04f 0400 	mov.w	r4, #0
 8004a06:	461a      	mov	r2, r3
 8004a08:	4623      	mov	r3, r4
 8004a0a:	f7fc f8cd 	bl	8000ba8 <__aeabi_uldivmod>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	460c      	mov	r4, r1
 8004a12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	0c1b      	lsrs	r3, r3, #16
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	3301      	adds	r3, #1
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2c:	60bb      	str	r3, [r7, #8]
      break;
 8004a2e:	e002      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a30:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a32:	60bb      	str	r3, [r7, #8]
      break;
 8004a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a36:	68bb      	ldr	r3, [r7, #8]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a40:	40023800 	.word	0x40023800
 8004a44:	00f42400 	.word	0x00f42400

08004a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a4c:	4b03      	ldr	r3, [pc, #12]	; (8004a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	20000000 	.word	0x20000000

08004a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e056      	b.n	8004b20 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d106      	bne.n	8004a92 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fd f8d3 	bl	8001c38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	ea42 0103 	orr.w	r1, r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	0c1b      	lsrs	r3, r3, #16
 8004af0:	f003 0104 	and.w	r1, r3, #4
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	4613      	mov	r3, r2
 8004b36:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_SPI_Transmit+0x22>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e11e      	b.n	8004d88 <HAL_SPI_Transmit+0x260>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b52:	f7fd fb2d 	bl	80021b0 <HAL_GetTick>
 8004b56:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b58:	88fb      	ldrh	r3, [r7, #6]
 8004b5a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d002      	beq.n	8004b6e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b68:	2302      	movs	r3, #2
 8004b6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b6c:	e103      	b.n	8004d76 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <HAL_SPI_Transmit+0x52>
 8004b74:	88fb      	ldrh	r3, [r7, #6]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d102      	bne.n	8004b80 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b7e:	e0fa      	b.n	8004d76 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2203      	movs	r2, #3
 8004b84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	88fa      	ldrh	r2, [r7, #6]
 8004b98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	88fa      	ldrh	r2, [r7, #6]
 8004b9e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc6:	d107      	bne.n	8004bd8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bd6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be2:	2b40      	cmp	r3, #64	; 0x40
 8004be4:	d007      	beq.n	8004bf6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bf4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bfe:	d14b      	bne.n	8004c98 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <HAL_SPI_Transmit+0xe6>
 8004c08:	8afb      	ldrh	r3, [r7, #22]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d13e      	bne.n	8004c8c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	881a      	ldrh	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	1c9a      	adds	r2, r3, #2
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c32:	e02b      	b.n	8004c8c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d112      	bne.n	8004c68 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	881a      	ldrh	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	1c9a      	adds	r2, r3, #2
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c66:	e011      	b.n	8004c8c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c68:	f7fd faa2 	bl	80021b0 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d803      	bhi.n	8004c80 <HAL_SPI_Transmit+0x158>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7e:	d102      	bne.n	8004c86 <HAL_SPI_Transmit+0x15e>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d102      	bne.n	8004c8c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c8a:	e074      	b.n	8004d76 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1ce      	bne.n	8004c34 <HAL_SPI_Transmit+0x10c>
 8004c96:	e04c      	b.n	8004d32 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <HAL_SPI_Transmit+0x17e>
 8004ca0:	8afb      	ldrh	r3, [r7, #22]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d140      	bne.n	8004d28 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	330c      	adds	r3, #12
 8004cb0:	7812      	ldrb	r2, [r2, #0]
 8004cb2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ccc:	e02c      	b.n	8004d28 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d113      	bne.n	8004d04 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	7812      	ldrb	r2, [r2, #0]
 8004ce8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d02:	e011      	b.n	8004d28 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d04:	f7fd fa54 	bl	80021b0 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d803      	bhi.n	8004d1c <HAL_SPI_Transmit+0x1f4>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d102      	bne.n	8004d22 <HAL_SPI_Transmit+0x1fa>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d26:	e026      	b.n	8004d76 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1cd      	bne.n	8004cce <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	6839      	ldr	r1, [r7, #0]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fdc0 	bl	80058bc <SPI_EndRxTxTransaction>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d50:	2300      	movs	r3, #0
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	77fb      	strb	r3, [r7, #31]
 8004d72:	e000      	b.n	8004d76 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004d74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d86:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3720      	adds	r7, #32
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08c      	sub	sp, #48	; 0x30
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
 8004d9c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_SPI_TransmitReceive+0x26>
 8004db2:	2302      	movs	r3, #2
 8004db4:	e18a      	b.n	80050cc <HAL_SPI_TransmitReceive+0x33c>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dbe:	f7fd f9f7 	bl	80021b0 <HAL_GetTick>
 8004dc2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004dd4:	887b      	ldrh	r3, [r7, #2]
 8004dd6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d00f      	beq.n	8004e00 <HAL_SPI_TransmitReceive+0x70>
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de6:	d107      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d103      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x68>
 8004df0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d003      	beq.n	8004e00 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004df8:	2302      	movs	r3, #2
 8004dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004dfe:	e15b      	b.n	80050b8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <HAL_SPI_TransmitReceive+0x82>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_SPI_TransmitReceive+0x82>
 8004e0c:	887b      	ldrh	r3, [r7, #2]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d103      	bne.n	8004e1a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e18:	e14e      	b.n	80050b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d003      	beq.n	8004e2e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2205      	movs	r2, #5
 8004e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	887a      	ldrh	r2, [r7, #2]
 8004e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	887a      	ldrh	r2, [r7, #2]
 8004e44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	887a      	ldrh	r2, [r7, #2]
 8004e50:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	887a      	ldrh	r2, [r7, #2]
 8004e56:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6e:	2b40      	cmp	r3, #64	; 0x40
 8004e70:	d007      	beq.n	8004e82 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e8a:	d178      	bne.n	8004f7e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <HAL_SPI_TransmitReceive+0x10a>
 8004e94:	8b7b      	ldrh	r3, [r7, #26]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d166      	bne.n	8004f68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	881a      	ldrh	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	1c9a      	adds	r2, r3, #2
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ebe:	e053      	b.n	8004f68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d11b      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x176>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d016      	beq.n	8004f06 <HAL_SPI_TransmitReceive+0x176>
 8004ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d113      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	881a      	ldrh	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	1c9a      	adds	r2, r3, #2
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d119      	bne.n	8004f48 <HAL_SPI_TransmitReceive+0x1b8>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d014      	beq.n	8004f48 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	b292      	uxth	r2, r2
 8004f2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f30:	1c9a      	adds	r2, r3, #2
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f44:	2301      	movs	r3, #1
 8004f46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f48:	f7fd f932 	bl	80021b0 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d807      	bhi.n	8004f68 <HAL_SPI_TransmitReceive+0x1d8>
 8004f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5e:	d003      	beq.n	8004f68 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f66:	e0a7      	b.n	80050b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1a6      	bne.n	8004ec0 <HAL_SPI_TransmitReceive+0x130>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1a1      	bne.n	8004ec0 <HAL_SPI_TransmitReceive+0x130>
 8004f7c:	e07c      	b.n	8005078 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <HAL_SPI_TransmitReceive+0x1fc>
 8004f86:	8b7b      	ldrh	r3, [r7, #26]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d16b      	bne.n	8005064 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	330c      	adds	r3, #12
 8004f96:	7812      	ldrb	r2, [r2, #0]
 8004f98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fb2:	e057      	b.n	8005064 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d11c      	bne.n	8004ffc <HAL_SPI_TransmitReceive+0x26c>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d017      	beq.n	8004ffc <HAL_SPI_TransmitReceive+0x26c>
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d114      	bne.n	8004ffc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	330c      	adds	r3, #12
 8004fdc:	7812      	ldrb	r2, [r2, #0]
 8004fde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b01      	cmp	r3, #1
 8005008:	d119      	bne.n	800503e <HAL_SPI_TransmitReceive+0x2ae>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d014      	beq.n	800503e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800503a:	2301      	movs	r3, #1
 800503c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800503e:	f7fd f8b7 	bl	80021b0 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800504a:	429a      	cmp	r2, r3
 800504c:	d803      	bhi.n	8005056 <HAL_SPI_TransmitReceive+0x2c6>
 800504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005054:	d102      	bne.n	800505c <HAL_SPI_TransmitReceive+0x2cc>
 8005056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005058:	2b00      	cmp	r3, #0
 800505a:	d103      	bne.n	8005064 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005062:	e029      	b.n	80050b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1a2      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x224>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d19d      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 fc1d 	bl	80058bc <SPI_EndRxTxTransaction>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d006      	beq.n	8005096 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2220      	movs	r2, #32
 8005092:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005094:	e010      	b.n	80050b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10b      	bne.n	80050b6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	e000      	b.n	80050b8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80050b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3730      	adds	r7, #48	; 0x30
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e0e3      	b.n	80052bc <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005102:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800510a:	7dbb      	ldrb	r3, [r7, #22]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d00d      	beq.n	800512c <HAL_SPI_TransmitReceive_DMA+0x58>
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005116:	d106      	bne.n	8005126 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d102      	bne.n	8005126 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005120:	7dbb      	ldrb	r3, [r7, #22]
 8005122:	2b04      	cmp	r3, #4
 8005124:	d002      	beq.n	800512c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005126:	2302      	movs	r3, #2
 8005128:	75fb      	strb	r3, [r7, #23]
    goto error;
 800512a:	e0c2      	b.n	80052b2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005138:	887b      	ldrh	r3, [r7, #2]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005142:	e0b6      	b.n	80052b2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b04      	cmp	r3, #4
 800514e:	d003      	beq.n	8005158 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2205      	movs	r2, #5
 8005154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	887a      	ldrh	r2, [r7, #2]
 8005168:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	887a      	ldrh	r2, [r7, #2]
 800516e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	887a      	ldrh	r2, [r7, #2]
 800517a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	887a      	ldrh	r2, [r7, #2]
 8005180:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b04      	cmp	r3, #4
 8005198:	d108      	bne.n	80051ac <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519e:	4a49      	ldr	r2, [pc, #292]	; (80052c4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a6:	4a48      	ldr	r2, [pc, #288]	; (80052c8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80051a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80051aa:	e007      	b.n	80051bc <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b0:	4a46      	ldr	r2, [pc, #280]	; (80052cc <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80051b2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b8:	4a45      	ldr	r2, [pc, #276]	; (80052d0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80051ba:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c0:	4a44      	ldr	r2, [pc, #272]	; (80052d4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80051c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c8:	2200      	movs	r2, #0
 80051ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	330c      	adds	r3, #12
 80051d6:	4619      	mov	r1, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80051e4:	f7fd f9d2 	bl	800258c <HAL_DMA_Start_IT>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00c      	beq.n	8005208 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f2:	f043 0210 	orr.w	r2, r3, #16
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005206:	e054      	b.n	80052b2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800521c:	2200      	movs	r2, #0
 800521e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005224:	2200      	movs	r2, #0
 8005226:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522c:	2200      	movs	r2, #0
 800522e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005234:	2200      	movs	r2, #0
 8005236:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	4619      	mov	r1, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	330c      	adds	r3, #12
 8005248:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800524e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005250:	f7fd f99c 	bl	800258c <HAL_DMA_Start_IT>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00c      	beq.n	8005274 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	f043 0210 	orr.w	r2, r3, #16
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005272:	e01e      	b.n	80052b2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527e:	2b40      	cmp	r3, #64	; 0x40
 8005280:	d007      	beq.n	8005292 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005290:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0220 	orr.w	r2, r2, #32
 80052a0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0202 	orr.w	r2, r2, #2
 80052b0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	0800567d 	.word	0x0800567d
 80052c8:	08005545 	.word	0x08005545
 80052cc:	08005699 	.word	0x08005699
 80052d0:	080055ed 	.word	0x080055ed
 80052d4:	080056b5 	.word	0x080056b5

080052d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	099b      	lsrs	r3, r3, #6
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10f      	bne.n	800531c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	099b      	lsrs	r3, r3, #6
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d004      	beq.n	800531c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	4798      	blx	r3
    return;
 800531a:	e0d8      	b.n	80054ce <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <HAL_SPI_IRQHandler+0x66>
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	09db      	lsrs	r3, r3, #7
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d004      	beq.n	800533e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	4798      	blx	r3
    return;
 800533c:	e0c7      	b.n	80054ce <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10c      	bne.n	8005364 <HAL_SPI_IRQHandler+0x8c>
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	099b      	lsrs	r3, r3, #6
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d106      	bne.n	8005364 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	0a1b      	lsrs	r3, r3, #8
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 80b5 	beq.w	80054ce <HAL_SPI_IRQHandler+0x1f6>
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	095b      	lsrs	r3, r3, #5
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 80ae 	beq.w	80054ce <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	099b      	lsrs	r3, r3, #6
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d023      	beq.n	80053c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b03      	cmp	r3, #3
 8005388:	d011      	beq.n	80053ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538e:	f043 0204 	orr.w	r2, r3, #4
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	e00b      	b.n	80053c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ae:	2300      	movs	r3, #0
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	693b      	ldr	r3, [r7, #16]
        return;
 80053c4:	e083      	b.n	80054ce <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	095b      	lsrs	r3, r3, #5
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d014      	beq.n	80053fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d6:	f043 0201 	orr.w	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	0a1b      	lsrs	r3, r3, #8
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00c      	beq.n	8005422 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540c:	f043 0208 	orr.w	r2, r3, #8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005414:	2300      	movs	r3, #0
 8005416:	60bb      	str	r3, [r7, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	60bb      	str	r3, [r7, #8]
 8005420:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005426:	2b00      	cmp	r3, #0
 8005428:	d050      	beq.n	80054cc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005438:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d104      	bne.n	8005456 <HAL_SPI_IRQHandler+0x17e>
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d034      	beq.n	80054c0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0203 	bic.w	r2, r2, #3
 8005464:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800546a:	2b00      	cmp	r3, #0
 800546c:	d011      	beq.n	8005492 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005472:	4a18      	ldr	r2, [pc, #96]	; (80054d4 <HAL_SPI_IRQHandler+0x1fc>)
 8005474:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800547a:	4618      	mov	r0, r3
 800547c:	f7fd f8de 	bl	800263c <HAL_DMA_Abort_IT>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d005      	beq.n	8005492 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005496:	2b00      	cmp	r3, #0
 8005498:	d016      	beq.n	80054c8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800549e:	4a0d      	ldr	r2, [pc, #52]	; (80054d4 <HAL_SPI_IRQHandler+0x1fc>)
 80054a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fd f8c8 	bl	800263c <HAL_DMA_Abort_IT>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80054be:	e003      	b.n	80054c8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f827 	bl	8005514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80054c6:	e000      	b.n	80054ca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80054c8:	bf00      	nop
    return;
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
  }
}
 80054ce:	3720      	adds	r7, #32
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	080056f5 	.word	0x080056f5

080054d8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005536:	b2db      	uxtb	r3, r3
}
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005550:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005552:	f7fc fe2d 	bl	80021b0 <HAL_GetTick>
 8005556:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005566:	d03b      	beq.n	80055e0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0220 	bic.w	r2, r2, #32
 8005576:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10d      	bne.n	800559c <SPI_DMAReceiveCplt+0x58>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005588:	d108      	bne.n	800559c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0203 	bic.w	r2, r2, #3
 8005598:	605a      	str	r2, [r3, #4]
 800559a:	e007      	b.n	80055ac <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0201 	bic.w	r2, r2, #1
 80055aa:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	2164      	movs	r1, #100	; 0x64
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f91d 	bl	80057f0 <SPI_EndRxTransaction>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f7ff ff9b 	bl	8005514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80055de:	e002      	b.n	80055e6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7ff ff79 	bl	80054d8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055fa:	f7fc fdd9 	bl	80021b0 <HAL_GetTick>
 80055fe:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560e:	d02f      	beq.n	8005670 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0220 	bic.w	r2, r2, #32
 800561e:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	2164      	movs	r1, #100	; 0x64
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f949 	bl	80058bc <SPI_EndRxTxTransaction>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005634:	f043 0220 	orr.w	r2, r3, #32
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0203 	bic.w	r2, r2, #3
 800564a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7ff ff53 	bl	8005514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800566e:	e002      	b.n	8005676 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7fb ff31 	bl	80014d8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f7ff ff2e 	bl	80054ec <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005690:	bf00      	nop
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f7ff ff2a 	bl	8005500 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0203 	bic.w	r2, r2, #3
 80056d0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d6:	f043 0210 	orr.w	r2, r3, #16
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f7ff ff14 	bl	8005514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056ec:	bf00      	nop
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f7ff ff00 	bl	8005514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005714:	bf00      	nop
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800572c:	e04c      	b.n	80057c8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005734:	d048      	beq.n	80057c8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005736:	f7fc fd3b 	bl	80021b0 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d902      	bls.n	800574c <SPI_WaitFlagStateUntilTimeout+0x30>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d13d      	bne.n	80057c8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800575a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005764:	d111      	bne.n	800578a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800576e:	d004      	beq.n	800577a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005778:	d107      	bne.n	800578a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005788:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005792:	d10f      	bne.n	80057b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e00f      	b.n	80057e8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	4013      	ands	r3, r2
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	bf0c      	ite	eq
 80057d8:	2301      	moveq	r3, #1
 80057da:	2300      	movne	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	461a      	mov	r2, r3
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d1a3      	bne.n	800572e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005804:	d111      	bne.n	800582a <SPI_EndRxTransaction+0x3a>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800580e:	d004      	beq.n	800581a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005818:	d107      	bne.n	800582a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005828:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005832:	d12a      	bne.n	800588a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583c:	d012      	beq.n	8005864 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2200      	movs	r2, #0
 8005846:	2180      	movs	r1, #128	; 0x80
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f7ff ff67 	bl	800571c <SPI_WaitFlagStateUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d02d      	beq.n	80058b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005858:	f043 0220 	orr.w	r2, r3, #32
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e026      	b.n	80058b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2200      	movs	r2, #0
 800586c:	2101      	movs	r1, #1
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f7ff ff54 	bl	800571c <SPI_WaitFlagStateUntilTimeout>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d01a      	beq.n	80058b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587e:	f043 0220 	orr.w	r2, r3, #32
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e013      	b.n	80058b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2200      	movs	r2, #0
 8005892:	2101      	movs	r1, #1
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f7ff ff41 	bl	800571c <SPI_WaitFlagStateUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d007      	beq.n	80058b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a4:	f043 0220 	orr.w	r2, r3, #32
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e000      	b.n	80058b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058c8:	4b1b      	ldr	r3, [pc, #108]	; (8005938 <SPI_EndRxTxTransaction+0x7c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a1b      	ldr	r2, [pc, #108]	; (800593c <SPI_EndRxTxTransaction+0x80>)
 80058ce:	fba2 2303 	umull	r2, r3, r2, r3
 80058d2:	0d5b      	lsrs	r3, r3, #21
 80058d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058d8:	fb02 f303 	mul.w	r3, r2, r3
 80058dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058e6:	d112      	bne.n	800590e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2200      	movs	r2, #0
 80058f0:	2180      	movs	r1, #128	; 0x80
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f7ff ff12 	bl	800571c <SPI_WaitFlagStateUntilTimeout>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d016      	beq.n	800592c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005902:	f043 0220 	orr.w	r2, r3, #32
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e00f      	b.n	800592e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	3b01      	subs	r3, #1
 8005918:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005924:	2b80      	cmp	r3, #128	; 0x80
 8005926:	d0f2      	beq.n	800590e <SPI_EndRxTxTransaction+0x52>
 8005928:	e000      	b.n	800592c <SPI_EndRxTxTransaction+0x70>
        break;
 800592a:	bf00      	nop
  }

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000000 	.word	0x20000000
 800593c:	165e9f81 	.word	0x165e9f81

08005940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e01d      	b.n	800598e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fc fa54 	bl	8001e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3304      	adds	r3, #4
 800597c:	4619      	mov	r1, r3
 800597e:	4610      	mov	r0, r2
 8005980:	f000 f9fa 	bl	8005d78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b082      	sub	sp, #8
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e01d      	b.n	80059e4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d106      	bne.n	80059c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f815 	bl	80059ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2202      	movs	r2, #2
 80059c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3304      	adds	r3, #4
 80059d2:	4619      	mov	r1, r3
 80059d4:	4610      	mov	r0, r2
 80059d6:	f000 f9cf 	bl	8005d78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	6839      	ldr	r1, [r7, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fc9a 	bl	800634c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a15      	ldr	r2, [pc, #84]	; (8005a74 <HAL_TIM_PWM_Start+0x74>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d004      	beq.n	8005a2c <HAL_TIM_PWM_Start+0x2c>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a14      	ldr	r2, [pc, #80]	; (8005a78 <HAL_TIM_PWM_Start+0x78>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d101      	bne.n	8005a30 <HAL_TIM_PWM_Start+0x30>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e000      	b.n	8005a32 <HAL_TIM_PWM_Start+0x32>
 8005a30:	2300      	movs	r3, #0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d007      	beq.n	8005a46 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b06      	cmp	r3, #6
 8005a56:	d007      	beq.n	8005a68 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0201 	orr.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	40010000 	.word	0x40010000
 8005a78:	40010400 	.word	0x40010400

08005a7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e0b4      	b.n	8005c00 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b0c      	cmp	r3, #12
 8005aaa:	f200 809f 	bhi.w	8005bec <HAL_TIM_PWM_ConfigChannel+0x170>
 8005aae:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab4:	08005ae9 	.word	0x08005ae9
 8005ab8:	08005bed 	.word	0x08005bed
 8005abc:	08005bed 	.word	0x08005bed
 8005ac0:	08005bed 	.word	0x08005bed
 8005ac4:	08005b29 	.word	0x08005b29
 8005ac8:	08005bed 	.word	0x08005bed
 8005acc:	08005bed 	.word	0x08005bed
 8005ad0:	08005bed 	.word	0x08005bed
 8005ad4:	08005b6b 	.word	0x08005b6b
 8005ad8:	08005bed 	.word	0x08005bed
 8005adc:	08005bed 	.word	0x08005bed
 8005ae0:	08005bed 	.word	0x08005bed
 8005ae4:	08005bab 	.word	0x08005bab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68b9      	ldr	r1, [r7, #8]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 f9e2 	bl	8005eb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0208 	orr.w	r2, r2, #8
 8005b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0204 	bic.w	r2, r2, #4
 8005b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6999      	ldr	r1, [r3, #24]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	691a      	ldr	r2, [r3, #16]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	619a      	str	r2, [r3, #24]
      break;
 8005b26:	e062      	b.n	8005bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fa32 	bl	8005f98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699a      	ldr	r2, [r3, #24]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6999      	ldr	r1, [r3, #24]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	021a      	lsls	r2, r3, #8
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	619a      	str	r2, [r3, #24]
      break;
 8005b68:	e041      	b.n	8005bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 fa87 	bl	8006084 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f042 0208 	orr.w	r2, r2, #8
 8005b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0204 	bic.w	r2, r2, #4
 8005b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69d9      	ldr	r1, [r3, #28]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	691a      	ldr	r2, [r3, #16]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	61da      	str	r2, [r3, #28]
      break;
 8005ba8:	e021      	b.n	8005bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fadb 	bl	800616c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69da      	ldr	r2, [r3, #28]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69d9      	ldr	r1, [r3, #28]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	021a      	lsls	r2, r3, #8
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	61da      	str	r2, [r3, #28]
      break;
 8005bea:	e000      	b.n	8005bee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005bec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_TIM_ConfigClockSource+0x18>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e0a6      	b.n	8005d6e <HAL_TIM_ConfigClockSource+0x166>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b40      	cmp	r3, #64	; 0x40
 8005c56:	d067      	beq.n	8005d28 <HAL_TIM_ConfigClockSource+0x120>
 8005c58:	2b40      	cmp	r3, #64	; 0x40
 8005c5a:	d80b      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x6c>
 8005c5c:	2b10      	cmp	r3, #16
 8005c5e:	d073      	beq.n	8005d48 <HAL_TIM_ConfigClockSource+0x140>
 8005c60:	2b10      	cmp	r3, #16
 8005c62:	d802      	bhi.n	8005c6a <HAL_TIM_ConfigClockSource+0x62>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d06f      	beq.n	8005d48 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005c68:	e078      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c6a:	2b20      	cmp	r3, #32
 8005c6c:	d06c      	beq.n	8005d48 <HAL_TIM_ConfigClockSource+0x140>
 8005c6e:	2b30      	cmp	r3, #48	; 0x30
 8005c70:	d06a      	beq.n	8005d48 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005c72:	e073      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c74:	2b70      	cmp	r3, #112	; 0x70
 8005c76:	d00d      	beq.n	8005c94 <HAL_TIM_ConfigClockSource+0x8c>
 8005c78:	2b70      	cmp	r3, #112	; 0x70
 8005c7a:	d804      	bhi.n	8005c86 <HAL_TIM_ConfigClockSource+0x7e>
 8005c7c:	2b50      	cmp	r3, #80	; 0x50
 8005c7e:	d033      	beq.n	8005ce8 <HAL_TIM_ConfigClockSource+0xe0>
 8005c80:	2b60      	cmp	r3, #96	; 0x60
 8005c82:	d041      	beq.n	8005d08 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005c84:	e06a      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8a:	d066      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x152>
 8005c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c90:	d017      	beq.n	8005cc2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005c92:	e063      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6818      	ldr	r0, [r3, #0]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	6899      	ldr	r1, [r3, #8]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f000 fb32 	bl	800630c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cb6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	609a      	str	r2, [r3, #8]
      break;
 8005cc0:	e04c      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6818      	ldr	r0, [r3, #0]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	6899      	ldr	r1, [r3, #8]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f000 fb1b 	bl	800630c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ce4:	609a      	str	r2, [r3, #8]
      break;
 8005ce6:	e039      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6818      	ldr	r0, [r3, #0]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	6859      	ldr	r1, [r3, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	f000 fa8f 	bl	8006218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2150      	movs	r1, #80	; 0x50
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fae8 	bl	80062d6 <TIM_ITRx_SetConfig>
      break;
 8005d06:	e029      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	6859      	ldr	r1, [r3, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	461a      	mov	r2, r3
 8005d16:	f000 faae 	bl	8006276 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2160      	movs	r1, #96	; 0x60
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fad8 	bl	80062d6 <TIM_ITRx_SetConfig>
      break;
 8005d26:	e019      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6818      	ldr	r0, [r3, #0]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	6859      	ldr	r1, [r3, #4]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	461a      	mov	r2, r3
 8005d36:	f000 fa6f 	bl	8006218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2140      	movs	r1, #64	; 0x40
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fac8 	bl	80062d6 <TIM_ITRx_SetConfig>
      break;
 8005d46:	e009      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4619      	mov	r1, r3
 8005d52:	4610      	mov	r0, r2
 8005d54:	f000 fabf 	bl	80062d6 <TIM_ITRx_SetConfig>
      break;
 8005d58:	e000      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a40      	ldr	r2, [pc, #256]	; (8005e8c <TIM_Base_SetConfig+0x114>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d013      	beq.n	8005db8 <TIM_Base_SetConfig+0x40>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d96:	d00f      	beq.n	8005db8 <TIM_Base_SetConfig+0x40>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a3d      	ldr	r2, [pc, #244]	; (8005e90 <TIM_Base_SetConfig+0x118>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00b      	beq.n	8005db8 <TIM_Base_SetConfig+0x40>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a3c      	ldr	r2, [pc, #240]	; (8005e94 <TIM_Base_SetConfig+0x11c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d007      	beq.n	8005db8 <TIM_Base_SetConfig+0x40>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a3b      	ldr	r2, [pc, #236]	; (8005e98 <TIM_Base_SetConfig+0x120>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <TIM_Base_SetConfig+0x40>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a3a      	ldr	r2, [pc, #232]	; (8005e9c <TIM_Base_SetConfig+0x124>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d108      	bne.n	8005dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a2f      	ldr	r2, [pc, #188]	; (8005e8c <TIM_Base_SetConfig+0x114>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d02b      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd8:	d027      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a2c      	ldr	r2, [pc, #176]	; (8005e90 <TIM_Base_SetConfig+0x118>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d023      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a2b      	ldr	r2, [pc, #172]	; (8005e94 <TIM_Base_SetConfig+0x11c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d01f      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a2a      	ldr	r2, [pc, #168]	; (8005e98 <TIM_Base_SetConfig+0x120>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d01b      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a29      	ldr	r2, [pc, #164]	; (8005e9c <TIM_Base_SetConfig+0x124>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d017      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a28      	ldr	r2, [pc, #160]	; (8005ea0 <TIM_Base_SetConfig+0x128>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d013      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a27      	ldr	r2, [pc, #156]	; (8005ea4 <TIM_Base_SetConfig+0x12c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00f      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a26      	ldr	r2, [pc, #152]	; (8005ea8 <TIM_Base_SetConfig+0x130>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00b      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a25      	ldr	r2, [pc, #148]	; (8005eac <TIM_Base_SetConfig+0x134>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d007      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a24      	ldr	r2, [pc, #144]	; (8005eb0 <TIM_Base_SetConfig+0x138>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d003      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a23      	ldr	r2, [pc, #140]	; (8005eb4 <TIM_Base_SetConfig+0x13c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d108      	bne.n	8005e3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a0a      	ldr	r2, [pc, #40]	; (8005e8c <TIM_Base_SetConfig+0x114>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_Base_SetConfig+0xf8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a0c      	ldr	r2, [pc, #48]	; (8005e9c <TIM_Base_SetConfig+0x124>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d103      	bne.n	8005e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	615a      	str	r2, [r3, #20]
}
 8005e7e:	bf00      	nop
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40010000 	.word	0x40010000
 8005e90:	40000400 	.word	0x40000400
 8005e94:	40000800 	.word	0x40000800
 8005e98:	40000c00 	.word	0x40000c00
 8005e9c:	40010400 	.word	0x40010400
 8005ea0:	40014000 	.word	0x40014000
 8005ea4:	40014400 	.word	0x40014400
 8005ea8:	40014800 	.word	0x40014800
 8005eac:	40001800 	.word	0x40001800
 8005eb0:	40001c00 	.word	0x40001c00
 8005eb4:	40002000 	.word	0x40002000

08005eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	f023 0201 	bic.w	r2, r3, #1
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0303 	bic.w	r3, r3, #3
 8005eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f023 0302 	bic.w	r3, r3, #2
 8005f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a20      	ldr	r2, [pc, #128]	; (8005f90 <TIM_OC1_SetConfig+0xd8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d003      	beq.n	8005f1c <TIM_OC1_SetConfig+0x64>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a1f      	ldr	r2, [pc, #124]	; (8005f94 <TIM_OC1_SetConfig+0xdc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d10c      	bne.n	8005f36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f023 0308 	bic.w	r3, r3, #8
 8005f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f023 0304 	bic.w	r3, r3, #4
 8005f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a15      	ldr	r2, [pc, #84]	; (8005f90 <TIM_OC1_SetConfig+0xd8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d003      	beq.n	8005f46 <TIM_OC1_SetConfig+0x8e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a14      	ldr	r2, [pc, #80]	; (8005f94 <TIM_OC1_SetConfig+0xdc>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d111      	bne.n	8005f6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	621a      	str	r2, [r3, #32]
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	40010000 	.word	0x40010000
 8005f94:	40010400 	.word	0x40010400

08005f98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f023 0210 	bic.w	r2, r3, #16
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	021b      	lsls	r3, r3, #8
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f023 0320 	bic.w	r3, r3, #32
 8005fe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a22      	ldr	r2, [pc, #136]	; (800607c <TIM_OC2_SetConfig+0xe4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d003      	beq.n	8006000 <TIM_OC2_SetConfig+0x68>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a21      	ldr	r2, [pc, #132]	; (8006080 <TIM_OC2_SetConfig+0xe8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d10d      	bne.n	800601c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a17      	ldr	r2, [pc, #92]	; (800607c <TIM_OC2_SetConfig+0xe4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d003      	beq.n	800602c <TIM_OC2_SetConfig+0x94>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a16      	ldr	r2, [pc, #88]	; (8006080 <TIM_OC2_SetConfig+0xe8>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d113      	bne.n	8006054 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800603a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	4313      	orrs	r3, r2
 8006046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	621a      	str	r2, [r3, #32]
}
 800606e:	bf00      	nop
 8006070:	371c      	adds	r7, #28
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	40010000 	.word	0x40010000
 8006080:	40010400 	.word	0x40010400

08006084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0303 	bic.w	r3, r3, #3
 80060ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	021b      	lsls	r3, r3, #8
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a21      	ldr	r2, [pc, #132]	; (8006164 <TIM_OC3_SetConfig+0xe0>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d003      	beq.n	80060ea <TIM_OC3_SetConfig+0x66>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a20      	ldr	r2, [pc, #128]	; (8006168 <TIM_OC3_SetConfig+0xe4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d10d      	bne.n	8006106 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	021b      	lsls	r3, r3, #8
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a16      	ldr	r2, [pc, #88]	; (8006164 <TIM_OC3_SetConfig+0xe0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d003      	beq.n	8006116 <TIM_OC3_SetConfig+0x92>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a15      	ldr	r2, [pc, #84]	; (8006168 <TIM_OC3_SetConfig+0xe4>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d113      	bne.n	800613e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800611c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	621a      	str	r2, [r3, #32]
}
 8006158:	bf00      	nop
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	40010000 	.word	0x40010000
 8006168:	40010400 	.word	0x40010400

0800616c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	021b      	lsls	r3, r3, #8
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	031b      	lsls	r3, r3, #12
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a12      	ldr	r2, [pc, #72]	; (8006210 <TIM_OC4_SetConfig+0xa4>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d003      	beq.n	80061d4 <TIM_OC4_SetConfig+0x68>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a11      	ldr	r2, [pc, #68]	; (8006214 <TIM_OC4_SetConfig+0xa8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d109      	bne.n	80061e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	019b      	lsls	r3, r3, #6
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	621a      	str	r2, [r3, #32]
}
 8006202:	bf00      	nop
 8006204:	371c      	adds	r7, #28
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40010000 	.word	0x40010000
 8006214:	40010400 	.word	0x40010400

08006218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	f023 0201 	bic.w	r2, r3, #1
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f023 030a 	bic.w	r3, r3, #10
 8006254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006276:	b480      	push	{r7}
 8006278:	b087      	sub	sp, #28
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	f023 0210 	bic.w	r2, r3, #16
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	031b      	lsls	r3, r3, #12
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b085      	sub	sp, #20
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f043 0307 	orr.w	r3, r3, #7
 80062f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	609a      	str	r2, [r3, #8]
}
 8006300:	bf00      	nop
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006326:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	021a      	lsls	r2, r3, #8
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	431a      	orrs	r2, r3
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4313      	orrs	r3, r2
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	609a      	str	r2, [r3, #8]
}
 8006340:	bf00      	nop
 8006342:	371c      	adds	r7, #28
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f003 031f 	and.w	r3, r3, #31
 800635e:	2201      	movs	r2, #1
 8006360:	fa02 f303 	lsl.w	r3, r2, r3
 8006364:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a1a      	ldr	r2, [r3, #32]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	43db      	mvns	r3, r3
 800636e:	401a      	ands	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a1a      	ldr	r2, [r3, #32]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f003 031f 	and.w	r3, r3, #31
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	fa01 f303 	lsl.w	r3, r1, r3
 8006384:	431a      	orrs	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	621a      	str	r2, [r3, #32]
}
 800638a:	bf00      	nop
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
	...

08006398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e05a      	b.n	8006466 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a21      	ldr	r2, [pc, #132]	; (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d022      	beq.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063fc:	d01d      	beq.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a1d      	ldr	r2, [pc, #116]	; (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d018      	beq.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a1b      	ldr	r2, [pc, #108]	; (800647c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d013      	beq.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a1a      	ldr	r2, [pc, #104]	; (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00e      	beq.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a18      	ldr	r2, [pc, #96]	; (8006484 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d009      	beq.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a17      	ldr	r2, [pc, #92]	; (8006488 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d004      	beq.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a15      	ldr	r2, [pc, #84]	; (800648c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d10c      	bne.n	8006454 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	4313      	orrs	r3, r2
 800644a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40010000 	.word	0x40010000
 8006478:	40000400 	.word	0x40000400
 800647c:	40000800 	.word	0x40000800
 8006480:	40000c00 	.word	0x40000c00
 8006484:	40010400 	.word	0x40010400
 8006488:	40014000 	.word	0x40014000
 800648c:	40001800 	.word	0x40001800

08006490 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006490:	b084      	sub	sp, #16
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	f107 001c 	add.w	r0, r7, #28
 800649e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d122      	bne.n	80064ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80064bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d105      	bne.n	80064e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 fac6 	bl	8007a74 <USB_CoreReset>
 80064e8:	4603      	mov	r3, r0
 80064ea:	73fb      	strb	r3, [r7, #15]
 80064ec:	e01a      	b.n	8006524 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 faba 	bl	8007a74 <USB_CoreReset>
 8006500:	4603      	mov	r3, r0
 8006502:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006506:	2b00      	cmp	r3, #0
 8006508:	d106      	bne.n	8006518 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	639a      	str	r2, [r3, #56]	; 0x38
 8006516:	e005      	b.n	8006524 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	2b01      	cmp	r3, #1
 8006528:	d10b      	bne.n	8006542 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f043 0206 	orr.w	r2, r3, #6
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f043 0220 	orr.w	r2, r3, #32
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006542:	7bfb      	ldrb	r3, [r7, #15]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800654e:	b004      	add	sp, #16
 8006550:	4770      	bx	lr
	...

08006554 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	4613      	mov	r3, r2
 8006560:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006562:	79fb      	ldrb	r3, [r7, #7]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d165      	bne.n	8006634 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4a41      	ldr	r2, [pc, #260]	; (8006670 <USB_SetTurnaroundTime+0x11c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d906      	bls.n	800657e <USB_SetTurnaroundTime+0x2a>
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	4a40      	ldr	r2, [pc, #256]	; (8006674 <USB_SetTurnaroundTime+0x120>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d802      	bhi.n	800657e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006578:	230f      	movs	r3, #15
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	e062      	b.n	8006644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	4a3c      	ldr	r2, [pc, #240]	; (8006674 <USB_SetTurnaroundTime+0x120>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d906      	bls.n	8006594 <USB_SetTurnaroundTime+0x40>
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	4a3b      	ldr	r2, [pc, #236]	; (8006678 <USB_SetTurnaroundTime+0x124>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d802      	bhi.n	8006594 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800658e:	230e      	movs	r3, #14
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	e057      	b.n	8006644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	4a38      	ldr	r2, [pc, #224]	; (8006678 <USB_SetTurnaroundTime+0x124>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d906      	bls.n	80065aa <USB_SetTurnaroundTime+0x56>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4a37      	ldr	r2, [pc, #220]	; (800667c <USB_SetTurnaroundTime+0x128>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d802      	bhi.n	80065aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80065a4:	230d      	movs	r3, #13
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	e04c      	b.n	8006644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	4a33      	ldr	r2, [pc, #204]	; (800667c <USB_SetTurnaroundTime+0x128>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d906      	bls.n	80065c0 <USB_SetTurnaroundTime+0x6c>
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	4a32      	ldr	r2, [pc, #200]	; (8006680 <USB_SetTurnaroundTime+0x12c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d802      	bhi.n	80065c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80065ba:	230c      	movs	r3, #12
 80065bc:	617b      	str	r3, [r7, #20]
 80065be:	e041      	b.n	8006644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4a2f      	ldr	r2, [pc, #188]	; (8006680 <USB_SetTurnaroundTime+0x12c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d906      	bls.n	80065d6 <USB_SetTurnaroundTime+0x82>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4a2e      	ldr	r2, [pc, #184]	; (8006684 <USB_SetTurnaroundTime+0x130>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d802      	bhi.n	80065d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80065d0:	230b      	movs	r3, #11
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	e036      	b.n	8006644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	4a2a      	ldr	r2, [pc, #168]	; (8006684 <USB_SetTurnaroundTime+0x130>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d906      	bls.n	80065ec <USB_SetTurnaroundTime+0x98>
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	4a29      	ldr	r2, [pc, #164]	; (8006688 <USB_SetTurnaroundTime+0x134>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d802      	bhi.n	80065ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80065e6:	230a      	movs	r3, #10
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	e02b      	b.n	8006644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	4a26      	ldr	r2, [pc, #152]	; (8006688 <USB_SetTurnaroundTime+0x134>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d906      	bls.n	8006602 <USB_SetTurnaroundTime+0xae>
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	4a25      	ldr	r2, [pc, #148]	; (800668c <USB_SetTurnaroundTime+0x138>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d802      	bhi.n	8006602 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80065fc:	2309      	movs	r3, #9
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	e020      	b.n	8006644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	4a21      	ldr	r2, [pc, #132]	; (800668c <USB_SetTurnaroundTime+0x138>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d906      	bls.n	8006618 <USB_SetTurnaroundTime+0xc4>
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	4a20      	ldr	r2, [pc, #128]	; (8006690 <USB_SetTurnaroundTime+0x13c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d802      	bhi.n	8006618 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006612:	2308      	movs	r3, #8
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	e015      	b.n	8006644 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	4a1d      	ldr	r2, [pc, #116]	; (8006690 <USB_SetTurnaroundTime+0x13c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d906      	bls.n	800662e <USB_SetTurnaroundTime+0xda>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4a1c      	ldr	r2, [pc, #112]	; (8006694 <USB_SetTurnaroundTime+0x140>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d802      	bhi.n	800662e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006628:	2307      	movs	r3, #7
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	e00a      	b.n	8006644 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800662e:	2306      	movs	r3, #6
 8006630:	617b      	str	r3, [r7, #20]
 8006632:	e007      	b.n	8006644 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006634:	79fb      	ldrb	r3, [r7, #7]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d102      	bne.n	8006640 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800663a:	2309      	movs	r3, #9
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	e001      	b.n	8006644 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006640:	2309      	movs	r3, #9
 8006642:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	029b      	lsls	r3, r3, #10
 8006658:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800665c:	431a      	orrs	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	00d8acbf 	.word	0x00d8acbf
 8006674:	00e4e1bf 	.word	0x00e4e1bf
 8006678:	00f423ff 	.word	0x00f423ff
 800667c:	0106737f 	.word	0x0106737f
 8006680:	011a499f 	.word	0x011a499f
 8006684:	01312cff 	.word	0x01312cff
 8006688:	014ca43f 	.word	0x014ca43f
 800668c:	016e35ff 	.word	0x016e35ff
 8006690:	01a6ab1f 	.word	0x01a6ab1f
 8006694:	01e847ff 	.word	0x01e847ff

08006698 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f043 0201 	orr.w	r2, r3, #1
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f023 0201 	bic.w	r2, r3, #1
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d106      	bne.n	8006708 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	60da      	str	r2, [r3, #12]
 8006706:	e00b      	b.n	8006720 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006708:	78fb      	ldrb	r3, [r7, #3]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d106      	bne.n	800671c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	60da      	str	r2, [r3, #12]
 800671a:	e001      	b.n	8006720 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e003      	b.n	8006728 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006720:	2032      	movs	r0, #50	; 0x32
 8006722:	f7fb fd51 	bl	80021c8 <HAL_Delay>

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006730:	b084      	sub	sp, #16
 8006732:	b580      	push	{r7, lr}
 8006734:	b086      	sub	sp, #24
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800673e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800674a:	2300      	movs	r3, #0
 800674c:	613b      	str	r3, [r7, #16]
 800674e:	e009      	b.n	8006764 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	3340      	adds	r3, #64	; 0x40
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	2200      	movs	r2, #0
 800675c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	3301      	adds	r3, #1
 8006762:	613b      	str	r3, [r7, #16]
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	2b0e      	cmp	r3, #14
 8006768:	d9f2      	bls.n	8006750 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800676a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d11c      	bne.n	80067aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800677e:	f043 0302 	orr.w	r3, r3, #2
 8006782:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	639a      	str	r2, [r3, #56]	; 0x38
 80067a8:	e00b      	b.n	80067c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067c8:	461a      	mov	r2, r3
 80067ca:	2300      	movs	r3, #0
 80067cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d4:	4619      	mov	r1, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067dc:	461a      	mov	r2, r3
 80067de:	680b      	ldr	r3, [r1, #0]
 80067e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d10c      	bne.n	8006802 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80067e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d104      	bne.n	80067f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067ee:	2100      	movs	r1, #0
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f949 	bl	8006a88 <USB_SetDevSpeed>
 80067f6:	e008      	b.n	800680a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067f8:	2101      	movs	r1, #1
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f944 	bl	8006a88 <USB_SetDevSpeed>
 8006800:	e003      	b.n	800680a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006802:	2103      	movs	r1, #3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f93f 	bl	8006a88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800680a:	2110      	movs	r1, #16
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f8f3 	bl	80069f8 <USB_FlushTxFifo>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 f911 	bl	8006a44 <USB_FlushRxFifo>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006832:	461a      	mov	r2, r3
 8006834:	2300      	movs	r3, #0
 8006836:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683e:	461a      	mov	r2, r3
 8006840:	2300      	movs	r3, #0
 8006842:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684a:	461a      	mov	r2, r3
 800684c:	2300      	movs	r3, #0
 800684e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006850:	2300      	movs	r3, #0
 8006852:	613b      	str	r3, [r7, #16]
 8006854:	e043      	b.n	80068de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800686c:	d118      	bne.n	80068a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10a      	bne.n	800688a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006880:	461a      	mov	r2, r3
 8006882:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	e013      	b.n	80068b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006896:	461a      	mov	r2, r3
 8006898:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	e008      	b.n	80068b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ac:	461a      	mov	r2, r3
 80068ae:	2300      	movs	r3, #0
 80068b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068be:	461a      	mov	r2, r3
 80068c0:	2300      	movs	r3, #0
 80068c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d0:	461a      	mov	r2, r3
 80068d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	3301      	adds	r3, #1
 80068dc:	613b      	str	r3, [r7, #16]
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d3b7      	bcc.n	8006856 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068e6:	2300      	movs	r3, #0
 80068e8:	613b      	str	r3, [r7, #16]
 80068ea:	e043      	b.n	8006974 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006902:	d118      	bne.n	8006936 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10a      	bne.n	8006920 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006916:	461a      	mov	r2, r3
 8006918:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	e013      	b.n	8006948 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692c:	461a      	mov	r2, r3
 800692e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	e008      	b.n	8006948 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006942:	461a      	mov	r2, r3
 8006944:	2300      	movs	r3, #0
 8006946:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006954:	461a      	mov	r2, r3
 8006956:	2300      	movs	r3, #0
 8006958:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006966:	461a      	mov	r2, r3
 8006968:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800696c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	3301      	adds	r3, #1
 8006972:	613b      	str	r3, [r7, #16]
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	429a      	cmp	r2, r3
 800697a:	d3b7      	bcc.n	80068ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800698a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800698e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800699c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d105      	bne.n	80069b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	f043 0210 	orr.w	r2, r3, #16
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	699a      	ldr	r2, [r3, #24]
 80069b4:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <USB_DevInit+0x2c4>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d005      	beq.n	80069ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f043 0208 	orr.w	r2, r3, #8
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d107      	bne.n	80069e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069dc:	f043 0304 	orr.w	r3, r3, #4
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069f0:	b004      	add	sp, #16
 80069f2:	4770      	bx	lr
 80069f4:	803c3800 	.word	0x803c3800

080069f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	019b      	lsls	r3, r3, #6
 8006a0a:	f043 0220 	orr.w	r2, r3, #32
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3301      	adds	r3, #1
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4a09      	ldr	r2, [pc, #36]	; (8006a40 <USB_FlushTxFifo+0x48>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d901      	bls.n	8006a24 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e006      	b.n	8006a32 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	f003 0320 	and.w	r3, r3, #32
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	d0f0      	beq.n	8006a12 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	00030d40 	.word	0x00030d40

08006a44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2210      	movs	r2, #16
 8006a54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4a09      	ldr	r2, [pc, #36]	; (8006a84 <USB_FlushRxFifo+0x40>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d901      	bls.n	8006a68 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e006      	b.n	8006a76 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	f003 0310 	and.w	r3, r3, #16
 8006a70:	2b10      	cmp	r3, #16
 8006a72:	d0f0      	beq.n	8006a56 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	00030d40 	.word	0x00030d40

08006a88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	68f9      	ldr	r1, [r7, #12]
 8006aa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b087      	sub	sp, #28
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f003 0306 	and.w	r3, r3, #6
 8006ad2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d102      	bne.n	8006ae0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006ada:	2300      	movs	r3, #0
 8006adc:	75fb      	strb	r3, [r7, #23]
 8006ade:	e00a      	b.n	8006af6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d002      	beq.n	8006aec <USB_GetDevSpeed+0x32>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b06      	cmp	r3, #6
 8006aea:	d102      	bne.n	8006af2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006aec:	2302      	movs	r3, #2
 8006aee:	75fb      	strb	r3, [r7, #23]
 8006af0:	e001      	b.n	8006af6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006af2:	230f      	movs	r3, #15
 8006af4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	371c      	adds	r7, #28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	785b      	ldrb	r3, [r3, #1]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d13a      	bne.n	8006b96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b26:	69da      	ldr	r2, [r3, #28]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	f003 030f 	and.w	r3, r3, #15
 8006b30:	2101      	movs	r1, #1
 8006b32:	fa01 f303 	lsl.w	r3, r1, r3
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	68f9      	ldr	r1, [r7, #12]
 8006b3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d155      	bne.n	8006c04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	78db      	ldrb	r3, [r3, #3]
 8006b72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	059b      	lsls	r3, r3, #22
 8006b7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	0151      	lsls	r1, r2, #5
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	440a      	add	r2, r1
 8006b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	e036      	b.n	8006c04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9c:	69da      	ldr	r2, [r3, #28]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	f003 030f 	and.w	r3, r3, #15
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bac:	041b      	lsls	r3, r3, #16
 8006bae:	68f9      	ldr	r1, [r7, #12]
 8006bb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d11a      	bne.n	8006c04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	78db      	ldrb	r3, [r3, #3]
 8006be8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bea:	430b      	orrs	r3, r1
 8006bec:	4313      	orrs	r3, r2
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	0151      	lsls	r1, r2, #5
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
	...

08006c14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	785b      	ldrb	r3, [r3, #1]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d161      	bne.n	8006cf4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c46:	d11f      	bne.n	8006c88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	0151      	lsls	r1, r2, #5
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	440a      	add	r2, r1
 8006c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	0151      	lsls	r1, r2, #5
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	440a      	add	r2, r1
 8006c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	f003 030f 	and.w	r3, r3, #15
 8006c98:	2101      	movs	r1, #1
 8006c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	43db      	mvns	r3, r3
 8006ca2:	68f9      	ldr	r1, [r7, #12]
 8006ca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ca8:	4013      	ands	r3, r2
 8006caa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb2:	69da      	ldr	r2, [r3, #28]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	f003 030f 	and.w	r3, r3, #15
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	43db      	mvns	r3, r3
 8006cc6:	68f9      	ldr	r1, [r7, #12]
 8006cc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ccc:	4013      	ands	r3, r2
 8006cce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	0159      	lsls	r1, r3, #5
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	440b      	add	r3, r1
 8006ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cea:	4619      	mov	r1, r3
 8006cec:	4b35      	ldr	r3, [pc, #212]	; (8006dc4 <USB_DeactivateEndpoint+0x1b0>)
 8006cee:	4013      	ands	r3, r2
 8006cf0:	600b      	str	r3, [r1, #0]
 8006cf2:	e060      	b.n	8006db6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d0a:	d11f      	bne.n	8006d4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	0151      	lsls	r1, r2, #5
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	440a      	add	r2, r1
 8006d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	f003 030f 	and.w	r3, r3, #15
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d62:	041b      	lsls	r3, r3, #16
 8006d64:	43db      	mvns	r3, r3
 8006d66:	68f9      	ldr	r1, [r7, #12]
 8006d68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d76:	69da      	ldr	r2, [r3, #28]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	2101      	movs	r1, #1
 8006d82:	fa01 f303 	lsl.w	r3, r1, r3
 8006d86:	041b      	lsls	r3, r3, #16
 8006d88:	43db      	mvns	r3, r3
 8006d8a:	68f9      	ldr	r1, [r7, #12]
 8006d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d90:	4013      	ands	r3, r2
 8006d92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	0159      	lsls	r1, r3, #5
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	440b      	add	r3, r1
 8006daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dae:	4619      	mov	r1, r3
 8006db0:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <USB_DeactivateEndpoint+0x1b4>)
 8006db2:	4013      	ands	r3, r2
 8006db4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	ec337800 	.word	0xec337800
 8006dc8:	eff37800 	.word	0xeff37800

08006dcc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08a      	sub	sp, #40	; 0x28
 8006dd0:	af02      	add	r7, sp, #8
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	f040 815c 	bne.w	80070a6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d132      	bne.n	8006e5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	0151      	lsls	r1, r2, #5
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	440a      	add	r2, r1
 8006e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	0151      	lsls	r1, r2, #5
 8006e2c:	69fa      	ldr	r2, [r7, #28]
 8006e2e:	440a      	add	r2, r1
 8006e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	0151      	lsls	r1, r2, #5
 8006e4c:	69fa      	ldr	r2, [r7, #28]
 8006e4e:	440a      	add	r2, r1
 8006e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e54:	0cdb      	lsrs	r3, r3, #19
 8006e56:	04db      	lsls	r3, r3, #19
 8006e58:	6113      	str	r3, [r2, #16]
 8006e5a:	e074      	b.n	8006f46 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	0151      	lsls	r1, r2, #5
 8006e6e:	69fa      	ldr	r2, [r7, #28]
 8006e70:	440a      	add	r2, r1
 8006e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e76:	0cdb      	lsrs	r3, r3, #19
 8006e78:	04db      	lsls	r3, r3, #19
 8006e7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	0151      	lsls	r1, r2, #5
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	440a      	add	r2, r1
 8006e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eac:	691a      	ldr	r2, [r3, #16]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	6959      	ldr	r1, [r3, #20]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	440b      	add	r3, r1
 8006eb8:	1e59      	subs	r1, r3, #1
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ec2:	04d9      	lsls	r1, r3, #19
 8006ec4:	4b9d      	ldr	r3, [pc, #628]	; (800713c <USB_EPStartXfer+0x370>)
 8006ec6:	400b      	ands	r3, r1
 8006ec8:	69b9      	ldr	r1, [r7, #24]
 8006eca:	0148      	lsls	r0, r1, #5
 8006ecc:	69f9      	ldr	r1, [r7, #28]
 8006ece:	4401      	add	r1, r0
 8006ed0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee4:	691a      	ldr	r2, [r3, #16]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eee:	69b9      	ldr	r1, [r7, #24]
 8006ef0:	0148      	lsls	r0, r1, #5
 8006ef2:	69f9      	ldr	r1, [r7, #28]
 8006ef4:	4401      	add	r1, r0
 8006ef6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006efa:	4313      	orrs	r3, r2
 8006efc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	78db      	ldrb	r3, [r3, #3]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d11f      	bne.n	8006f46 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	0151      	lsls	r1, r2, #5
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	440a      	add	r2, r1
 8006f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006f24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	0151      	lsls	r1, r2, #5
 8006f38:	69fa      	ldr	r2, [r7, #28]
 8006f3a:	440a      	add	r2, r1
 8006f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f44:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006f46:	79fb      	ldrb	r3, [r7, #7]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d14b      	bne.n	8006fe4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d009      	beq.n	8006f68 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f60:	461a      	mov	r2, r3
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	78db      	ldrb	r3, [r3, #3]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d128      	bne.n	8006fc2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d110      	bne.n	8006fa2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	0151      	lsls	r1, r2, #5
 8006f92:	69fa      	ldr	r2, [r7, #28]
 8006f94:	440a      	add	r2, r1
 8006f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	e00f      	b.n	8006fc2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	0151      	lsls	r1, r2, #5
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	440a      	add	r2, r1
 8006fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	0151      	lsls	r1, r2, #5
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	440a      	add	r2, r1
 8006fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	e12f      	b.n	8007244 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	69ba      	ldr	r2, [r7, #24]
 8006ff4:	0151      	lsls	r1, r2, #5
 8006ff6:	69fa      	ldr	r2, [r7, #28]
 8006ff8:	440a      	add	r2, r1
 8006ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ffe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007002:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	78db      	ldrb	r3, [r3, #3]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d015      	beq.n	8007038 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 8117 	beq.w	8007244 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	2101      	movs	r1, #1
 8007028:	fa01 f303 	lsl.w	r3, r1, r3
 800702c:	69f9      	ldr	r1, [r7, #28]
 800702e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007032:	4313      	orrs	r3, r2
 8007034:	634b      	str	r3, [r1, #52]	; 0x34
 8007036:	e105      	b.n	8007244 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007044:	2b00      	cmp	r3, #0
 8007046:	d110      	bne.n	800706a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	0151      	lsls	r1, r2, #5
 800705a:	69fa      	ldr	r2, [r7, #28]
 800705c:	440a      	add	r2, r1
 800705e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007062:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	e00f      	b.n	800708a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	0151      	lsls	r1, r2, #5
 800707c:	69fa      	ldr	r2, [r7, #28]
 800707e:	440a      	add	r2, r1
 8007080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007088:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	68d9      	ldr	r1, [r3, #12]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	781a      	ldrb	r2, [r3, #0]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	b298      	uxth	r0, r3
 8007098:	79fb      	ldrb	r3, [r7, #7]
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	4603      	mov	r3, r0
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 fa2b 	bl	80074fa <USB_WritePacket>
 80070a4:	e0ce      	b.n	8007244 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	0151      	lsls	r1, r2, #5
 80070b8:	69fa      	ldr	r2, [r7, #28]
 80070ba:	440a      	add	r2, r1
 80070bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c0:	0cdb      	lsrs	r3, r3, #19
 80070c2:	04db      	lsls	r3, r3, #19
 80070c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	0151      	lsls	r1, r2, #5
 80070d8:	69fa      	ldr	r2, [r7, #28]
 80070da:	440a      	add	r2, r1
 80070dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d126      	bne.n	8007140 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fe:	691a      	ldr	r2, [r3, #16]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007108:	69b9      	ldr	r1, [r7, #24]
 800710a:	0148      	lsls	r0, r1, #5
 800710c:	69f9      	ldr	r1, [r7, #28]
 800710e:	4401      	add	r1, r0
 8007110:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007114:	4313      	orrs	r3, r2
 8007116:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	69fa      	ldr	r2, [r7, #28]
 800712c:	440a      	add	r2, r1
 800712e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007132:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007136:	6113      	str	r3, [r2, #16]
 8007138:	e036      	b.n	80071a8 <USB_EPStartXfer+0x3dc>
 800713a:	bf00      	nop
 800713c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	695a      	ldr	r2, [r3, #20]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	4413      	add	r3, r2
 800714a:	1e5a      	subs	r2, r3, #1
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	fbb2 f3f3 	udiv	r3, r2, r3
 8007154:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	4413      	add	r3, r2
 800715e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007162:	691a      	ldr	r2, [r3, #16]
 8007164:	8afb      	ldrh	r3, [r7, #22]
 8007166:	04d9      	lsls	r1, r3, #19
 8007168:	4b39      	ldr	r3, [pc, #228]	; (8007250 <USB_EPStartXfer+0x484>)
 800716a:	400b      	ands	r3, r1
 800716c:	69b9      	ldr	r1, [r7, #24]
 800716e:	0148      	lsls	r0, r1, #5
 8007170:	69f9      	ldr	r1, [r7, #28]
 8007172:	4401      	add	r1, r0
 8007174:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007178:	4313      	orrs	r3, r2
 800717a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007188:	691a      	ldr	r2, [r3, #16]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	8af9      	ldrh	r1, [r7, #22]
 8007190:	fb01 f303 	mul.w	r3, r1, r3
 8007194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007198:	69b9      	ldr	r1, [r7, #24]
 800719a:	0148      	lsls	r0, r1, #5
 800719c:	69f9      	ldr	r1, [r7, #28]
 800719e:	4401      	add	r1, r0
 80071a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071a4:	4313      	orrs	r3, r2
 80071a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80071a8:	79fb      	ldrb	r3, [r7, #7]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d10d      	bne.n	80071ca <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d009      	beq.n	80071ca <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	68d9      	ldr	r1, [r3, #12]
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c6:	460a      	mov	r2, r1
 80071c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	78db      	ldrb	r3, [r3, #3]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d128      	bne.n	8007224 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d110      	bne.n	8007204 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	0151      	lsls	r1, r2, #5
 80071f4:	69fa      	ldr	r2, [r7, #28]
 80071f6:	440a      	add	r2, r1
 80071f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	e00f      	b.n	8007224 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	0151      	lsls	r1, r2, #5
 8007216:	69fa      	ldr	r2, [r7, #28]
 8007218:	440a      	add	r2, r1
 800721a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800721e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007222:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	0151      	lsls	r1, r2, #5
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	440a      	add	r2, r1
 800723a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800723e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007242:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3720      	adds	r7, #32
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	1ff80000 	.word	0x1ff80000

08007254 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	4613      	mov	r3, r2
 8007260:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	2b01      	cmp	r3, #1
 8007272:	f040 80cd 	bne.w	8007410 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d132      	bne.n	80072e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	0151      	lsls	r1, r2, #5
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	440a      	add	r2, r1
 8007294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007298:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800729c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	0151      	lsls	r1, r2, #5
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	440a      	add	r2, r1
 80072b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	0151      	lsls	r1, r2, #5
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	440a      	add	r2, r1
 80072d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072dc:	0cdb      	lsrs	r3, r3, #19
 80072de:	04db      	lsls	r3, r3, #19
 80072e0:	6113      	str	r3, [r2, #16]
 80072e2:	e04e      	b.n	8007382 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	0151      	lsls	r1, r2, #5
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	440a      	add	r2, r1
 80072fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072fe:	0cdb      	lsrs	r3, r3, #19
 8007300:	04db      	lsls	r3, r3, #19
 8007302:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	0151      	lsls	r1, r2, #5
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	440a      	add	r2, r1
 800731a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800731e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007322:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007326:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	695a      	ldr	r2, [r3, #20]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	429a      	cmp	r2, r3
 8007332:	d903      	bls.n	800733c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	689a      	ldr	r2, [r3, #8]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	0151      	lsls	r1, r2, #5
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	440a      	add	r2, r1
 8007352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800735a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007368:	691a      	ldr	r2, [r3, #16]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007372:	6939      	ldr	r1, [r7, #16]
 8007374:	0148      	lsls	r0, r1, #5
 8007376:	6979      	ldr	r1, [r7, #20]
 8007378:	4401      	add	r1, r0
 800737a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800737e:	4313      	orrs	r3, r2
 8007380:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007382:	79fb      	ldrb	r3, [r7, #7]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d11e      	bne.n	80073c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d009      	beq.n	80073a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	4413      	add	r3, r2
 8007398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739c:	461a      	mov	r2, r3
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	0151      	lsls	r1, r2, #5
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	440a      	add	r2, r1
 80073ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	e092      	b.n	80074ec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	0151      	lsls	r1, r2, #5
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	440a      	add	r2, r1
 80073dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d07e      	beq.n	80074ec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	f003 030f 	and.w	r3, r3, #15
 80073fe:	2101      	movs	r1, #1
 8007400:	fa01 f303 	lsl.w	r3, r1, r3
 8007404:	6979      	ldr	r1, [r7, #20]
 8007406:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800740a:	4313      	orrs	r3, r2
 800740c:	634b      	str	r3, [r1, #52]	; 0x34
 800740e:	e06d      	b.n	80074ec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	440a      	add	r2, r1
 8007426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800742a:	0cdb      	lsrs	r3, r3, #19
 800742c:	04db      	lsls	r3, r3, #19
 800742e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	0151      	lsls	r1, r2, #5
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	440a      	add	r2, r1
 8007446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800744a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800744e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007452:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	0151      	lsls	r1, r2, #5
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	440a      	add	r2, r1
 800747a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800747e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007482:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007490:	691a      	ldr	r2, [r3, #16]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800749a:	6939      	ldr	r1, [r7, #16]
 800749c:	0148      	lsls	r0, r1, #5
 800749e:	6979      	ldr	r1, [r7, #20]
 80074a0:	4401      	add	r1, r0
 80074a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074a6:	4313      	orrs	r3, r2
 80074a8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80074aa:	79fb      	ldrb	r3, [r7, #7]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d10d      	bne.n	80074cc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d009      	beq.n	80074cc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	68d9      	ldr	r1, [r3, #12]
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c8:	460a      	mov	r2, r1
 80074ca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	0151      	lsls	r1, r2, #5
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	440a      	add	r2, r1
 80074e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b089      	sub	sp, #36	; 0x24
 80074fe:	af00      	add	r7, sp, #0
 8007500:	60f8      	str	r0, [r7, #12]
 8007502:	60b9      	str	r1, [r7, #8]
 8007504:	4611      	mov	r1, r2
 8007506:	461a      	mov	r2, r3
 8007508:	460b      	mov	r3, r1
 800750a:	71fb      	strb	r3, [r7, #7]
 800750c:	4613      	mov	r3, r2
 800750e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007518:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800751c:	2b00      	cmp	r3, #0
 800751e:	d11a      	bne.n	8007556 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007520:	88bb      	ldrh	r3, [r7, #4]
 8007522:	3303      	adds	r3, #3
 8007524:	089b      	lsrs	r3, r3, #2
 8007526:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007528:	2300      	movs	r3, #0
 800752a:	61bb      	str	r3, [r7, #24]
 800752c:	e00f      	b.n	800754e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	031a      	lsls	r2, r3, #12
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	4413      	add	r3, r2
 8007536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753a:	461a      	mov	r2, r3
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	3304      	adds	r3, #4
 8007546:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	3301      	adds	r3, #1
 800754c:	61bb      	str	r3, [r7, #24]
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	429a      	cmp	r2, r3
 8007554:	d3eb      	bcc.n	800752e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3724      	adds	r7, #36	; 0x24
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007564:	b480      	push	{r7}
 8007566:	b089      	sub	sp, #36	; 0x24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	4613      	mov	r3, r2
 8007570:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800757a:	88fb      	ldrh	r3, [r7, #6]
 800757c:	3303      	adds	r3, #3
 800757e:	089b      	lsrs	r3, r3, #2
 8007580:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007582:	2300      	movs	r3, #0
 8007584:	61bb      	str	r3, [r7, #24]
 8007586:	e00b      	b.n	80075a0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	601a      	str	r2, [r3, #0]
    pDest++;
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	3304      	adds	r3, #4
 8007598:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	3301      	adds	r3, #1
 800759e:	61bb      	str	r3, [r7, #24]
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d3ef      	bcc.n	8007588 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80075a8:	69fb      	ldr	r3, [r7, #28]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3724      	adds	r7, #36	; 0x24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b085      	sub	sp, #20
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d12c      	bne.n	800762c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	db12      	blt.n	800760a <USB_EPSetStall+0x54>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00f      	beq.n	800760a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	0151      	lsls	r1, r2, #5
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	440a      	add	r2, r1
 8007600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007604:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007608:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	0151      	lsls	r1, r2, #5
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	440a      	add	r2, r1
 8007620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007624:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007628:	6013      	str	r3, [r2, #0]
 800762a:	e02b      	b.n	8007684 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	db12      	blt.n	8007664 <USB_EPSetStall+0xae>
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00f      	beq.n	8007664 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	0151      	lsls	r1, r2, #5
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	440a      	add	r2, r1
 800765a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800765e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007662:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	0151      	lsls	r1, r2, #5
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	440a      	add	r2, r1
 800767a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800767e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007682:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007692:	b480      	push	{r7}
 8007694:	b085      	sub	sp, #20
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	785b      	ldrb	r3, [r3, #1]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d128      	bne.n	8007700 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	0151      	lsls	r1, r2, #5
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	440a      	add	r2, r1
 80076c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	78db      	ldrb	r3, [r3, #3]
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d003      	beq.n	80076de <USB_EPClearStall+0x4c>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	78db      	ldrb	r3, [r3, #3]
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d138      	bne.n	8007750 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076fc:	6013      	str	r3, [r2, #0]
 80076fe:	e027      	b.n	8007750 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	0151      	lsls	r1, r2, #5
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	440a      	add	r2, r1
 8007716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800771a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800771e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	78db      	ldrb	r3, [r3, #3]
 8007724:	2b03      	cmp	r3, #3
 8007726:	d003      	beq.n	8007730 <USB_EPClearStall+0x9e>
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	78db      	ldrb	r3, [r3, #3]
 800772c:	2b02      	cmp	r3, #2
 800772e:	d10f      	bne.n	8007750 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	0151      	lsls	r1, r2, #5
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	440a      	add	r2, r1
 8007746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800774a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800774e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800775e:	b480      	push	{r7}
 8007760:	b085      	sub	sp, #20
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800777c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007780:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	78fb      	ldrb	r3, [r7, #3]
 800778c:	011b      	lsls	r3, r3, #4
 800778e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007792:	68f9      	ldr	r1, [r7, #12]
 8007794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007798:	4313      	orrs	r3, r2
 800779a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077c4:	f023 0303 	bic.w	r3, r3, #3
 80077c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077d8:	f023 0302 	bic.w	r3, r3, #2
 80077dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007806:	f023 0303 	bic.w	r3, r3, #3
 800780a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800781a:	f043 0302 	orr.w	r3, r3, #2
 800781e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800782e:	b480      	push	{r7}
 8007830:	b085      	sub	sp, #20
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	4013      	ands	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007846:	68fb      	ldr	r3, [r7, #12]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	4013      	ands	r3, r2
 8007876:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	0c1b      	lsrs	r3, r3, #16
}
 800787c:	4618      	mov	r0, r3
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	4013      	ands	r3, r2
 80078aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	b29b      	uxth	r3, r3
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078cc:	78fb      	ldrb	r3, [r7, #3]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	4013      	ands	r3, r2
 80078e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078ea:	68bb      	ldr	r3, [r7, #8]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800791c:	78fb      	ldrb	r3, [r7, #3]
 800791e:	f003 030f 	and.w	r3, r3, #15
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	fa22 f303 	lsr.w	r3, r2, r3
 8007928:	01db      	lsls	r3, r3, #7
 800792a:	b2db      	uxtb	r3, r3
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	4313      	orrs	r3, r2
 8007930:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007932:	78fb      	ldrb	r3, [r7, #3]
 8007934:	015a      	lsls	r2, r3, #5
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	4413      	add	r3, r2
 800793a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	4013      	ands	r3, r2
 8007944:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007946:	68bb      	ldr	r3, [r7, #8]
}
 8007948:	4618      	mov	r0, r3
 800794a:	371c      	adds	r7, #28
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	f003 0301 	and.w	r3, r3, #1
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800798a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800798e:	f023 0307 	bic.w	r3, r3, #7
 8007992:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
	...

080079b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	460b      	mov	r3, r1
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	333c      	adds	r3, #60	; 0x3c
 80079ce:	3304      	adds	r3, #4
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4a26      	ldr	r2, [pc, #152]	; (8007a70 <USB_EP0_OutStart+0xb8>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d90a      	bls.n	80079f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079ec:	d101      	bne.n	80079f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e037      	b.n	8007a62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f8:	461a      	mov	r2, r3
 80079fa:	2300      	movs	r3, #0
 80079fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a20:	f043 0318 	orr.w	r3, r3, #24
 8007a24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a34:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007a38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a3a:	7afb      	ldrb	r3, [r7, #11]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d10f      	bne.n	8007a60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a46:	461a      	mov	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a5a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007a5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	4f54300a 	.word	0x4f54300a

08007a74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	3301      	adds	r3, #1
 8007a84:	60fb      	str	r3, [r7, #12]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	4a13      	ldr	r2, [pc, #76]	; (8007ad8 <USB_CoreReset+0x64>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d901      	bls.n	8007a92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e01b      	b.n	8007aca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	daf2      	bge.n	8007a80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	f043 0201 	orr.w	r2, r3, #1
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3301      	adds	r3, #1
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4a09      	ldr	r2, [pc, #36]	; (8007ad8 <USB_CoreReset+0x64>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d901      	bls.n	8007abc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e006      	b.n	8007aca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d0f0      	beq.n	8007aaa <USB_CoreReset+0x36>

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	00030d40 	.word	0x00030d40

08007adc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ae8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007aec:	f002 f92c 	bl	8009d48 <malloc>
 8007af0:	4603      	mov	r3, r0
 8007af2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d105      	bne.n	8007b06 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007b02:	2302      	movs	r3, #2
 8007b04:	e066      	b.n	8007bd4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	7c1b      	ldrb	r3, [r3, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d119      	bne.n	8007b4a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	2181      	movs	r1, #129	; 0x81
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 ff99 	bl	8009a56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b2e:	2202      	movs	r2, #2
 8007b30:	2101      	movs	r1, #1
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f001 ff8f 	bl	8009a56 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2210      	movs	r2, #16
 8007b44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007b48:	e016      	b.n	8007b78 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b4a:	2340      	movs	r3, #64	; 0x40
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	2181      	movs	r1, #129	; 0x81
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 ff80 	bl	8009a56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b5c:	2340      	movs	r3, #64	; 0x40
 8007b5e:	2202      	movs	r2, #2
 8007b60:	2101      	movs	r1, #1
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f001 ff77 	bl	8009a56 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2210      	movs	r2, #16
 8007b74:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b78:	2308      	movs	r3, #8
 8007b7a:	2203      	movs	r2, #3
 8007b7c:	2182      	movs	r1, #130	; 0x82
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 ff69 	bl	8009a56 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	7c1b      	ldrb	r3, [r3, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d109      	bne.n	8007bc2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bb8:	2101      	movs	r1, #1
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f002 f83a 	bl	8009c34 <USBD_LL_PrepareReceive>
 8007bc0:	e007      	b.n	8007bd2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bc8:	2340      	movs	r3, #64	; 0x40
 8007bca:	2101      	movs	r1, #1
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f002 f831 	bl	8009c34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007be8:	2300      	movs	r3, #0
 8007bea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007bec:	2181      	movs	r1, #129	; 0x81
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f001 ff57 	bl	8009aa2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f001 ff50 	bl	8009aa2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007c0a:	2182      	movs	r1, #130	; 0x82
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f001 ff48 	bl	8009aa2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00e      	beq.n	8007c4a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f002 f88b 	bl	8009d58 <free>
    pdev->pClassData = NULL;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c64:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d03a      	beq.n	8007cf4 <USBD_CDC_Setup+0xa0>
 8007c7e:	2b20      	cmp	r3, #32
 8007c80:	f040 8097 	bne.w	8007db2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	88db      	ldrh	r3, [r3, #6]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d029      	beq.n	8007ce0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	b25b      	sxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	da11      	bge.n	8007cba <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007ca2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	88d2      	ldrh	r2, [r2, #6]
 8007ca8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007caa:	6939      	ldr	r1, [r7, #16]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	88db      	ldrh	r3, [r3, #6]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 fa9d 	bl	80091f2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007cb8:	e082      	b.n	8007dc0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	785a      	ldrb	r2, [r3, #1]
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	88db      	ldrh	r3, [r3, #6]
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007cd0:	6939      	ldr	r1, [r7, #16]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	88db      	ldrh	r3, [r3, #6]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f001 fab6 	bl	800924a <USBD_CtlPrepareRx>
    break;
 8007cde:	e06f      	b.n	8007dc0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	683a      	ldr	r2, [r7, #0]
 8007cea:	7850      	ldrb	r0, [r2, #1]
 8007cec:	2200      	movs	r2, #0
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	4798      	blx	r3
    break;
 8007cf2:	e065      	b.n	8007dc0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	785b      	ldrb	r3, [r3, #1]
 8007cf8:	2b0b      	cmp	r3, #11
 8007cfa:	d84f      	bhi.n	8007d9c <USBD_CDC_Setup+0x148>
 8007cfc:	a201      	add	r2, pc, #4	; (adr r2, 8007d04 <USBD_CDC_Setup+0xb0>)
 8007cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d02:	bf00      	nop
 8007d04:	08007d35 	.word	0x08007d35
 8007d08:	08007dab 	.word	0x08007dab
 8007d0c:	08007d9d 	.word	0x08007d9d
 8007d10:	08007d9d 	.word	0x08007d9d
 8007d14:	08007d9d 	.word	0x08007d9d
 8007d18:	08007d9d 	.word	0x08007d9d
 8007d1c:	08007d9d 	.word	0x08007d9d
 8007d20:	08007d9d 	.word	0x08007d9d
 8007d24:	08007d9d 	.word	0x08007d9d
 8007d28:	08007d9d 	.word	0x08007d9d
 8007d2c:	08007d5d 	.word	0x08007d5d
 8007d30:	08007d85 	.word	0x08007d85
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d107      	bne.n	8007d4e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d3e:	f107 030c 	add.w	r3, r7, #12
 8007d42:	2202      	movs	r2, #2
 8007d44:	4619      	mov	r1, r3
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f001 fa53 	bl	80091f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007d4c:	e030      	b.n	8007db0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 f9dd 	bl	8009110 <USBD_CtlError>
        ret = USBD_FAIL;
 8007d56:	2303      	movs	r3, #3
 8007d58:	75fb      	strb	r3, [r7, #23]
      break;
 8007d5a:	e029      	b.n	8007db0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d107      	bne.n	8007d76 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d66:	f107 030f 	add.w	r3, r7, #15
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f001 fa3f 	bl	80091f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007d74:	e01c      	b.n	8007db0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f001 f9c9 	bl	8009110 <USBD_CtlError>
        ret = USBD_FAIL;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	75fb      	strb	r3, [r7, #23]
      break;
 8007d82:	e015      	b.n	8007db0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d00f      	beq.n	8007dae <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f001 f9bd 	bl	8009110 <USBD_CtlError>
        ret = USBD_FAIL;
 8007d96:	2303      	movs	r3, #3
 8007d98:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007d9a:	e008      	b.n	8007dae <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f001 f9b6 	bl	8009110 <USBD_CtlError>
      ret = USBD_FAIL;
 8007da4:	2303      	movs	r3, #3
 8007da6:	75fb      	strb	r3, [r7, #23]
      break;
 8007da8:	e002      	b.n	8007db0 <USBD_CDC_Setup+0x15c>
      break;
 8007daa:	bf00      	nop
 8007dac:	e008      	b.n	8007dc0 <USBD_CDC_Setup+0x16c>
      break;
 8007dae:	bf00      	nop
    }
    break;
 8007db0:	e006      	b.n	8007dc0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f001 f9ab 	bl	8009110 <USBD_CtlError>
    ret = USBD_FAIL;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	75fb      	strb	r3, [r7, #23]
    break;
 8007dbe:	bf00      	nop
  }

  return (uint8_t)ret;
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3718      	adds	r7, #24
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop

08007dcc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e049      	b.n	8007e82 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007df4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007df6:	78fa      	ldrb	r2, [r7, #3]
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	440b      	add	r3, r1
 8007e04:	3318      	adds	r3, #24
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d029      	beq.n	8007e60 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e0c:	78fa      	ldrb	r2, [r7, #3]
 8007e0e:	6879      	ldr	r1, [r7, #4]
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	440b      	add	r3, r1
 8007e1a:	3318      	adds	r3, #24
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	78f9      	ldrb	r1, [r7, #3]
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	460b      	mov	r3, r1
 8007e24:	00db      	lsls	r3, r3, #3
 8007e26:	1a5b      	subs	r3, r3, r1
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4403      	add	r3, r0
 8007e2c:	3344      	adds	r3, #68	; 0x44
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e34:	fb03 f301 	mul.w	r3, r3, r1
 8007e38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d110      	bne.n	8007e60 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007e3e:	78fa      	ldrb	r2, [r7, #3]
 8007e40:	6879      	ldr	r1, [r7, #4]
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	440b      	add	r3, r1
 8007e4c:	3318      	adds	r3, #24
 8007e4e:	2200      	movs	r2, #0
 8007e50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e52:	78f9      	ldrb	r1, [r7, #3]
 8007e54:	2300      	movs	r3, #0
 8007e56:	2200      	movs	r2, #0
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f001 feca 	bl	8009bf2 <USBD_LL_Transmit>
 8007e5e:	e00f      	b.n	8007e80 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007e7c:	78fa      	ldrb	r2, [r7, #3]
 8007e7e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e9c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e015      	b.n	8007ed8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f001 fee0 	bl	8009c76 <USBD_LL_GetRxDataSize>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d015      	beq.n	8007f26 <USBD_CDC_EP0_RxReady+0x46>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f00:	2bff      	cmp	r3, #255	; 0xff
 8007f02:	d010      	beq.n	8007f26 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007f12:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f1a:	b292      	uxth	r2, r2
 8007f1c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	22ff      	movs	r2, #255	; 0xff
 8007f22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2243      	movs	r2, #67	; 0x43
 8007f3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007f3e:	4b03      	ldr	r3, [pc, #12]	; (8007f4c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	20000094 	.word	0x20000094

08007f50 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2243      	movs	r2, #67	; 0x43
 8007f5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007f5e:	4b03      	ldr	r3, [pc, #12]	; (8007f6c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	20000050 	.word	0x20000050

08007f70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2243      	movs	r2, #67	; 0x43
 8007f7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007f7e:	4b03      	ldr	r3, [pc, #12]	; (8007f8c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	200000d8 	.word	0x200000d8

08007f90 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	220a      	movs	r2, #10
 8007f9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007f9e:	4b03      	ldr	r3, [pc, #12]	; (8007fac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	2000000c 	.word	0x2000000c

08007fb0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e004      	b.n	8007fce <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b087      	sub	sp, #28
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	60f8      	str	r0, [r7, #12]
 8007fe2:	60b9      	str	r1, [r7, #8]
 8007fe4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	371c      	adds	r7, #28
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800801c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008042:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008044:	2301      	movs	r3, #1
 8008046:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008052:	2303      	movs	r3, #3
 8008054:	e01a      	b.n	800808c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800805c:	2b00      	cmp	r3, #0
 800805e:	d114      	bne.n	800808a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2201      	movs	r2, #1
 8008064:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800807e:	2181      	movs	r1, #129	; 0x81
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 fdb6 	bl	8009bf2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800808a:	7bfb      	ldrb	r3, [r7, #15]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e016      	b.n	80080e0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	7c1b      	ldrb	r3, [r3, #16]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d109      	bne.n	80080ce <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080c4:	2101      	movs	r1, #1
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f001 fdb4 	bl	8009c34 <USBD_LL_PrepareReceive>
 80080cc:	e007      	b.n	80080de <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080d4:	2340      	movs	r3, #64	; 0x40
 80080d6:	2101      	movs	r1, #1
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f001 fdab 	bl	8009c34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	4613      	mov	r3, r2
 80080f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e025      	b.n	800814c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008118:	2b00      	cmp	r3, #0
 800811a:	d003      	beq.n	8008124 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	79fa      	ldrb	r2, [r7, #7]
 800813e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f001 fc21 	bl	8009988 <USBD_LL_Init>
 8008146:	4603      	mov	r3, r0
 8008148:	75fb      	strb	r3, [r7, #23]

  return ret;
 800814a:	7dfb      	ldrb	r3, [r7, #23]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800815e:	2300      	movs	r3, #0
 8008160:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008168:	2303      	movs	r3, #3
 800816a:	e010      	b.n	800818e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800817a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817c:	f107 020e 	add.w	r2, r7, #14
 8008180:	4610      	mov	r0, r2
 8008182:	4798      	blx	r3
 8008184:	4602      	mov	r2, r0
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b082      	sub	sp, #8
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f001 fc3e 	bl	8009a20 <USBD_LL_Start>
 80081a4:	4603      	mov	r3, r0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b083      	sub	sp, #12
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80081d0:	2303      	movs	r3, #3
 80081d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d009      	beq.n	80081f2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	78fa      	ldrb	r2, [r7, #3]
 80081e8:	4611      	mov	r1, r2
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
 80081ee:	4603      	mov	r3, r0
 80081f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800820e:	2b00      	cmp	r3, #0
 8008210:	d007      	beq.n	8008222 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	78fa      	ldrb	r2, [r7, #3]
 800821c:	4611      	mov	r1, r2
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	4798      	blx	r3
  }

  return USBD_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	4618      	mov	r0, r3
 8008240:	f000 ff2c 	bl	800909c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008252:	461a      	mov	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008260:	f003 031f 	and.w	r3, r3, #31
 8008264:	2b01      	cmp	r3, #1
 8008266:	d00e      	beq.n	8008286 <USBD_LL_SetupStage+0x5a>
 8008268:	2b01      	cmp	r3, #1
 800826a:	d302      	bcc.n	8008272 <USBD_LL_SetupStage+0x46>
 800826c:	2b02      	cmp	r3, #2
 800826e:	d014      	beq.n	800829a <USBD_LL_SetupStage+0x6e>
 8008270:	e01d      	b.n	80082ae <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fa18 	bl	80086b0 <USBD_StdDevReq>
 8008280:	4603      	mov	r3, r0
 8008282:	73fb      	strb	r3, [r7, #15]
      break;
 8008284:	e020      	b.n	80082c8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800828c:	4619      	mov	r1, r3
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fa7c 	bl	800878c <USBD_StdItfReq>
 8008294:	4603      	mov	r3, r0
 8008296:	73fb      	strb	r3, [r7, #15]
      break;
 8008298:	e016      	b.n	80082c8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082a0:	4619      	mov	r1, r3
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fab8 	bl	8008818 <USBD_StdEPReq>
 80082a8:	4603      	mov	r3, r0
 80082aa:	73fb      	strb	r3, [r7, #15]
      break;
 80082ac:	e00c      	b.n	80082c8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 fc0f 	bl	8009ae0 <USBD_LL_StallEP>
 80082c2:	4603      	mov	r3, r0
 80082c4:	73fb      	strb	r3, [r7, #15]
      break;
 80082c6:	bf00      	nop
  }

  return ret;
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b086      	sub	sp, #24
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	460b      	mov	r3, r1
 80082dc:	607a      	str	r2, [r7, #4]
 80082de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80082e0:	7afb      	ldrb	r3, [r7, #11]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d137      	bne.n	8008356 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80082ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d14a      	bne.n	800838e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	689a      	ldr	r2, [r3, #8]
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	429a      	cmp	r2, r3
 8008302:	d913      	bls.n	800832c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	689a      	ldr	r2, [r3, #8]
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	1ad2      	subs	r2, r2, r3
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	68da      	ldr	r2, [r3, #12]
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	4293      	cmp	r3, r2
 800831c:	bf28      	it	cs
 800831e:	4613      	movcs	r3, r2
 8008320:	461a      	mov	r2, r3
 8008322:	6879      	ldr	r1, [r7, #4]
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 ffad 	bl	8009284 <USBD_CtlContinueRx>
 800832a:	e030      	b.n	800838e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00a      	beq.n	800834e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800833e:	2b03      	cmp	r3, #3
 8008340:	d105      	bne.n	800834e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 ffa9 	bl	80092a6 <USBD_CtlSendStatus>
 8008354:	e01b      	b.n	800838e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d013      	beq.n	800838a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008368:	2b03      	cmp	r3, #3
 800836a:	d10e      	bne.n	800838a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	7afa      	ldrb	r2, [r7, #11]
 8008376:	4611      	mov	r1, r2
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	4798      	blx	r3
 800837c:	4603      	mov	r3, r0
 800837e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008380:	7dfb      	ldrb	r3, [r7, #23]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d003      	beq.n	800838e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008386:	7dfb      	ldrb	r3, [r7, #23]
 8008388:	e002      	b.n	8008390 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800838a:	2303      	movs	r3, #3
 800838c:	e000      	b.n	8008390 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	460b      	mov	r3, r1
 80083a2:	607a      	str	r2, [r7, #4]
 80083a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80083a6:	7afb      	ldrb	r3, [r7, #11]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d16a      	bne.n	8008482 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3314      	adds	r3, #20
 80083b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d155      	bne.n	8008468 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	689a      	ldr	r2, [r3, #8]
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d914      	bls.n	80083f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	689a      	ldr	r2, [r3, #8]
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	1ad2      	subs	r2, r2, r3
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	461a      	mov	r2, r3
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 ff22 	bl	8009228 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083e4:	2300      	movs	r3, #0
 80083e6:	2200      	movs	r2, #0
 80083e8:	2100      	movs	r1, #0
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f001 fc22 	bl	8009c34 <USBD_LL_PrepareReceive>
 80083f0:	e03a      	b.n	8008468 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d11c      	bne.n	8008438 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008406:	429a      	cmp	r2, r3
 8008408:	d316      	bcc.n	8008438 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008414:	429a      	cmp	r2, r3
 8008416:	d20f      	bcs.n	8008438 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008418:	2200      	movs	r2, #0
 800841a:	2100      	movs	r1, #0
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f000 ff03 	bl	8009228 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800842a:	2300      	movs	r3, #0
 800842c:	2200      	movs	r2, #0
 800842e:	2100      	movs	r1, #0
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f001 fbff 	bl	8009c34 <USBD_LL_PrepareReceive>
 8008436:	e017      	b.n	8008468 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00a      	beq.n	800845a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800844a:	2b03      	cmp	r3, #3
 800844c:	d105      	bne.n	800845a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800845a:	2180      	movs	r1, #128	; 0x80
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f001 fb3f 	bl	8009ae0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 ff32 	bl	80092cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800846e:	2b01      	cmp	r3, #1
 8008470:	d123      	bne.n	80084ba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f7ff fe9b 	bl	80081ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008480:	e01b      	b.n	80084ba <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d013      	beq.n	80084b6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008494:	2b03      	cmp	r3, #3
 8008496:	d10e      	bne.n	80084b6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	7afa      	ldrb	r2, [r7, #11]
 80084a2:	4611      	mov	r1, r2
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	4798      	blx	r3
 80084a8:	4603      	mov	r3, r0
 80084aa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80084ac:	7dfb      	ldrb	r3, [r7, #23]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d003      	beq.n	80084ba <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80084b2:	7dfb      	ldrb	r3, [r7, #23]
 80084b4:	e002      	b.n	80084bc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e000      	b.n	80084bc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d009      	beq.n	8008508 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	6852      	ldr	r2, [r2, #4]
 8008500:	b2d2      	uxtb	r2, r2
 8008502:	4611      	mov	r1, r2
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008508:	2340      	movs	r3, #64	; 0x40
 800850a:	2200      	movs	r2, #0
 800850c:	2100      	movs	r1, #0
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f001 faa1 	bl	8009a56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2240      	movs	r2, #64	; 0x40
 8008520:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008524:	2340      	movs	r3, #64	; 0x40
 8008526:	2200      	movs	r2, #0
 8008528:	2180      	movs	r1, #128	; 0x80
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f001 fa93 	bl	8009a56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2240      	movs	r2, #64	; 0x40
 800853a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008546:	b480      	push	{r7}
 8008548:	b083      	sub	sp, #12
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	460b      	mov	r3, r1
 8008550:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	78fa      	ldrb	r2, [r7, #3]
 8008556:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008566:	b480      	push	{r7}
 8008568:	b083      	sub	sp, #12
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2204      	movs	r2, #4
 800857e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800859e:	2b04      	cmp	r3, #4
 80085a0:	d105      	bne.n	80085ae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d10b      	bne.n	80085e6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d005      	beq.n	80085e6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800860a:	b480      	push	{r7}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	460b      	mov	r3, r1
 8008614:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b082      	sub	sp, #8
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008650:	2b00      	cmp	r3, #0
 8008652:	d009      	beq.n	8008668 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	6852      	ldr	r2, [r2, #4]
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	4611      	mov	r1, r2
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	4798      	blx	r3
  }

  return USBD_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008672:	b480      	push	{r7}
 8008674:	b087      	sub	sp, #28
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	3301      	adds	r3, #1
 8008688:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008690:	8a3b      	ldrh	r3, [r7, #16]
 8008692:	021b      	lsls	r3, r3, #8
 8008694:	b21a      	sxth	r2, r3
 8008696:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800869a:	4313      	orrs	r3, r2
 800869c:	b21b      	sxth	r3, r3
 800869e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80086a0:	89fb      	ldrh	r3, [r7, #14]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	371c      	adds	r7, #28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
	...

080086b0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086c6:	2b20      	cmp	r3, #32
 80086c8:	d004      	beq.n	80086d4 <USBD_StdDevReq+0x24>
 80086ca:	2b40      	cmp	r3, #64	; 0x40
 80086cc:	d002      	beq.n	80086d4 <USBD_StdDevReq+0x24>
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <USBD_StdDevReq+0x38>
 80086d2:	e050      	b.n	8008776 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	4798      	blx	r3
 80086e2:	4603      	mov	r3, r0
 80086e4:	73fb      	strb	r3, [r7, #15]
    break;
 80086e6:	e04b      	b.n	8008780 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	785b      	ldrb	r3, [r3, #1]
 80086ec:	2b09      	cmp	r3, #9
 80086ee:	d83c      	bhi.n	800876a <USBD_StdDevReq+0xba>
 80086f0:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <USBD_StdDevReq+0x48>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	0800874d 	.word	0x0800874d
 80086fc:	08008761 	.word	0x08008761
 8008700:	0800876b 	.word	0x0800876b
 8008704:	08008757 	.word	0x08008757
 8008708:	0800876b 	.word	0x0800876b
 800870c:	0800872b 	.word	0x0800872b
 8008710:	08008721 	.word	0x08008721
 8008714:	0800876b 	.word	0x0800876b
 8008718:	08008743 	.word	0x08008743
 800871c:	08008735 	.word	0x08008735
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f9ce 	bl	8008ac4 <USBD_GetDescriptor>
      break;
 8008728:	e024      	b.n	8008774 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 fb33 	bl	8008d98 <USBD_SetAddress>
      break;
 8008732:	e01f      	b.n	8008774 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fb70 	bl	8008e1c <USBD_SetConfig>
 800873c:	4603      	mov	r3, r0
 800873e:	73fb      	strb	r3, [r7, #15]
      break;
 8008740:	e018      	b.n	8008774 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fc0d 	bl	8008f64 <USBD_GetConfig>
      break;
 800874a:	e013      	b.n	8008774 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fc3c 	bl	8008fcc <USBD_GetStatus>
      break;
 8008754:	e00e      	b.n	8008774 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fc6a 	bl	8009032 <USBD_SetFeature>
      break;
 800875e:	e009      	b.n	8008774 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fc79 	bl	800905a <USBD_ClrFeature>
      break;
 8008768:	e004      	b.n	8008774 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fccf 	bl	8009110 <USBD_CtlError>
      break;
 8008772:	bf00      	nop
    }
    break;
 8008774:	e004      	b.n	8008780 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fcc9 	bl	8009110 <USBD_CtlError>
    break;
 800877e:	bf00      	nop
  }

  return ret;
 8008780:	7bfb      	ldrb	r3, [r7, #15]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop

0800878c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087a2:	2b20      	cmp	r3, #32
 80087a4:	d003      	beq.n	80087ae <USBD_StdItfReq+0x22>
 80087a6:	2b40      	cmp	r3, #64	; 0x40
 80087a8:	d001      	beq.n	80087ae <USBD_StdItfReq+0x22>
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d12a      	bne.n	8008804 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b4:	3b01      	subs	r3, #1
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d81d      	bhi.n	80087f6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	889b      	ldrh	r3, [r3, #4]
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d813      	bhi.n	80087ec <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	4798      	blx	r3
 80087d2:	4603      	mov	r3, r0
 80087d4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	88db      	ldrh	r3, [r3, #6]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d110      	bne.n	8008800 <USBD_StdItfReq+0x74>
 80087de:	7bfb      	ldrb	r3, [r7, #15]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10d      	bne.n	8008800 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fd5e 	bl	80092a6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80087ea:	e009      	b.n	8008800 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fc8e 	bl	8009110 <USBD_CtlError>
      break;
 80087f4:	e004      	b.n	8008800 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fc89 	bl	8009110 <USBD_CtlError>
      break;
 80087fe:	e000      	b.n	8008802 <USBD_StdItfReq+0x76>
      break;
 8008800:	bf00      	nop
    }
    break;
 8008802:	e004      	b.n	800880e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fc82 	bl	8009110 <USBD_CtlError>
    break;
 800880c:	bf00      	nop
  }

  return ret;
 800880e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	889b      	ldrh	r3, [r3, #4]
 800882a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008834:	2b20      	cmp	r3, #32
 8008836:	d004      	beq.n	8008842 <USBD_StdEPReq+0x2a>
 8008838:	2b40      	cmp	r3, #64	; 0x40
 800883a:	d002      	beq.n	8008842 <USBD_StdEPReq+0x2a>
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00a      	beq.n	8008856 <USBD_StdEPReq+0x3e>
 8008840:	e135      	b.n	8008aae <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	4798      	blx	r3
 8008850:	4603      	mov	r3, r0
 8008852:	73fb      	strb	r3, [r7, #15]
    break;
 8008854:	e130      	b.n	8008ab8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	785b      	ldrb	r3, [r3, #1]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d03e      	beq.n	80088dc <USBD_StdEPReq+0xc4>
 800885e:	2b03      	cmp	r3, #3
 8008860:	d002      	beq.n	8008868 <USBD_StdEPReq+0x50>
 8008862:	2b00      	cmp	r3, #0
 8008864:	d077      	beq.n	8008956 <USBD_StdEPReq+0x13e>
 8008866:	e11c      	b.n	8008aa2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800886e:	2b02      	cmp	r3, #2
 8008870:	d002      	beq.n	8008878 <USBD_StdEPReq+0x60>
 8008872:	2b03      	cmp	r3, #3
 8008874:	d015      	beq.n	80088a2 <USBD_StdEPReq+0x8a>
 8008876:	e02b      	b.n	80088d0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008878:	7bbb      	ldrb	r3, [r7, #14]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00c      	beq.n	8008898 <USBD_StdEPReq+0x80>
 800887e:	7bbb      	ldrb	r3, [r7, #14]
 8008880:	2b80      	cmp	r3, #128	; 0x80
 8008882:	d009      	beq.n	8008898 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008884:	7bbb      	ldrb	r3, [r7, #14]
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 f929 	bl	8009ae0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800888e:	2180      	movs	r1, #128	; 0x80
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f001 f925 	bl	8009ae0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008896:	e020      	b.n	80088da <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fc38 	bl	8009110 <USBD_CtlError>
        break;
 80088a0:	e01b      	b.n	80088da <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	885b      	ldrh	r3, [r3, #2]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10e      	bne.n	80088c8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00b      	beq.n	80088c8 <USBD_StdEPReq+0xb0>
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	2b80      	cmp	r3, #128	; 0x80
 80088b4:	d008      	beq.n	80088c8 <USBD_StdEPReq+0xb0>
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	88db      	ldrh	r3, [r3, #6]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d104      	bne.n	80088c8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80088be:	7bbb      	ldrb	r3, [r7, #14]
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f001 f90c 	bl	8009ae0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fcec 	bl	80092a6 <USBD_CtlSendStatus>

        break;
 80088ce:	e004      	b.n	80088da <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fc1c 	bl	8009110 <USBD_CtlError>
        break;
 80088d8:	bf00      	nop
      }
      break;
 80088da:	e0e7      	b.n	8008aac <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d002      	beq.n	80088ec <USBD_StdEPReq+0xd4>
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	d015      	beq.n	8008916 <USBD_StdEPReq+0xfe>
 80088ea:	e02d      	b.n	8008948 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00c      	beq.n	800890c <USBD_StdEPReq+0xf4>
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	2b80      	cmp	r3, #128	; 0x80
 80088f6:	d009      	beq.n	800890c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80088f8:	7bbb      	ldrb	r3, [r7, #14]
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 f8ef 	bl	8009ae0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008902:	2180      	movs	r1, #128	; 0x80
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f001 f8eb 	bl	8009ae0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800890a:	e023      	b.n	8008954 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fbfe 	bl	8009110 <USBD_CtlError>
        break;
 8008914:	e01e      	b.n	8008954 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	885b      	ldrh	r3, [r3, #2]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d119      	bne.n	8008952 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800891e:	7bbb      	ldrb	r3, [r7, #14]
 8008920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008924:	2b00      	cmp	r3, #0
 8008926:	d004      	beq.n	8008932 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008928:	7bbb      	ldrb	r3, [r7, #14]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 f8f6 	bl	8009b1e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fcb7 	bl	80092a6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3
        }
        break;
 8008946:	e004      	b.n	8008952 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fbe0 	bl	8009110 <USBD_CtlError>
        break;
 8008950:	e000      	b.n	8008954 <USBD_StdEPReq+0x13c>
        break;
 8008952:	bf00      	nop
      }
      break;
 8008954:	e0aa      	b.n	8008aac <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800895c:	2b02      	cmp	r3, #2
 800895e:	d002      	beq.n	8008966 <USBD_StdEPReq+0x14e>
 8008960:	2b03      	cmp	r3, #3
 8008962:	d032      	beq.n	80089ca <USBD_StdEPReq+0x1b2>
 8008964:	e097      	b.n	8008a96 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d007      	beq.n	800897c <USBD_StdEPReq+0x164>
 800896c:	7bbb      	ldrb	r3, [r7, #14]
 800896e:	2b80      	cmp	r3, #128	; 0x80
 8008970:	d004      	beq.n	800897c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fbcb 	bl	8009110 <USBD_CtlError>
          break;
 800897a:	e091      	b.n	8008aa0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800897c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008980:	2b00      	cmp	r3, #0
 8008982:	da0b      	bge.n	800899c <USBD_StdEPReq+0x184>
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	3310      	adds	r3, #16
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	4413      	add	r3, r2
 8008998:	3304      	adds	r3, #4
 800899a:	e00b      	b.n	80089b4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089a2:	4613      	mov	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4413      	add	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	4413      	add	r3, r2
 80089b2:	3304      	adds	r3, #4
 80089b4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2200      	movs	r2, #0
 80089ba:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2202      	movs	r2, #2
 80089c0:	4619      	mov	r1, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fc15 	bl	80091f2 <USBD_CtlSendData>
        break;
 80089c8:	e06a      	b.n	8008aa0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80089ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	da11      	bge.n	80089f6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	f003 020f 	and.w	r2, r3, #15
 80089d8:	6879      	ldr	r1, [r7, #4]
 80089da:	4613      	mov	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	440b      	add	r3, r1
 80089e4:	3324      	adds	r3, #36	; 0x24
 80089e6:	881b      	ldrh	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d117      	bne.n	8008a1c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fb8e 	bl	8009110 <USBD_CtlError>
            break;
 80089f4:	e054      	b.n	8008aa0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	f003 020f 	and.w	r2, r3, #15
 80089fc:	6879      	ldr	r1, [r7, #4]
 80089fe:	4613      	mov	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	440b      	add	r3, r1
 8008a08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a0c:	881b      	ldrh	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d104      	bne.n	8008a1c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fb7b 	bl	8009110 <USBD_CtlError>
            break;
 8008a1a:	e041      	b.n	8008aa0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	da0b      	bge.n	8008a3c <USBD_StdEPReq+0x224>
 8008a24:	7bbb      	ldrb	r3, [r7, #14]
 8008a26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	3310      	adds	r3, #16
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	4413      	add	r3, r2
 8008a38:	3304      	adds	r3, #4
 8008a3a:	e00b      	b.n	8008a54 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
 8008a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a42:	4613      	mov	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	4413      	add	r3, r2
 8008a52:	3304      	adds	r3, #4
 8008a54:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <USBD_StdEPReq+0x24a>
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	2b80      	cmp	r3, #128	; 0x80
 8008a60:	d103      	bne.n	8008a6a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	2200      	movs	r2, #0
 8008a66:	601a      	str	r2, [r3, #0]
 8008a68:	e00e      	b.n	8008a88 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f001 f874 	bl	8009b5c <USBD_LL_IsStallEP>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	601a      	str	r2, [r3, #0]
 8008a80:	e002      	b.n	8008a88 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fbaf 	bl	80091f2 <USBD_CtlSendData>
          break;
 8008a94:	e004      	b.n	8008aa0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fb39 	bl	8009110 <USBD_CtlError>
        break;
 8008a9e:	bf00      	nop
      }
      break;
 8008aa0:	e004      	b.n	8008aac <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fb33 	bl	8009110 <USBD_CtlError>
      break;
 8008aaa:	bf00      	nop
    }
    break;
 8008aac:	e004      	b.n	8008ab8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fb2d 	bl	8009110 <USBD_CtlError>
    break;
 8008ab6:	bf00      	nop
  }

  return ret;
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
	...

08008ac4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	885b      	ldrh	r3, [r3, #2]
 8008ade:	0a1b      	lsrs	r3, r3, #8
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	2b06      	cmp	r3, #6
 8008ae6:	f200 8128 	bhi.w	8008d3a <USBD_GetDescriptor+0x276>
 8008aea:	a201      	add	r2, pc, #4	; (adr r2, 8008af0 <USBD_GetDescriptor+0x2c>)
 8008aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af0:	08008b0d 	.word	0x08008b0d
 8008af4:	08008b25 	.word	0x08008b25
 8008af8:	08008b65 	.word	0x08008b65
 8008afc:	08008d3b 	.word	0x08008d3b
 8008b00:	08008d3b 	.word	0x08008d3b
 8008b04:	08008cdb 	.word	0x08008cdb
 8008b08:	08008d07 	.word	0x08008d07
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	7c12      	ldrb	r2, [r2, #16]
 8008b18:	f107 0108 	add.w	r1, r7, #8
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	4798      	blx	r3
 8008b20:	60f8      	str	r0, [r7, #12]
    break;
 8008b22:	e112      	b.n	8008d4a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	7c1b      	ldrb	r3, [r3, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10d      	bne.n	8008b48 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b34:	f107 0208 	add.w	r2, r7, #8
 8008b38:	4610      	mov	r0, r2
 8008b3a:	4798      	blx	r3
 8008b3c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	3301      	adds	r3, #1
 8008b42:	2202      	movs	r2, #2
 8008b44:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008b46:	e100      	b.n	8008d4a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b50:	f107 0208 	add.w	r2, r7, #8
 8008b54:	4610      	mov	r0, r2
 8008b56:	4798      	blx	r3
 8008b58:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	2202      	movs	r2, #2
 8008b60:	701a      	strb	r2, [r3, #0]
    break;
 8008b62:	e0f2      	b.n	8008d4a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	885b      	ldrh	r3, [r3, #2]
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b05      	cmp	r3, #5
 8008b6c:	f200 80ac 	bhi.w	8008cc8 <USBD_GetDescriptor+0x204>
 8008b70:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <USBD_GetDescriptor+0xb4>)
 8008b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b76:	bf00      	nop
 8008b78:	08008b91 	.word	0x08008b91
 8008b7c:	08008bc5 	.word	0x08008bc5
 8008b80:	08008bf9 	.word	0x08008bf9
 8008b84:	08008c2d 	.word	0x08008c2d
 8008b88:	08008c61 	.word	0x08008c61
 8008b8c:	08008c95 	.word	0x08008c95
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00b      	beq.n	8008bb4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	7c12      	ldrb	r2, [r2, #16]
 8008ba8:	f107 0108 	add.w	r1, r7, #8
 8008bac:	4610      	mov	r0, r2
 8008bae:	4798      	blx	r3
 8008bb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bb2:	e091      	b.n	8008cd8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 faaa 	bl	8009110 <USBD_CtlError>
        err++;
 8008bbc:	7afb      	ldrb	r3, [r7, #11]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	72fb      	strb	r3, [r7, #11]
      break;
 8008bc2:	e089      	b.n	8008cd8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d00b      	beq.n	8008be8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	7c12      	ldrb	r2, [r2, #16]
 8008bdc:	f107 0108 	add.w	r1, r7, #8
 8008be0:	4610      	mov	r0, r2
 8008be2:	4798      	blx	r3
 8008be4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008be6:	e077      	b.n	8008cd8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fa90 	bl	8009110 <USBD_CtlError>
        err++;
 8008bf0:	7afb      	ldrb	r3, [r7, #11]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	72fb      	strb	r3, [r7, #11]
      break;
 8008bf6:	e06f      	b.n	8008cd8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00b      	beq.n	8008c1c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	7c12      	ldrb	r2, [r2, #16]
 8008c10:	f107 0108 	add.w	r1, r7, #8
 8008c14:	4610      	mov	r0, r2
 8008c16:	4798      	blx	r3
 8008c18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c1a:	e05d      	b.n	8008cd8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fa76 	bl	8009110 <USBD_CtlError>
        err++;
 8008c24:	7afb      	ldrb	r3, [r7, #11]
 8008c26:	3301      	adds	r3, #1
 8008c28:	72fb      	strb	r3, [r7, #11]
      break;
 8008c2a:	e055      	b.n	8008cd8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00b      	beq.n	8008c50 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	7c12      	ldrb	r2, [r2, #16]
 8008c44:	f107 0108 	add.w	r1, r7, #8
 8008c48:	4610      	mov	r0, r2
 8008c4a:	4798      	blx	r3
 8008c4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c4e:	e043      	b.n	8008cd8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fa5c 	bl	8009110 <USBD_CtlError>
        err++;
 8008c58:	7afb      	ldrb	r3, [r7, #11]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	72fb      	strb	r3, [r7, #11]
      break;
 8008c5e:	e03b      	b.n	8008cd8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00b      	beq.n	8008c84 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c72:	695b      	ldr	r3, [r3, #20]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	7c12      	ldrb	r2, [r2, #16]
 8008c78:	f107 0108 	add.w	r1, r7, #8
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	4798      	blx	r3
 8008c80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c82:	e029      	b.n	8008cd8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fa42 	bl	8009110 <USBD_CtlError>
        err++;
 8008c8c:	7afb      	ldrb	r3, [r7, #11]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	72fb      	strb	r3, [r7, #11]
      break;
 8008c92:	e021      	b.n	8008cd8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00b      	beq.n	8008cb8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	7c12      	ldrb	r2, [r2, #16]
 8008cac:	f107 0108 	add.w	r1, r7, #8
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4798      	blx	r3
 8008cb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cb6:	e00f      	b.n	8008cd8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fa28 	bl	8009110 <USBD_CtlError>
        err++;
 8008cc0:	7afb      	ldrb	r3, [r7, #11]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	72fb      	strb	r3, [r7, #11]
      break;
 8008cc6:	e007      	b.n	8008cd8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fa20 	bl	8009110 <USBD_CtlError>
      err++;
 8008cd0:	7afb      	ldrb	r3, [r7, #11]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008cd6:	bf00      	nop
    }
    break;
 8008cd8:	e037      	b.n	8008d4a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	7c1b      	ldrb	r3, [r3, #16]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d109      	bne.n	8008cf6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cea:	f107 0208 	add.w	r2, r7, #8
 8008cee:	4610      	mov	r0, r2
 8008cf0:	4798      	blx	r3
 8008cf2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008cf4:	e029      	b.n	8008d4a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fa09 	bl	8009110 <USBD_CtlError>
      err++;
 8008cfe:	7afb      	ldrb	r3, [r7, #11]
 8008d00:	3301      	adds	r3, #1
 8008d02:	72fb      	strb	r3, [r7, #11]
    break;
 8008d04:	e021      	b.n	8008d4a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	7c1b      	ldrb	r3, [r3, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10d      	bne.n	8008d2a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d16:	f107 0208 	add.w	r2, r7, #8
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	4798      	blx	r3
 8008d1e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	3301      	adds	r3, #1
 8008d24:	2207      	movs	r2, #7
 8008d26:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008d28:	e00f      	b.n	8008d4a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f9ef 	bl	8009110 <USBD_CtlError>
      err++;
 8008d32:	7afb      	ldrb	r3, [r7, #11]
 8008d34:	3301      	adds	r3, #1
 8008d36:	72fb      	strb	r3, [r7, #11]
    break;
 8008d38:	e007      	b.n	8008d4a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f9e7 	bl	8009110 <USBD_CtlError>
    err++;
 8008d42:	7afb      	ldrb	r3, [r7, #11]
 8008d44:	3301      	adds	r3, #1
 8008d46:	72fb      	strb	r3, [r7, #11]
    break;
 8008d48:	bf00      	nop
  }

  if (err != 0U)
 8008d4a:	7afb      	ldrb	r3, [r7, #11]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d11e      	bne.n	8008d8e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	88db      	ldrh	r3, [r3, #6]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d016      	beq.n	8008d86 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008d58:	893b      	ldrh	r3, [r7, #8]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00e      	beq.n	8008d7c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	88da      	ldrh	r2, [r3, #6]
 8008d62:	893b      	ldrh	r3, [r7, #8]
 8008d64:	4293      	cmp	r3, r2
 8008d66:	bf28      	it	cs
 8008d68:	4613      	movcs	r3, r2
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d6e:	893b      	ldrh	r3, [r7, #8]
 8008d70:	461a      	mov	r2, r3
 8008d72:	68f9      	ldr	r1, [r7, #12]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fa3c 	bl	80091f2 <USBD_CtlSendData>
 8008d7a:	e009      	b.n	8008d90 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f9c6 	bl	8009110 <USBD_CtlError>
 8008d84:	e004      	b.n	8008d90 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fa8d 	bl	80092a6 <USBD_CtlSendStatus>
 8008d8c:	e000      	b.n	8008d90 <USBD_GetDescriptor+0x2cc>
    return;
 8008d8e:	bf00      	nop
    }
  }
}
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop

08008d98 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	889b      	ldrh	r3, [r3, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d130      	bne.n	8008e0c <USBD_SetAddress+0x74>
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	88db      	ldrh	r3, [r3, #6]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d12c      	bne.n	8008e0c <USBD_SetAddress+0x74>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	885b      	ldrh	r3, [r3, #2]
 8008db6:	2b7f      	cmp	r3, #127	; 0x7f
 8008db8:	d828      	bhi.n	8008e0c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	885b      	ldrh	r3, [r3, #2]
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dc4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dcc:	2b03      	cmp	r3, #3
 8008dce:	d104      	bne.n	8008dda <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f99c 	bl	8009110 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd8:	e01c      	b.n	8008e14 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	7bfa      	ldrb	r2, [r7, #15]
 8008dde:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fee4 	bl	8009bb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fa5a 	bl	80092a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d004      	beq.n	8008e02 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e00:	e008      	b.n	8008e14 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e0a:	e003      	b.n	8008e14 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f97e 	bl	8009110 <USBD_CtlError>
  }
}
 8008e14:	bf00      	nop
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	885b      	ldrh	r3, [r3, #2]
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	4b4b      	ldr	r3, [pc, #300]	; (8008f60 <USBD_SetConfig+0x144>)
 8008e32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e34:	4b4a      	ldr	r3, [pc, #296]	; (8008f60 <USBD_SetConfig+0x144>)
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d905      	bls.n	8008e48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f966 	bl	8009110 <USBD_CtlError>
    return USBD_FAIL;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e087      	b.n	8008f58 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d002      	beq.n	8008e58 <USBD_SetConfig+0x3c>
 8008e52:	2b03      	cmp	r3, #3
 8008e54:	d025      	beq.n	8008ea2 <USBD_SetConfig+0x86>
 8008e56:	e071      	b.n	8008f3c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008e58:	4b41      	ldr	r3, [pc, #260]	; (8008f60 <USBD_SetConfig+0x144>)
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d01c      	beq.n	8008e9a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008e60:	4b3f      	ldr	r3, [pc, #252]	; (8008f60 <USBD_SetConfig+0x144>)
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	461a      	mov	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e6a:	4b3d      	ldr	r3, [pc, #244]	; (8008f60 <USBD_SetConfig+0x144>)
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f7ff f9a7 	bl	80081c4 <USBD_SetClassConfig>
 8008e76:	4603      	mov	r3, r0
 8008e78:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d004      	beq.n	8008e8a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f944 	bl	8009110 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008e88:	e065      	b.n	8008f56 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fa0b 	bl	80092a6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2203      	movs	r2, #3
 8008e94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008e98:	e05d      	b.n	8008f56 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fa03 	bl	80092a6 <USBD_CtlSendStatus>
    break;
 8008ea0:	e059      	b.n	8008f56 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008ea2:	4b2f      	ldr	r3, [pc, #188]	; (8008f60 <USBD_SetConfig+0x144>)
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d112      	bne.n	8008ed0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2202      	movs	r2, #2
 8008eae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008eb2:	4b2b      	ldr	r3, [pc, #172]	; (8008f60 <USBD_SetConfig+0x144>)
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ebc:	4b28      	ldr	r3, [pc, #160]	; (8008f60 <USBD_SetConfig+0x144>)
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff f99a 	bl	80081fc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f9ec 	bl	80092a6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008ece:	e042      	b.n	8008f56 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008ed0:	4b23      	ldr	r3, [pc, #140]	; (8008f60 <USBD_SetConfig+0x144>)
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d02a      	beq.n	8008f34 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7ff f988 	bl	80081fc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008eec:	4b1c      	ldr	r3, [pc, #112]	; (8008f60 <USBD_SetConfig+0x144>)
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ef6:	4b1a      	ldr	r3, [pc, #104]	; (8008f60 <USBD_SetConfig+0x144>)
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff f961 	bl	80081c4 <USBD_SetClassConfig>
 8008f02:	4603      	mov	r3, r0
 8008f04:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00f      	beq.n	8008f2c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f8fe 	bl	8009110 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7ff f96d 	bl	80081fc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2202      	movs	r2, #2
 8008f26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008f2a:	e014      	b.n	8008f56 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f9ba 	bl	80092a6 <USBD_CtlSendStatus>
    break;
 8008f32:	e010      	b.n	8008f56 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f9b6 	bl	80092a6 <USBD_CtlSendStatus>
    break;
 8008f3a:	e00c      	b.n	8008f56 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f8e6 	bl	8009110 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f44:	4b06      	ldr	r3, [pc, #24]	; (8008f60 <USBD_SetConfig+0x144>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7ff f956 	bl	80081fc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008f50:	2303      	movs	r3, #3
 8008f52:	73fb      	strb	r3, [r7, #15]
    break;
 8008f54:	bf00      	nop
  }

  return ret;
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20000370 	.word	0x20000370

08008f64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	88db      	ldrh	r3, [r3, #6]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d004      	beq.n	8008f80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f8c9 	bl	8009110 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008f7e:	e021      	b.n	8008fc4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	db17      	blt.n	8008fba <USBD_GetConfig+0x56>
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	dd02      	ble.n	8008f94 <USBD_GetConfig+0x30>
 8008f8e:	2b03      	cmp	r3, #3
 8008f90:	d00b      	beq.n	8008faa <USBD_GetConfig+0x46>
 8008f92:	e012      	b.n	8008fba <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	3308      	adds	r3, #8
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 f925 	bl	80091f2 <USBD_CtlSendData>
      break;
 8008fa8:	e00c      	b.n	8008fc4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	3304      	adds	r3, #4
 8008fae:	2201      	movs	r2, #1
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f91d 	bl	80091f2 <USBD_CtlSendData>
      break;
 8008fb8:	e004      	b.n	8008fc4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f8a7 	bl	8009110 <USBD_CtlError>
      break;
 8008fc2:	bf00      	nop
}
 8008fc4:	bf00      	nop
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d81e      	bhi.n	8009020 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	88db      	ldrh	r3, [r3, #6]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d004      	beq.n	8008ff4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f88f 	bl	8009110 <USBD_CtlError>
      break;
 8008ff2:	e01a      	b.n	800902a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009000:	2b00      	cmp	r3, #0
 8009002:	d005      	beq.n	8009010 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	f043 0202 	orr.w	r2, r3, #2
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	330c      	adds	r3, #12
 8009014:	2202      	movs	r2, #2
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f8ea 	bl	80091f2 <USBD_CtlSendData>
    break;
 800901e:	e004      	b.n	800902a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f874 	bl	8009110 <USBD_CtlError>
    break;
 8009028:	bf00      	nop
  }
}
 800902a:	bf00      	nop
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b082      	sub	sp, #8
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	885b      	ldrh	r3, [r3, #2]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d106      	bne.n	8009052 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f92a 	bl	80092a6 <USBD_CtlSendStatus>
  }
}
 8009052:	bf00      	nop
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b082      	sub	sp, #8
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800906a:	3b01      	subs	r3, #1
 800906c:	2b02      	cmp	r3, #2
 800906e:	d80b      	bhi.n	8009088 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	885b      	ldrh	r3, [r3, #2]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d10c      	bne.n	8009092 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f910 	bl	80092a6 <USBD_CtlSendStatus>
      }
      break;
 8009086:	e004      	b.n	8009092 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f840 	bl	8009110 <USBD_CtlError>
      break;
 8009090:	e000      	b.n	8009094 <USBD_ClrFeature+0x3a>
      break;
 8009092:	bf00      	nop
  }
}
 8009094:	bf00      	nop
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	781a      	ldrb	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	3301      	adds	r3, #1
 80090b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	781a      	ldrb	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3301      	adds	r3, #1
 80090c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f7ff fad3 	bl	8008672 <SWAPBYTE>
 80090cc:	4603      	mov	r3, r0
 80090ce:	461a      	mov	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	3301      	adds	r3, #1
 80090d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3301      	adds	r3, #1
 80090de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f7ff fac6 	bl	8008672 <SWAPBYTE>
 80090e6:	4603      	mov	r3, r0
 80090e8:	461a      	mov	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3301      	adds	r3, #1
 80090f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	3301      	adds	r3, #1
 80090f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f7ff fab9 	bl	8008672 <SWAPBYTE>
 8009100:	4603      	mov	r3, r0
 8009102:	461a      	mov	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	80da      	strh	r2, [r3, #6]
}
 8009108:	bf00      	nop
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800911a:	2180      	movs	r1, #128	; 0x80
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fcdf 	bl	8009ae0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009122:	2100      	movs	r1, #0
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fcdb 	bl	8009ae0 <USBD_LL_StallEP>
}
 800912a:	bf00      	nop
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b086      	sub	sp, #24
 8009136:	af00      	add	r7, sp, #0
 8009138:	60f8      	str	r0, [r7, #12]
 800913a:	60b9      	str	r1, [r7, #8]
 800913c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d036      	beq.n	80091b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800914c:	6938      	ldr	r0, [r7, #16]
 800914e:	f000 f836 	bl	80091be <USBD_GetLen>
 8009152:	4603      	mov	r3, r0
 8009154:	3301      	adds	r3, #1
 8009156:	b29b      	uxth	r3, r3
 8009158:	005b      	lsls	r3, r3, #1
 800915a:	b29a      	uxth	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009160:	7dfb      	ldrb	r3, [r7, #23]
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	4413      	add	r3, r2
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	7812      	ldrb	r2, [r2, #0]
 800916a:	701a      	strb	r2, [r3, #0]
  idx++;
 800916c:	7dfb      	ldrb	r3, [r7, #23]
 800916e:	3301      	adds	r3, #1
 8009170:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009172:	7dfb      	ldrb	r3, [r7, #23]
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	4413      	add	r3, r2
 8009178:	2203      	movs	r2, #3
 800917a:	701a      	strb	r2, [r3, #0]
  idx++;
 800917c:	7dfb      	ldrb	r3, [r7, #23]
 800917e:	3301      	adds	r3, #1
 8009180:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009182:	e013      	b.n	80091ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009184:	7dfb      	ldrb	r3, [r7, #23]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	4413      	add	r3, r2
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	7812      	ldrb	r2, [r2, #0]
 800918e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	3301      	adds	r3, #1
 8009194:	613b      	str	r3, [r7, #16]
    idx++;
 8009196:	7dfb      	ldrb	r3, [r7, #23]
 8009198:	3301      	adds	r3, #1
 800919a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800919c:	7dfb      	ldrb	r3, [r7, #23]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	4413      	add	r3, r2
 80091a2:	2200      	movs	r2, #0
 80091a4:	701a      	strb	r2, [r3, #0]
    idx++;
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	3301      	adds	r3, #1
 80091aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1e7      	bne.n	8009184 <USBD_GetString+0x52>
 80091b4:	e000      	b.n	80091b8 <USBD_GetString+0x86>
    return;
 80091b6:	bf00      	nop
  }
}
 80091b8:	3718      	adds	r7, #24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80091be:	b480      	push	{r7}
 80091c0:	b085      	sub	sp, #20
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80091c6:	2300      	movs	r3, #0
 80091c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80091ce:	e005      	b.n	80091dc <USBD_GetLen+0x1e>
  {
    len++;
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
 80091d2:	3301      	adds	r3, #1
 80091d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	3301      	adds	r3, #1
 80091da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1f5      	bne.n	80091d0 <USBD_GetLen+0x12>
  }

  return len;
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr

080091f2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b084      	sub	sp, #16
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	60f8      	str	r0, [r7, #12]
 80091fa:	60b9      	str	r1, [r7, #8]
 80091fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2202      	movs	r2, #2
 8009202:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	2100      	movs	r1, #0
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f000 fcea 	bl	8009bf2 <USBD_LL_Transmit>

  return USBD_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	2100      	movs	r1, #0
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f000 fcd9 	bl	8009bf2 <USBD_LL_Transmit>

  return USBD_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b084      	sub	sp, #16
 800924e:	af00      	add	r7, sp, #0
 8009250:	60f8      	str	r0, [r7, #12]
 8009252:	60b9      	str	r1, [r7, #8]
 8009254:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2203      	movs	r2, #3
 800925a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	2100      	movs	r1, #0
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 fcdd 	bl	8009c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	2100      	movs	r1, #0
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f000 fccc 	bl	8009c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b082      	sub	sp, #8
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2204      	movs	r2, #4
 80092b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092b6:	2300      	movs	r3, #0
 80092b8:	2200      	movs	r2, #0
 80092ba:	2100      	movs	r1, #0
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fc98 	bl	8009bf2 <USBD_LL_Transmit>

  return USBD_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2205      	movs	r2, #5
 80092d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092dc:	2300      	movs	r3, #0
 80092de:	2200      	movs	r2, #0
 80092e0:	2100      	movs	r1, #0
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fca6 	bl	8009c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
	...

080092f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80092f8:	2200      	movs	r2, #0
 80092fa:	4912      	ldr	r1, [pc, #72]	; (8009344 <MX_USB_DEVICE_Init+0x50>)
 80092fc:	4812      	ldr	r0, [pc, #72]	; (8009348 <MX_USB_DEVICE_Init+0x54>)
 80092fe:	f7fe fef3 	bl	80080e8 <USBD_Init>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009308:	f7f8 fc66 	bl	8001bd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800930c:	490f      	ldr	r1, [pc, #60]	; (800934c <MX_USB_DEVICE_Init+0x58>)
 800930e:	480e      	ldr	r0, [pc, #56]	; (8009348 <MX_USB_DEVICE_Init+0x54>)
 8009310:	f7fe ff20 	bl	8008154 <USBD_RegisterClass>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d001      	beq.n	800931e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800931a:	f7f8 fc5d 	bl	8001bd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800931e:	490c      	ldr	r1, [pc, #48]	; (8009350 <MX_USB_DEVICE_Init+0x5c>)
 8009320:	4809      	ldr	r0, [pc, #36]	; (8009348 <MX_USB_DEVICE_Init+0x54>)
 8009322:	f7fe fe45 	bl	8007fb0 <USBD_CDC_RegisterInterface>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d001      	beq.n	8009330 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800932c:	f7f8 fc54 	bl	8001bd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009330:	4805      	ldr	r0, [pc, #20]	; (8009348 <MX_USB_DEVICE_Init+0x54>)
 8009332:	f7fe ff30 	bl	8008196 <USBD_Start>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800933c:	f7f8 fc4c 	bl	8001bd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009340:	bf00      	nop
 8009342:	bd80      	pop	{r7, pc}
 8009344:	20000130 	.word	0x20000130
 8009348:	200005b4 	.word	0x200005b4
 800934c:	20000018 	.word	0x20000018
 8009350:	2000011c 	.word	0x2000011c

08009354 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009358:	2200      	movs	r2, #0
 800935a:	4905      	ldr	r1, [pc, #20]	; (8009370 <CDC_Init_FS+0x1c>)
 800935c:	4805      	ldr	r0, [pc, #20]	; (8009374 <CDC_Init_FS+0x20>)
 800935e:	f7fe fe3c 	bl	8007fda <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009362:	4905      	ldr	r1, [pc, #20]	; (8009378 <CDC_Init_FS+0x24>)
 8009364:	4803      	ldr	r0, [pc, #12]	; (8009374 <CDC_Init_FS+0x20>)
 8009366:	f7fe fe51 	bl	800800c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800936a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800936c:	4618      	mov	r0, r3
 800936e:	bd80      	pop	{r7, pc}
 8009370:	20001084 	.word	0x20001084
 8009374:	200005b4 	.word	0x200005b4
 8009378:	20000884 	.word	0x20000884

0800937c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800937c:	b480      	push	{r7}
 800937e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009380:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009382:	4618      	mov	r0, r3
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	4603      	mov	r3, r0
 8009394:	6039      	str	r1, [r7, #0]
 8009396:	71fb      	strb	r3, [r7, #7]
 8009398:	4613      	mov	r3, r2
 800939a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800939c:	79fb      	ldrb	r3, [r7, #7]
 800939e:	2b23      	cmp	r3, #35	; 0x23
 80093a0:	d84a      	bhi.n	8009438 <CDC_Control_FS+0xac>
 80093a2:	a201      	add	r2, pc, #4	; (adr r2, 80093a8 <CDC_Control_FS+0x1c>)
 80093a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a8:	08009439 	.word	0x08009439
 80093ac:	08009439 	.word	0x08009439
 80093b0:	08009439 	.word	0x08009439
 80093b4:	08009439 	.word	0x08009439
 80093b8:	08009439 	.word	0x08009439
 80093bc:	08009439 	.word	0x08009439
 80093c0:	08009439 	.word	0x08009439
 80093c4:	08009439 	.word	0x08009439
 80093c8:	08009439 	.word	0x08009439
 80093cc:	08009439 	.word	0x08009439
 80093d0:	08009439 	.word	0x08009439
 80093d4:	08009439 	.word	0x08009439
 80093d8:	08009439 	.word	0x08009439
 80093dc:	08009439 	.word	0x08009439
 80093e0:	08009439 	.word	0x08009439
 80093e4:	08009439 	.word	0x08009439
 80093e8:	08009439 	.word	0x08009439
 80093ec:	08009439 	.word	0x08009439
 80093f0:	08009439 	.word	0x08009439
 80093f4:	08009439 	.word	0x08009439
 80093f8:	08009439 	.word	0x08009439
 80093fc:	08009439 	.word	0x08009439
 8009400:	08009439 	.word	0x08009439
 8009404:	08009439 	.word	0x08009439
 8009408:	08009439 	.word	0x08009439
 800940c:	08009439 	.word	0x08009439
 8009410:	08009439 	.word	0x08009439
 8009414:	08009439 	.word	0x08009439
 8009418:	08009439 	.word	0x08009439
 800941c:	08009439 	.word	0x08009439
 8009420:	08009439 	.word	0x08009439
 8009424:	08009439 	.word	0x08009439
 8009428:	08009439 	.word	0x08009439
 800942c:	08009439 	.word	0x08009439
 8009430:	08009439 	.word	0x08009439
 8009434:	08009439 	.word	0x08009439
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009438:	bf00      	nop
  }

  return (USBD_OK);
 800943a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800943c:	4618      	mov	r0, r3
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009452:	6879      	ldr	r1, [r7, #4]
 8009454:	4805      	ldr	r0, [pc, #20]	; (800946c <CDC_Receive_FS+0x24>)
 8009456:	f7fe fdd9 	bl	800800c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800945a:	4804      	ldr	r0, [pc, #16]	; (800946c <CDC_Receive_FS+0x24>)
 800945c:	f7fe fe1a 	bl	8008094 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009460:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009462:	4618      	mov	r0, r3
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	200005b4 	.word	0x200005b4

08009470 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	460b      	mov	r3, r1
 800947a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009480:	4b0d      	ldr	r3, [pc, #52]	; (80094b8 <CDC_Transmit_FS+0x48>)
 8009482:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009486:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009492:	2301      	movs	r3, #1
 8009494:	e00b      	b.n	80094ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009496:	887b      	ldrh	r3, [r7, #2]
 8009498:	461a      	mov	r2, r3
 800949a:	6879      	ldr	r1, [r7, #4]
 800949c:	4806      	ldr	r0, [pc, #24]	; (80094b8 <CDC_Transmit_FS+0x48>)
 800949e:	f7fe fd9c 	bl	8007fda <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80094a2:	4805      	ldr	r0, [pc, #20]	; (80094b8 <CDC_Transmit_FS+0x48>)
 80094a4:	f7fe fdc6 	bl	8008034 <USBD_CDC_TransmitPacket>
 80094a8:	4603      	mov	r3, r0
 80094aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	200005b4 	.word	0x200005b4

080094bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80094bc:	b480      	push	{r7}
 80094be:	b087      	sub	sp, #28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	4613      	mov	r3, r2
 80094c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80094ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	371c      	adds	r7, #28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
	...

080094e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	6039      	str	r1, [r7, #0]
 80094ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	2212      	movs	r2, #18
 80094f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094f2:	4b03      	ldr	r3, [pc, #12]	; (8009500 <USBD_FS_DeviceDescriptor+0x20>)
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	2000014c 	.word	0x2000014c

08009504 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	4603      	mov	r3, r0
 800950c:	6039      	str	r1, [r7, #0]
 800950e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2204      	movs	r2, #4
 8009514:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009516:	4b03      	ldr	r3, [pc, #12]	; (8009524 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009518:	4618      	mov	r0, r3
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	20000160 	.word	0x20000160

08009528 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	4603      	mov	r3, r0
 8009530:	6039      	str	r1, [r7, #0]
 8009532:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009534:	79fb      	ldrb	r3, [r7, #7]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d105      	bne.n	8009546 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	4907      	ldr	r1, [pc, #28]	; (800955c <USBD_FS_ProductStrDescriptor+0x34>)
 800953e:	4808      	ldr	r0, [pc, #32]	; (8009560 <USBD_FS_ProductStrDescriptor+0x38>)
 8009540:	f7ff fdf7 	bl	8009132 <USBD_GetString>
 8009544:	e004      	b.n	8009550 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	4904      	ldr	r1, [pc, #16]	; (800955c <USBD_FS_ProductStrDescriptor+0x34>)
 800954a:	4805      	ldr	r0, [pc, #20]	; (8009560 <USBD_FS_ProductStrDescriptor+0x38>)
 800954c:	f7ff fdf1 	bl	8009132 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009550:	4b02      	ldr	r3, [pc, #8]	; (800955c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009552:	4618      	mov	r0, r3
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	20001884 	.word	0x20001884
 8009560:	0800be18 	.word	0x0800be18

08009564 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	4603      	mov	r3, r0
 800956c:	6039      	str	r1, [r7, #0]
 800956e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	4904      	ldr	r1, [pc, #16]	; (8009584 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009574:	4804      	ldr	r0, [pc, #16]	; (8009588 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009576:	f7ff fddc 	bl	8009132 <USBD_GetString>
  return USBD_StrDesc;
 800957a:	4b02      	ldr	r3, [pc, #8]	; (8009584 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800957c:	4618      	mov	r0, r3
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	20001884 	.word	0x20001884
 8009588:	0800be30 	.word	0x0800be30

0800958c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	4603      	mov	r3, r0
 8009594:	6039      	str	r1, [r7, #0]
 8009596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	221a      	movs	r2, #26
 800959c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800959e:	f000 f843 	bl	8009628 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80095a2:	4b02      	ldr	r3, [pc, #8]	; (80095ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3708      	adds	r7, #8
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	20000164 	.word	0x20000164

080095b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	4603      	mov	r3, r0
 80095b8:	6039      	str	r1, [r7, #0]
 80095ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095bc:	79fb      	ldrb	r3, [r7, #7]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d105      	bne.n	80095ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	4907      	ldr	r1, [pc, #28]	; (80095e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095c6:	4808      	ldr	r0, [pc, #32]	; (80095e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095c8:	f7ff fdb3 	bl	8009132 <USBD_GetString>
 80095cc:	e004      	b.n	80095d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	4904      	ldr	r1, [pc, #16]	; (80095e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095d2:	4805      	ldr	r0, [pc, #20]	; (80095e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095d4:	f7ff fdad 	bl	8009132 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095d8:	4b02      	ldr	r3, [pc, #8]	; (80095e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20001884 	.word	0x20001884
 80095e8:	0800be44 	.word	0x0800be44

080095ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	6039      	str	r1, [r7, #0]
 80095f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095f8:	79fb      	ldrb	r3, [r7, #7]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d105      	bne.n	800960a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	4907      	ldr	r1, [pc, #28]	; (8009620 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009602:	4808      	ldr	r0, [pc, #32]	; (8009624 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009604:	f7ff fd95 	bl	8009132 <USBD_GetString>
 8009608:	e004      	b.n	8009614 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	4904      	ldr	r1, [pc, #16]	; (8009620 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800960e:	4805      	ldr	r0, [pc, #20]	; (8009624 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009610:	f7ff fd8f 	bl	8009132 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009614:	4b02      	ldr	r3, [pc, #8]	; (8009620 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	20001884 	.word	0x20001884
 8009624:	0800be50 	.word	0x0800be50

08009628 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800962e:	4b0f      	ldr	r3, [pc, #60]	; (800966c <Get_SerialNum+0x44>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009634:	4b0e      	ldr	r3, [pc, #56]	; (8009670 <Get_SerialNum+0x48>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800963a:	4b0e      	ldr	r3, [pc, #56]	; (8009674 <Get_SerialNum+0x4c>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4413      	add	r3, r2
 8009646:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d009      	beq.n	8009662 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800964e:	2208      	movs	r2, #8
 8009650:	4909      	ldr	r1, [pc, #36]	; (8009678 <Get_SerialNum+0x50>)
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f000 f814 	bl	8009680 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009658:	2204      	movs	r2, #4
 800965a:	4908      	ldr	r1, [pc, #32]	; (800967c <Get_SerialNum+0x54>)
 800965c:	68b8      	ldr	r0, [r7, #8]
 800965e:	f000 f80f 	bl	8009680 <IntToUnicode>
  }
}
 8009662:	bf00      	nop
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	1fff7a10 	.word	0x1fff7a10
 8009670:	1fff7a14 	.word	0x1fff7a14
 8009674:	1fff7a18 	.word	0x1fff7a18
 8009678:	20000166 	.word	0x20000166
 800967c:	20000176 	.word	0x20000176

08009680 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009680:	b480      	push	{r7}
 8009682:	b087      	sub	sp, #28
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	4613      	mov	r3, r2
 800968c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800968e:	2300      	movs	r3, #0
 8009690:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009692:	2300      	movs	r3, #0
 8009694:	75fb      	strb	r3, [r7, #23]
 8009696:	e027      	b.n	80096e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	0f1b      	lsrs	r3, r3, #28
 800969c:	2b09      	cmp	r3, #9
 800969e:	d80b      	bhi.n	80096b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	0f1b      	lsrs	r3, r3, #28
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	7dfb      	ldrb	r3, [r7, #23]
 80096a8:	005b      	lsls	r3, r3, #1
 80096aa:	4619      	mov	r1, r3
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	440b      	add	r3, r1
 80096b0:	3230      	adds	r2, #48	; 0x30
 80096b2:	b2d2      	uxtb	r2, r2
 80096b4:	701a      	strb	r2, [r3, #0]
 80096b6:	e00a      	b.n	80096ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	0f1b      	lsrs	r3, r3, #28
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	7dfb      	ldrb	r3, [r7, #23]
 80096c0:	005b      	lsls	r3, r3, #1
 80096c2:	4619      	mov	r1, r3
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	440b      	add	r3, r1
 80096c8:	3237      	adds	r2, #55	; 0x37
 80096ca:	b2d2      	uxtb	r2, r2
 80096cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	011b      	lsls	r3, r3, #4
 80096d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096d4:	7dfb      	ldrb	r3, [r7, #23]
 80096d6:	005b      	lsls	r3, r3, #1
 80096d8:	3301      	adds	r3, #1
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	4413      	add	r3, r2
 80096de:	2200      	movs	r2, #0
 80096e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	3301      	adds	r3, #1
 80096e6:	75fb      	strb	r3, [r7, #23]
 80096e8:	7dfa      	ldrb	r2, [r7, #23]
 80096ea:	79fb      	ldrb	r3, [r7, #7]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d3d3      	bcc.n	8009698 <IntToUnicode+0x18>
  }
}
 80096f0:	bf00      	nop
 80096f2:	371c      	adds	r7, #28
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b08a      	sub	sp, #40	; 0x28
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009704:	f107 0314 	add.w	r3, r7, #20
 8009708:	2200      	movs	r2, #0
 800970a:	601a      	str	r2, [r3, #0]
 800970c:	605a      	str	r2, [r3, #4]
 800970e:	609a      	str	r2, [r3, #8]
 8009710:	60da      	str	r2, [r3, #12]
 8009712:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800971c:	d13a      	bne.n	8009794 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800971e:	2300      	movs	r3, #0
 8009720:	613b      	str	r3, [r7, #16]
 8009722:	4b1e      	ldr	r3, [pc, #120]	; (800979c <HAL_PCD_MspInit+0xa0>)
 8009724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009726:	4a1d      	ldr	r2, [pc, #116]	; (800979c <HAL_PCD_MspInit+0xa0>)
 8009728:	f043 0301 	orr.w	r3, r3, #1
 800972c:	6313      	str	r3, [r2, #48]	; 0x30
 800972e:	4b1b      	ldr	r3, [pc, #108]	; (800979c <HAL_PCD_MspInit+0xa0>)
 8009730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	613b      	str	r3, [r7, #16]
 8009738:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800973a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800973e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009740:	2302      	movs	r3, #2
 8009742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009744:	2300      	movs	r3, #0
 8009746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009748:	2303      	movs	r3, #3
 800974a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800974c:	230a      	movs	r3, #10
 800974e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009750:	f107 0314 	add.w	r3, r7, #20
 8009754:	4619      	mov	r1, r3
 8009756:	4812      	ldr	r0, [pc, #72]	; (80097a0 <HAL_PCD_MspInit+0xa4>)
 8009758:	f7f9 f9fa 	bl	8002b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800975c:	4b0f      	ldr	r3, [pc, #60]	; (800979c <HAL_PCD_MspInit+0xa0>)
 800975e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009760:	4a0e      	ldr	r2, [pc, #56]	; (800979c <HAL_PCD_MspInit+0xa0>)
 8009762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009766:	6353      	str	r3, [r2, #52]	; 0x34
 8009768:	2300      	movs	r3, #0
 800976a:	60fb      	str	r3, [r7, #12]
 800976c:	4b0b      	ldr	r3, [pc, #44]	; (800979c <HAL_PCD_MspInit+0xa0>)
 800976e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009770:	4a0a      	ldr	r2, [pc, #40]	; (800979c <HAL_PCD_MspInit+0xa0>)
 8009772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009776:	6453      	str	r3, [r2, #68]	; 0x44
 8009778:	4b08      	ldr	r3, [pc, #32]	; (800979c <HAL_PCD_MspInit+0xa0>)
 800977a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800977c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009780:	60fb      	str	r3, [r7, #12]
 8009782:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009784:	2200      	movs	r2, #0
 8009786:	2100      	movs	r1, #0
 8009788:	2043      	movs	r0, #67	; 0x43
 800978a:	f7f8 fe1a 	bl	80023c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800978e:	2043      	movs	r0, #67	; 0x43
 8009790:	f7f8 fe33 	bl	80023fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009794:	bf00      	nop
 8009796:	3728      	adds	r7, #40	; 0x28
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	40023800 	.word	0x40023800
 80097a0:	40020000 	.word	0x40020000

080097a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80097b8:	4619      	mov	r1, r3
 80097ba:	4610      	mov	r0, r2
 80097bc:	f7fe fd36 	bl	800822c <USBD_LL_SetupStage>
}
 80097c0:	bf00      	nop
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	460b      	mov	r3, r1
 80097d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80097da:	78fa      	ldrb	r2, [r7, #3]
 80097dc:	6879      	ldr	r1, [r7, #4]
 80097de:	4613      	mov	r3, r2
 80097e0:	00db      	lsls	r3, r3, #3
 80097e2:	1a9b      	subs	r3, r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	440b      	add	r3, r1
 80097e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	78fb      	ldrb	r3, [r7, #3]
 80097f0:	4619      	mov	r1, r3
 80097f2:	f7fe fd6e 	bl	80082d2 <USBD_LL_DataOutStage>
}
 80097f6:	bf00      	nop
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b082      	sub	sp, #8
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	460b      	mov	r3, r1
 8009808:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009810:	78fa      	ldrb	r2, [r7, #3]
 8009812:	6879      	ldr	r1, [r7, #4]
 8009814:	4613      	mov	r3, r2
 8009816:	00db      	lsls	r3, r3, #3
 8009818:	1a9b      	subs	r3, r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	440b      	add	r3, r1
 800981e:	3348      	adds	r3, #72	; 0x48
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	78fb      	ldrb	r3, [r7, #3]
 8009824:	4619      	mov	r1, r3
 8009826:	f7fe fdb7 	bl	8008398 <USBD_LL_DataInStage>
}
 800982a:	bf00      	nop
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b082      	sub	sp, #8
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009840:	4618      	mov	r0, r3
 8009842:	f7fe febb 	bl	80085bc <USBD_LL_SOF>
}
 8009846:	bf00      	nop
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800984e:	b580      	push	{r7, lr}
 8009850:	b084      	sub	sp, #16
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009856:	2301      	movs	r3, #1
 8009858:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d102      	bne.n	8009868 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009862:	2300      	movs	r3, #0
 8009864:	73fb      	strb	r3, [r7, #15]
 8009866:	e008      	b.n	800987a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	2b02      	cmp	r3, #2
 800986e:	d102      	bne.n	8009876 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009870:	2301      	movs	r3, #1
 8009872:	73fb      	strb	r3, [r7, #15]
 8009874:	e001      	b.n	800987a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009876:	f7f8 f9af 	bl	8001bd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009880:	7bfa      	ldrb	r2, [r7, #15]
 8009882:	4611      	mov	r1, r2
 8009884:	4618      	mov	r0, r3
 8009886:	f7fe fe5e 	bl	8008546 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009890:	4618      	mov	r0, r3
 8009892:	f7fe fe17 	bl	80084c4 <USBD_LL_Reset>
}
 8009896:	bf00      	nop
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fe fe59 	bl	8008566 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	6812      	ldr	r2, [r2, #0]
 80098c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098c6:	f043 0301 	orr.w	r3, r3, #1
 80098ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a1b      	ldr	r3, [r3, #32]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d005      	beq.n	80098e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098d4:	4b04      	ldr	r3, [pc, #16]	; (80098e8 <HAL_PCD_SuspendCallback+0x48>)
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	4a03      	ldr	r2, [pc, #12]	; (80098e8 <HAL_PCD_SuspendCallback+0x48>)
 80098da:	f043 0306 	orr.w	r3, r3, #6
 80098de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	e000ed00 	.word	0xe000ed00

080098ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe fe48 	bl	8008590 <USBD_LL_Resume>
}
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	460b      	mov	r3, r1
 8009912:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800991a:	78fa      	ldrb	r2, [r7, #3]
 800991c:	4611      	mov	r1, r2
 800991e:	4618      	mov	r0, r3
 8009920:	f7fe fe73 	bl	800860a <USBD_LL_IsoOUTIncomplete>
}
 8009924:	bf00      	nop
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800993e:	78fa      	ldrb	r2, [r7, #3]
 8009940:	4611      	mov	r1, r2
 8009942:	4618      	mov	r0, r3
 8009944:	f7fe fe54 	bl	80085f0 <USBD_LL_IsoINIncomplete>
}
 8009948:	bf00      	nop
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800995e:	4618      	mov	r0, r3
 8009960:	f7fe fe60 	bl	8008624 <USBD_LL_DevConnected>
}
 8009964:	bf00      	nop
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800997a:	4618      	mov	r0, r3
 800997c:	f7fe fe5d 	bl	800863a <USBD_LL_DevDisconnected>
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d13c      	bne.n	8009a12 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009998:	4a20      	ldr	r2, [pc, #128]	; (8009a1c <USBD_LL_Init+0x94>)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a1e      	ldr	r2, [pc, #120]	; (8009a1c <USBD_LL_Init+0x94>)
 80099a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80099a8:	4b1c      	ldr	r3, [pc, #112]	; (8009a1c <USBD_LL_Init+0x94>)
 80099aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80099ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80099b0:	4b1a      	ldr	r3, [pc, #104]	; (8009a1c <USBD_LL_Init+0x94>)
 80099b2:	2204      	movs	r2, #4
 80099b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80099b6:	4b19      	ldr	r3, [pc, #100]	; (8009a1c <USBD_LL_Init+0x94>)
 80099b8:	2202      	movs	r2, #2
 80099ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80099bc:	4b17      	ldr	r3, [pc, #92]	; (8009a1c <USBD_LL_Init+0x94>)
 80099be:	2200      	movs	r2, #0
 80099c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80099c2:	4b16      	ldr	r3, [pc, #88]	; (8009a1c <USBD_LL_Init+0x94>)
 80099c4:	2202      	movs	r2, #2
 80099c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80099c8:	4b14      	ldr	r3, [pc, #80]	; (8009a1c <USBD_LL_Init+0x94>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80099ce:	4b13      	ldr	r3, [pc, #76]	; (8009a1c <USBD_LL_Init+0x94>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80099d4:	4b11      	ldr	r3, [pc, #68]	; (8009a1c <USBD_LL_Init+0x94>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80099da:	4b10      	ldr	r3, [pc, #64]	; (8009a1c <USBD_LL_Init+0x94>)
 80099dc:	2200      	movs	r2, #0
 80099de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80099e0:	4b0e      	ldr	r3, [pc, #56]	; (8009a1c <USBD_LL_Init+0x94>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80099e6:	480d      	ldr	r0, [pc, #52]	; (8009a1c <USBD_LL_Init+0x94>)
 80099e8:	f7f9 fa7e 	bl	8002ee8 <HAL_PCD_Init>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80099f2:	f7f8 f8f1 	bl	8001bd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80099f6:	2180      	movs	r1, #128	; 0x80
 80099f8:	4808      	ldr	r0, [pc, #32]	; (8009a1c <USBD_LL_Init+0x94>)
 80099fa:	f7fa fbdc 	bl	80041b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80099fe:	2240      	movs	r2, #64	; 0x40
 8009a00:	2100      	movs	r1, #0
 8009a02:	4806      	ldr	r0, [pc, #24]	; (8009a1c <USBD_LL_Init+0x94>)
 8009a04:	f7fa fb90 	bl	8004128 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009a08:	2280      	movs	r2, #128	; 0x80
 8009a0a:	2101      	movs	r1, #1
 8009a0c:	4803      	ldr	r0, [pc, #12]	; (8009a1c <USBD_LL_Init+0x94>)
 8009a0e:	f7fa fb8b 	bl	8004128 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	20001a84 	.word	0x20001a84

08009a20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7f9 fb73 	bl	8003122 <HAL_PCD_Start>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f000 f92a 	bl	8009c9c <USBD_Get_USB_Status>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009a4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b084      	sub	sp, #16
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	4608      	mov	r0, r1
 8009a60:	4611      	mov	r1, r2
 8009a62:	461a      	mov	r2, r3
 8009a64:	4603      	mov	r3, r0
 8009a66:	70fb      	strb	r3, [r7, #3]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	70bb      	strb	r3, [r7, #2]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a70:	2300      	movs	r3, #0
 8009a72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a7e:	78bb      	ldrb	r3, [r7, #2]
 8009a80:	883a      	ldrh	r2, [r7, #0]
 8009a82:	78f9      	ldrb	r1, [r7, #3]
 8009a84:	f7f9 ff57 	bl	8003936 <HAL_PCD_EP_Open>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 f904 	bl	8009c9c <USBD_Get_USB_Status>
 8009a94:	4603      	mov	r3, r0
 8009a96:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	460b      	mov	r3, r1
 8009aac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009abc:	78fa      	ldrb	r2, [r7, #3]
 8009abe:	4611      	mov	r1, r2
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7f9 ffa0 	bl	8003a06 <HAL_PCD_EP_Close>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 f8e5 	bl	8009c9c <USBD_Get_USB_Status>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aec:	2300      	movs	r3, #0
 8009aee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009af0:	2300      	movs	r3, #0
 8009af2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009afa:	78fa      	ldrb	r2, [r7, #3]
 8009afc:	4611      	mov	r1, r2
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fa f878 	bl	8003bf4 <HAL_PCD_EP_SetStall>
 8009b04:	4603      	mov	r3, r0
 8009b06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 f8c6 	bl	8009c9c <USBD_Get_USB_Status>
 8009b10:	4603      	mov	r3, r0
 8009b12:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009b14:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b084      	sub	sp, #16
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	460b      	mov	r3, r1
 8009b28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b38:	78fa      	ldrb	r2, [r7, #3]
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fa f8bd 	bl	8003cbc <HAL_PCD_EP_ClrStall>
 8009b42:	4603      	mov	r3, r0
 8009b44:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8009b46:	7bfb      	ldrb	r3, [r7, #15]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f000 f8a7 	bl	8009c9c <USBD_Get_USB_Status>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8009b52:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	460b      	mov	r3, r1
 8009b66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b6e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	da0b      	bge.n	8009b90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009b78:	78fb      	ldrb	r3, [r7, #3]
 8009b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b7e:	68f9      	ldr	r1, [r7, #12]
 8009b80:	4613      	mov	r3, r2
 8009b82:	00db      	lsls	r3, r3, #3
 8009b84:	1a9b      	subs	r3, r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	440b      	add	r3, r1
 8009b8a:	333e      	adds	r3, #62	; 0x3e
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	e00b      	b.n	8009ba8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009b90:	78fb      	ldrb	r3, [r7, #3]
 8009b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b96:	68f9      	ldr	r1, [r7, #12]
 8009b98:	4613      	mov	r3, r2
 8009b9a:	00db      	lsls	r3, r3, #3
 8009b9c:	1a9b      	subs	r3, r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	440b      	add	r3, r1
 8009ba2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009ba6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bce:	78fa      	ldrb	r2, [r7, #3]
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7f9 fe8a 	bl	80038ec <HAL_PCD_SetAddress>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f000 f85c 	bl	8009c9c <USBD_Get_USB_Status>
 8009be4:	4603      	mov	r3, r0
 8009be6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b086      	sub	sp, #24
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	60f8      	str	r0, [r7, #12]
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	603b      	str	r3, [r7, #0]
 8009bfe:	460b      	mov	r3, r1
 8009c00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c10:	7af9      	ldrb	r1, [r7, #11]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	f7f9 ffa3 	bl	8003b60 <HAL_PCD_EP_Transmit>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f000 f83b 	bl	8009c9c <USBD_Get_USB_Status>
 8009c26:	4603      	mov	r3, r0
 8009c28:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8009c2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3718      	adds	r7, #24
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	607a      	str	r2, [r7, #4]
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	460b      	mov	r3, r1
 8009c42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c52:	7af9      	ldrb	r1, [r7, #11]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	f7f9 ff1f 	bl	8003a9a <HAL_PCD_EP_Receive>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8009c60:	7dfb      	ldrb	r3, [r7, #23]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 f81a 	bl	8009c9c <USBD_Get_USB_Status>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8009c6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3718      	adds	r7, #24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b082      	sub	sp, #8
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	460b      	mov	r3, r1
 8009c80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c88:	78fa      	ldrb	r2, [r7, #3]
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7f9 ff4f 	bl	8003b30 <HAL_PCD_EP_GetRxCount>
 8009c92:	4603      	mov	r3, r0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009caa:	79fb      	ldrb	r3, [r7, #7]
 8009cac:	2b03      	cmp	r3, #3
 8009cae:	d817      	bhi.n	8009ce0 <USBD_Get_USB_Status+0x44>
 8009cb0:	a201      	add	r2, pc, #4	; (adr r2, 8009cb8 <USBD_Get_USB_Status+0x1c>)
 8009cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb6:	bf00      	nop
 8009cb8:	08009cc9 	.word	0x08009cc9
 8009cbc:	08009ccf 	.word	0x08009ccf
 8009cc0:	08009cd5 	.word	0x08009cd5
 8009cc4:	08009cdb 	.word	0x08009cdb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	73fb      	strb	r3, [r7, #15]
    break;
 8009ccc:	e00b      	b.n	8009ce6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009cce:	2303      	movs	r3, #3
 8009cd0:	73fb      	strb	r3, [r7, #15]
    break;
 8009cd2:	e008      	b.n	8009ce6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009cd8:	e005      	b.n	8009ce6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	73fb      	strb	r3, [r7, #15]
    break;
 8009cde:	e002      	b.n	8009ce6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ce4:	bf00      	nop
  }
  return usb_status;
 8009ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3714      	adds	r7, #20
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <__errno>:
 8009cf4:	4b01      	ldr	r3, [pc, #4]	; (8009cfc <__errno+0x8>)
 8009cf6:	6818      	ldr	r0, [r3, #0]
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	20000180 	.word	0x20000180

08009d00 <__libc_init_array>:
 8009d00:	b570      	push	{r4, r5, r6, lr}
 8009d02:	4e0d      	ldr	r6, [pc, #52]	; (8009d38 <__libc_init_array+0x38>)
 8009d04:	4c0d      	ldr	r4, [pc, #52]	; (8009d3c <__libc_init_array+0x3c>)
 8009d06:	1ba4      	subs	r4, r4, r6
 8009d08:	10a4      	asrs	r4, r4, #2
 8009d0a:	2500      	movs	r5, #0
 8009d0c:	42a5      	cmp	r5, r4
 8009d0e:	d109      	bne.n	8009d24 <__libc_init_array+0x24>
 8009d10:	4e0b      	ldr	r6, [pc, #44]	; (8009d40 <__libc_init_array+0x40>)
 8009d12:	4c0c      	ldr	r4, [pc, #48]	; (8009d44 <__libc_init_array+0x44>)
 8009d14:	f002 f864 	bl	800bde0 <_init>
 8009d18:	1ba4      	subs	r4, r4, r6
 8009d1a:	10a4      	asrs	r4, r4, #2
 8009d1c:	2500      	movs	r5, #0
 8009d1e:	42a5      	cmp	r5, r4
 8009d20:	d105      	bne.n	8009d2e <__libc_init_array+0x2e>
 8009d22:	bd70      	pop	{r4, r5, r6, pc}
 8009d24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d28:	4798      	blx	r3
 8009d2a:	3501      	adds	r5, #1
 8009d2c:	e7ee      	b.n	8009d0c <__libc_init_array+0xc>
 8009d2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d32:	4798      	blx	r3
 8009d34:	3501      	adds	r5, #1
 8009d36:	e7f2      	b.n	8009d1e <__libc_init_array+0x1e>
 8009d38:	0800c0e0 	.word	0x0800c0e0
 8009d3c:	0800c0e0 	.word	0x0800c0e0
 8009d40:	0800c0e0 	.word	0x0800c0e0
 8009d44:	0800c0e4 	.word	0x0800c0e4

08009d48 <malloc>:
 8009d48:	4b02      	ldr	r3, [pc, #8]	; (8009d54 <malloc+0xc>)
 8009d4a:	4601      	mov	r1, r0
 8009d4c:	6818      	ldr	r0, [r3, #0]
 8009d4e:	f000 b861 	b.w	8009e14 <_malloc_r>
 8009d52:	bf00      	nop
 8009d54:	20000180 	.word	0x20000180

08009d58 <free>:
 8009d58:	4b02      	ldr	r3, [pc, #8]	; (8009d64 <free+0xc>)
 8009d5a:	4601      	mov	r1, r0
 8009d5c:	6818      	ldr	r0, [r3, #0]
 8009d5e:	f000 b80b 	b.w	8009d78 <_free_r>
 8009d62:	bf00      	nop
 8009d64:	20000180 	.word	0x20000180

08009d68 <memset>:
 8009d68:	4402      	add	r2, r0
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d100      	bne.n	8009d72 <memset+0xa>
 8009d70:	4770      	bx	lr
 8009d72:	f803 1b01 	strb.w	r1, [r3], #1
 8009d76:	e7f9      	b.n	8009d6c <memset+0x4>

08009d78 <_free_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	4605      	mov	r5, r0
 8009d7c:	2900      	cmp	r1, #0
 8009d7e:	d045      	beq.n	8009e0c <_free_r+0x94>
 8009d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d84:	1f0c      	subs	r4, r1, #4
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	bfb8      	it	lt
 8009d8a:	18e4      	addlt	r4, r4, r3
 8009d8c:	f001 fb85 	bl	800b49a <__malloc_lock>
 8009d90:	4a1f      	ldr	r2, [pc, #124]	; (8009e10 <_free_r+0x98>)
 8009d92:	6813      	ldr	r3, [r2, #0]
 8009d94:	4610      	mov	r0, r2
 8009d96:	b933      	cbnz	r3, 8009da6 <_free_r+0x2e>
 8009d98:	6063      	str	r3, [r4, #4]
 8009d9a:	6014      	str	r4, [r2, #0]
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009da2:	f001 bb7b 	b.w	800b49c <__malloc_unlock>
 8009da6:	42a3      	cmp	r3, r4
 8009da8:	d90c      	bls.n	8009dc4 <_free_r+0x4c>
 8009daa:	6821      	ldr	r1, [r4, #0]
 8009dac:	1862      	adds	r2, r4, r1
 8009dae:	4293      	cmp	r3, r2
 8009db0:	bf04      	itt	eq
 8009db2:	681a      	ldreq	r2, [r3, #0]
 8009db4:	685b      	ldreq	r3, [r3, #4]
 8009db6:	6063      	str	r3, [r4, #4]
 8009db8:	bf04      	itt	eq
 8009dba:	1852      	addeq	r2, r2, r1
 8009dbc:	6022      	streq	r2, [r4, #0]
 8009dbe:	6004      	str	r4, [r0, #0]
 8009dc0:	e7ec      	b.n	8009d9c <_free_r+0x24>
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	685a      	ldr	r2, [r3, #4]
 8009dc6:	b10a      	cbz	r2, 8009dcc <_free_r+0x54>
 8009dc8:	42a2      	cmp	r2, r4
 8009dca:	d9fa      	bls.n	8009dc2 <_free_r+0x4a>
 8009dcc:	6819      	ldr	r1, [r3, #0]
 8009dce:	1858      	adds	r0, r3, r1
 8009dd0:	42a0      	cmp	r0, r4
 8009dd2:	d10b      	bne.n	8009dec <_free_r+0x74>
 8009dd4:	6820      	ldr	r0, [r4, #0]
 8009dd6:	4401      	add	r1, r0
 8009dd8:	1858      	adds	r0, r3, r1
 8009dda:	4282      	cmp	r2, r0
 8009ddc:	6019      	str	r1, [r3, #0]
 8009dde:	d1dd      	bne.n	8009d9c <_free_r+0x24>
 8009de0:	6810      	ldr	r0, [r2, #0]
 8009de2:	6852      	ldr	r2, [r2, #4]
 8009de4:	605a      	str	r2, [r3, #4]
 8009de6:	4401      	add	r1, r0
 8009de8:	6019      	str	r1, [r3, #0]
 8009dea:	e7d7      	b.n	8009d9c <_free_r+0x24>
 8009dec:	d902      	bls.n	8009df4 <_free_r+0x7c>
 8009dee:	230c      	movs	r3, #12
 8009df0:	602b      	str	r3, [r5, #0]
 8009df2:	e7d3      	b.n	8009d9c <_free_r+0x24>
 8009df4:	6820      	ldr	r0, [r4, #0]
 8009df6:	1821      	adds	r1, r4, r0
 8009df8:	428a      	cmp	r2, r1
 8009dfa:	bf04      	itt	eq
 8009dfc:	6811      	ldreq	r1, [r2, #0]
 8009dfe:	6852      	ldreq	r2, [r2, #4]
 8009e00:	6062      	str	r2, [r4, #4]
 8009e02:	bf04      	itt	eq
 8009e04:	1809      	addeq	r1, r1, r0
 8009e06:	6021      	streq	r1, [r4, #0]
 8009e08:	605c      	str	r4, [r3, #4]
 8009e0a:	e7c7      	b.n	8009d9c <_free_r+0x24>
 8009e0c:	bd38      	pop	{r3, r4, r5, pc}
 8009e0e:	bf00      	nop
 8009e10:	20000374 	.word	0x20000374

08009e14 <_malloc_r>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	1ccd      	adds	r5, r1, #3
 8009e18:	f025 0503 	bic.w	r5, r5, #3
 8009e1c:	3508      	adds	r5, #8
 8009e1e:	2d0c      	cmp	r5, #12
 8009e20:	bf38      	it	cc
 8009e22:	250c      	movcc	r5, #12
 8009e24:	2d00      	cmp	r5, #0
 8009e26:	4606      	mov	r6, r0
 8009e28:	db01      	blt.n	8009e2e <_malloc_r+0x1a>
 8009e2a:	42a9      	cmp	r1, r5
 8009e2c:	d903      	bls.n	8009e36 <_malloc_r+0x22>
 8009e2e:	230c      	movs	r3, #12
 8009e30:	6033      	str	r3, [r6, #0]
 8009e32:	2000      	movs	r0, #0
 8009e34:	bd70      	pop	{r4, r5, r6, pc}
 8009e36:	f001 fb30 	bl	800b49a <__malloc_lock>
 8009e3a:	4a21      	ldr	r2, [pc, #132]	; (8009ec0 <_malloc_r+0xac>)
 8009e3c:	6814      	ldr	r4, [r2, #0]
 8009e3e:	4621      	mov	r1, r4
 8009e40:	b991      	cbnz	r1, 8009e68 <_malloc_r+0x54>
 8009e42:	4c20      	ldr	r4, [pc, #128]	; (8009ec4 <_malloc_r+0xb0>)
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	b91b      	cbnz	r3, 8009e50 <_malloc_r+0x3c>
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f000 fc99 	bl	800a780 <_sbrk_r>
 8009e4e:	6020      	str	r0, [r4, #0]
 8009e50:	4629      	mov	r1, r5
 8009e52:	4630      	mov	r0, r6
 8009e54:	f000 fc94 	bl	800a780 <_sbrk_r>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d124      	bne.n	8009ea6 <_malloc_r+0x92>
 8009e5c:	230c      	movs	r3, #12
 8009e5e:	6033      	str	r3, [r6, #0]
 8009e60:	4630      	mov	r0, r6
 8009e62:	f001 fb1b 	bl	800b49c <__malloc_unlock>
 8009e66:	e7e4      	b.n	8009e32 <_malloc_r+0x1e>
 8009e68:	680b      	ldr	r3, [r1, #0]
 8009e6a:	1b5b      	subs	r3, r3, r5
 8009e6c:	d418      	bmi.n	8009ea0 <_malloc_r+0x8c>
 8009e6e:	2b0b      	cmp	r3, #11
 8009e70:	d90f      	bls.n	8009e92 <_malloc_r+0x7e>
 8009e72:	600b      	str	r3, [r1, #0]
 8009e74:	50cd      	str	r5, [r1, r3]
 8009e76:	18cc      	adds	r4, r1, r3
 8009e78:	4630      	mov	r0, r6
 8009e7a:	f001 fb0f 	bl	800b49c <__malloc_unlock>
 8009e7e:	f104 000b 	add.w	r0, r4, #11
 8009e82:	1d23      	adds	r3, r4, #4
 8009e84:	f020 0007 	bic.w	r0, r0, #7
 8009e88:	1ac3      	subs	r3, r0, r3
 8009e8a:	d0d3      	beq.n	8009e34 <_malloc_r+0x20>
 8009e8c:	425a      	negs	r2, r3
 8009e8e:	50e2      	str	r2, [r4, r3]
 8009e90:	e7d0      	b.n	8009e34 <_malloc_r+0x20>
 8009e92:	428c      	cmp	r4, r1
 8009e94:	684b      	ldr	r3, [r1, #4]
 8009e96:	bf16      	itet	ne
 8009e98:	6063      	strne	r3, [r4, #4]
 8009e9a:	6013      	streq	r3, [r2, #0]
 8009e9c:	460c      	movne	r4, r1
 8009e9e:	e7eb      	b.n	8009e78 <_malloc_r+0x64>
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	6849      	ldr	r1, [r1, #4]
 8009ea4:	e7cc      	b.n	8009e40 <_malloc_r+0x2c>
 8009ea6:	1cc4      	adds	r4, r0, #3
 8009ea8:	f024 0403 	bic.w	r4, r4, #3
 8009eac:	42a0      	cmp	r0, r4
 8009eae:	d005      	beq.n	8009ebc <_malloc_r+0xa8>
 8009eb0:	1a21      	subs	r1, r4, r0
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f000 fc64 	bl	800a780 <_sbrk_r>
 8009eb8:	3001      	adds	r0, #1
 8009eba:	d0cf      	beq.n	8009e5c <_malloc_r+0x48>
 8009ebc:	6025      	str	r5, [r4, #0]
 8009ebe:	e7db      	b.n	8009e78 <_malloc_r+0x64>
 8009ec0:	20000374 	.word	0x20000374
 8009ec4:	20000378 	.word	0x20000378

08009ec8 <__cvt>:
 8009ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ecc:	ec55 4b10 	vmov	r4, r5, d0
 8009ed0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009ed2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ed6:	2d00      	cmp	r5, #0
 8009ed8:	460e      	mov	r6, r1
 8009eda:	4691      	mov	r9, r2
 8009edc:	4619      	mov	r1, r3
 8009ede:	bfb8      	it	lt
 8009ee0:	4622      	movlt	r2, r4
 8009ee2:	462b      	mov	r3, r5
 8009ee4:	f027 0720 	bic.w	r7, r7, #32
 8009ee8:	bfbb      	ittet	lt
 8009eea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009eee:	461d      	movlt	r5, r3
 8009ef0:	2300      	movge	r3, #0
 8009ef2:	232d      	movlt	r3, #45	; 0x2d
 8009ef4:	bfb8      	it	lt
 8009ef6:	4614      	movlt	r4, r2
 8009ef8:	2f46      	cmp	r7, #70	; 0x46
 8009efa:	700b      	strb	r3, [r1, #0]
 8009efc:	d004      	beq.n	8009f08 <__cvt+0x40>
 8009efe:	2f45      	cmp	r7, #69	; 0x45
 8009f00:	d100      	bne.n	8009f04 <__cvt+0x3c>
 8009f02:	3601      	adds	r6, #1
 8009f04:	2102      	movs	r1, #2
 8009f06:	e000      	b.n	8009f0a <__cvt+0x42>
 8009f08:	2103      	movs	r1, #3
 8009f0a:	ab03      	add	r3, sp, #12
 8009f0c:	9301      	str	r3, [sp, #4]
 8009f0e:	ab02      	add	r3, sp, #8
 8009f10:	9300      	str	r3, [sp, #0]
 8009f12:	4632      	mov	r2, r6
 8009f14:	4653      	mov	r3, sl
 8009f16:	ec45 4b10 	vmov	d0, r4, r5
 8009f1a:	f000 fced 	bl	800a8f8 <_dtoa_r>
 8009f1e:	2f47      	cmp	r7, #71	; 0x47
 8009f20:	4680      	mov	r8, r0
 8009f22:	d102      	bne.n	8009f2a <__cvt+0x62>
 8009f24:	f019 0f01 	tst.w	r9, #1
 8009f28:	d026      	beq.n	8009f78 <__cvt+0xb0>
 8009f2a:	2f46      	cmp	r7, #70	; 0x46
 8009f2c:	eb08 0906 	add.w	r9, r8, r6
 8009f30:	d111      	bne.n	8009f56 <__cvt+0x8e>
 8009f32:	f898 3000 	ldrb.w	r3, [r8]
 8009f36:	2b30      	cmp	r3, #48	; 0x30
 8009f38:	d10a      	bne.n	8009f50 <__cvt+0x88>
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	4620      	mov	r0, r4
 8009f40:	4629      	mov	r1, r5
 8009f42:	f7f6 fdc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f46:	b918      	cbnz	r0, 8009f50 <__cvt+0x88>
 8009f48:	f1c6 0601 	rsb	r6, r6, #1
 8009f4c:	f8ca 6000 	str.w	r6, [sl]
 8009f50:	f8da 3000 	ldr.w	r3, [sl]
 8009f54:	4499      	add	r9, r3
 8009f56:	2200      	movs	r2, #0
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	f7f6 fdb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f62:	b938      	cbnz	r0, 8009f74 <__cvt+0xac>
 8009f64:	2230      	movs	r2, #48	; 0x30
 8009f66:	9b03      	ldr	r3, [sp, #12]
 8009f68:	454b      	cmp	r3, r9
 8009f6a:	d205      	bcs.n	8009f78 <__cvt+0xb0>
 8009f6c:	1c59      	adds	r1, r3, #1
 8009f6e:	9103      	str	r1, [sp, #12]
 8009f70:	701a      	strb	r2, [r3, #0]
 8009f72:	e7f8      	b.n	8009f66 <__cvt+0x9e>
 8009f74:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f78:	9b03      	ldr	r3, [sp, #12]
 8009f7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f7c:	eba3 0308 	sub.w	r3, r3, r8
 8009f80:	4640      	mov	r0, r8
 8009f82:	6013      	str	r3, [r2, #0]
 8009f84:	b004      	add	sp, #16
 8009f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009f8a <__exponent>:
 8009f8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f8c:	2900      	cmp	r1, #0
 8009f8e:	4604      	mov	r4, r0
 8009f90:	bfba      	itte	lt
 8009f92:	4249      	neglt	r1, r1
 8009f94:	232d      	movlt	r3, #45	; 0x2d
 8009f96:	232b      	movge	r3, #43	; 0x2b
 8009f98:	2909      	cmp	r1, #9
 8009f9a:	f804 2b02 	strb.w	r2, [r4], #2
 8009f9e:	7043      	strb	r3, [r0, #1]
 8009fa0:	dd20      	ble.n	8009fe4 <__exponent+0x5a>
 8009fa2:	f10d 0307 	add.w	r3, sp, #7
 8009fa6:	461f      	mov	r7, r3
 8009fa8:	260a      	movs	r6, #10
 8009faa:	fb91 f5f6 	sdiv	r5, r1, r6
 8009fae:	fb06 1115 	mls	r1, r6, r5, r1
 8009fb2:	3130      	adds	r1, #48	; 0x30
 8009fb4:	2d09      	cmp	r5, #9
 8009fb6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009fba:	f103 32ff 	add.w	r2, r3, #4294967295
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	dc09      	bgt.n	8009fd6 <__exponent+0x4c>
 8009fc2:	3130      	adds	r1, #48	; 0x30
 8009fc4:	3b02      	subs	r3, #2
 8009fc6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009fca:	42bb      	cmp	r3, r7
 8009fcc:	4622      	mov	r2, r4
 8009fce:	d304      	bcc.n	8009fda <__exponent+0x50>
 8009fd0:	1a10      	subs	r0, r2, r0
 8009fd2:	b003      	add	sp, #12
 8009fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	e7e7      	b.n	8009faa <__exponent+0x20>
 8009fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fde:	f804 2b01 	strb.w	r2, [r4], #1
 8009fe2:	e7f2      	b.n	8009fca <__exponent+0x40>
 8009fe4:	2330      	movs	r3, #48	; 0x30
 8009fe6:	4419      	add	r1, r3
 8009fe8:	7083      	strb	r3, [r0, #2]
 8009fea:	1d02      	adds	r2, r0, #4
 8009fec:	70c1      	strb	r1, [r0, #3]
 8009fee:	e7ef      	b.n	8009fd0 <__exponent+0x46>

08009ff0 <_printf_float>:
 8009ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff4:	b08d      	sub	sp, #52	; 0x34
 8009ff6:	460c      	mov	r4, r1
 8009ff8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009ffc:	4616      	mov	r6, r2
 8009ffe:	461f      	mov	r7, r3
 800a000:	4605      	mov	r5, r0
 800a002:	f001 fa31 	bl	800b468 <_localeconv_r>
 800a006:	6803      	ldr	r3, [r0, #0]
 800a008:	9304      	str	r3, [sp, #16]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7f6 f8e0 	bl	80001d0 <strlen>
 800a010:	2300      	movs	r3, #0
 800a012:	930a      	str	r3, [sp, #40]	; 0x28
 800a014:	f8d8 3000 	ldr.w	r3, [r8]
 800a018:	9005      	str	r0, [sp, #20]
 800a01a:	3307      	adds	r3, #7
 800a01c:	f023 0307 	bic.w	r3, r3, #7
 800a020:	f103 0208 	add.w	r2, r3, #8
 800a024:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a028:	f8d4 b000 	ldr.w	fp, [r4]
 800a02c:	f8c8 2000 	str.w	r2, [r8]
 800a030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a034:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a038:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a03c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a040:	9307      	str	r3, [sp, #28]
 800a042:	f8cd 8018 	str.w	r8, [sp, #24]
 800a046:	f04f 32ff 	mov.w	r2, #4294967295
 800a04a:	4ba7      	ldr	r3, [pc, #668]	; (800a2e8 <_printf_float+0x2f8>)
 800a04c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a050:	f7f6 fd6c 	bl	8000b2c <__aeabi_dcmpun>
 800a054:	bb70      	cbnz	r0, 800a0b4 <_printf_float+0xc4>
 800a056:	f04f 32ff 	mov.w	r2, #4294967295
 800a05a:	4ba3      	ldr	r3, [pc, #652]	; (800a2e8 <_printf_float+0x2f8>)
 800a05c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a060:	f7f6 fd46 	bl	8000af0 <__aeabi_dcmple>
 800a064:	bb30      	cbnz	r0, 800a0b4 <_printf_float+0xc4>
 800a066:	2200      	movs	r2, #0
 800a068:	2300      	movs	r3, #0
 800a06a:	4640      	mov	r0, r8
 800a06c:	4649      	mov	r1, r9
 800a06e:	f7f6 fd35 	bl	8000adc <__aeabi_dcmplt>
 800a072:	b110      	cbz	r0, 800a07a <_printf_float+0x8a>
 800a074:	232d      	movs	r3, #45	; 0x2d
 800a076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a07a:	4a9c      	ldr	r2, [pc, #624]	; (800a2ec <_printf_float+0x2fc>)
 800a07c:	4b9c      	ldr	r3, [pc, #624]	; (800a2f0 <_printf_float+0x300>)
 800a07e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a082:	bf8c      	ite	hi
 800a084:	4690      	movhi	r8, r2
 800a086:	4698      	movls	r8, r3
 800a088:	2303      	movs	r3, #3
 800a08a:	f02b 0204 	bic.w	r2, fp, #4
 800a08e:	6123      	str	r3, [r4, #16]
 800a090:	6022      	str	r2, [r4, #0]
 800a092:	f04f 0900 	mov.w	r9, #0
 800a096:	9700      	str	r7, [sp, #0]
 800a098:	4633      	mov	r3, r6
 800a09a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a09c:	4621      	mov	r1, r4
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f000 f9e6 	bl	800a470 <_printf_common>
 800a0a4:	3001      	adds	r0, #1
 800a0a6:	f040 808d 	bne.w	800a1c4 <_printf_float+0x1d4>
 800a0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ae:	b00d      	add	sp, #52	; 0x34
 800a0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b4:	4642      	mov	r2, r8
 800a0b6:	464b      	mov	r3, r9
 800a0b8:	4640      	mov	r0, r8
 800a0ba:	4649      	mov	r1, r9
 800a0bc:	f7f6 fd36 	bl	8000b2c <__aeabi_dcmpun>
 800a0c0:	b110      	cbz	r0, 800a0c8 <_printf_float+0xd8>
 800a0c2:	4a8c      	ldr	r2, [pc, #560]	; (800a2f4 <_printf_float+0x304>)
 800a0c4:	4b8c      	ldr	r3, [pc, #560]	; (800a2f8 <_printf_float+0x308>)
 800a0c6:	e7da      	b.n	800a07e <_printf_float+0x8e>
 800a0c8:	6861      	ldr	r1, [r4, #4]
 800a0ca:	1c4b      	adds	r3, r1, #1
 800a0cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a0d0:	a80a      	add	r0, sp, #40	; 0x28
 800a0d2:	d13e      	bne.n	800a152 <_printf_float+0x162>
 800a0d4:	2306      	movs	r3, #6
 800a0d6:	6063      	str	r3, [r4, #4]
 800a0d8:	2300      	movs	r3, #0
 800a0da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a0de:	ab09      	add	r3, sp, #36	; 0x24
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	ec49 8b10 	vmov	d0, r8, r9
 800a0e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a0ea:	6022      	str	r2, [r4, #0]
 800a0ec:	f8cd a004 	str.w	sl, [sp, #4]
 800a0f0:	6861      	ldr	r1, [r4, #4]
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	f7ff fee8 	bl	8009ec8 <__cvt>
 800a0f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a0fc:	2b47      	cmp	r3, #71	; 0x47
 800a0fe:	4680      	mov	r8, r0
 800a100:	d109      	bne.n	800a116 <_printf_float+0x126>
 800a102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a104:	1cd8      	adds	r0, r3, #3
 800a106:	db02      	blt.n	800a10e <_printf_float+0x11e>
 800a108:	6862      	ldr	r2, [r4, #4]
 800a10a:	4293      	cmp	r3, r2
 800a10c:	dd47      	ble.n	800a19e <_printf_float+0x1ae>
 800a10e:	f1aa 0a02 	sub.w	sl, sl, #2
 800a112:	fa5f fa8a 	uxtb.w	sl, sl
 800a116:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a11a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a11c:	d824      	bhi.n	800a168 <_printf_float+0x178>
 800a11e:	3901      	subs	r1, #1
 800a120:	4652      	mov	r2, sl
 800a122:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a126:	9109      	str	r1, [sp, #36]	; 0x24
 800a128:	f7ff ff2f 	bl	8009f8a <__exponent>
 800a12c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a12e:	1813      	adds	r3, r2, r0
 800a130:	2a01      	cmp	r2, #1
 800a132:	4681      	mov	r9, r0
 800a134:	6123      	str	r3, [r4, #16]
 800a136:	dc02      	bgt.n	800a13e <_printf_float+0x14e>
 800a138:	6822      	ldr	r2, [r4, #0]
 800a13a:	07d1      	lsls	r1, r2, #31
 800a13c:	d501      	bpl.n	800a142 <_printf_float+0x152>
 800a13e:	3301      	adds	r3, #1
 800a140:	6123      	str	r3, [r4, #16]
 800a142:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a146:	2b00      	cmp	r3, #0
 800a148:	d0a5      	beq.n	800a096 <_printf_float+0xa6>
 800a14a:	232d      	movs	r3, #45	; 0x2d
 800a14c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a150:	e7a1      	b.n	800a096 <_printf_float+0xa6>
 800a152:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a156:	f000 8177 	beq.w	800a448 <_printf_float+0x458>
 800a15a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a15e:	d1bb      	bne.n	800a0d8 <_printf_float+0xe8>
 800a160:	2900      	cmp	r1, #0
 800a162:	d1b9      	bne.n	800a0d8 <_printf_float+0xe8>
 800a164:	2301      	movs	r3, #1
 800a166:	e7b6      	b.n	800a0d6 <_printf_float+0xe6>
 800a168:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a16c:	d119      	bne.n	800a1a2 <_printf_float+0x1b2>
 800a16e:	2900      	cmp	r1, #0
 800a170:	6863      	ldr	r3, [r4, #4]
 800a172:	dd0c      	ble.n	800a18e <_printf_float+0x19e>
 800a174:	6121      	str	r1, [r4, #16]
 800a176:	b913      	cbnz	r3, 800a17e <_printf_float+0x18e>
 800a178:	6822      	ldr	r2, [r4, #0]
 800a17a:	07d2      	lsls	r2, r2, #31
 800a17c:	d502      	bpl.n	800a184 <_printf_float+0x194>
 800a17e:	3301      	adds	r3, #1
 800a180:	440b      	add	r3, r1
 800a182:	6123      	str	r3, [r4, #16]
 800a184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a186:	65a3      	str	r3, [r4, #88]	; 0x58
 800a188:	f04f 0900 	mov.w	r9, #0
 800a18c:	e7d9      	b.n	800a142 <_printf_float+0x152>
 800a18e:	b913      	cbnz	r3, 800a196 <_printf_float+0x1a6>
 800a190:	6822      	ldr	r2, [r4, #0]
 800a192:	07d0      	lsls	r0, r2, #31
 800a194:	d501      	bpl.n	800a19a <_printf_float+0x1aa>
 800a196:	3302      	adds	r3, #2
 800a198:	e7f3      	b.n	800a182 <_printf_float+0x192>
 800a19a:	2301      	movs	r3, #1
 800a19c:	e7f1      	b.n	800a182 <_printf_float+0x192>
 800a19e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a1a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	db05      	blt.n	800a1b6 <_printf_float+0x1c6>
 800a1aa:	6822      	ldr	r2, [r4, #0]
 800a1ac:	6123      	str	r3, [r4, #16]
 800a1ae:	07d1      	lsls	r1, r2, #31
 800a1b0:	d5e8      	bpl.n	800a184 <_printf_float+0x194>
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	e7e5      	b.n	800a182 <_printf_float+0x192>
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	bfd4      	ite	le
 800a1ba:	f1c3 0302 	rsble	r3, r3, #2
 800a1be:	2301      	movgt	r3, #1
 800a1c0:	4413      	add	r3, r2
 800a1c2:	e7de      	b.n	800a182 <_printf_float+0x192>
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	055a      	lsls	r2, r3, #21
 800a1c8:	d407      	bmi.n	800a1da <_printf_float+0x1ea>
 800a1ca:	6923      	ldr	r3, [r4, #16]
 800a1cc:	4642      	mov	r2, r8
 800a1ce:	4631      	mov	r1, r6
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	47b8      	blx	r7
 800a1d4:	3001      	adds	r0, #1
 800a1d6:	d12b      	bne.n	800a230 <_printf_float+0x240>
 800a1d8:	e767      	b.n	800a0aa <_printf_float+0xba>
 800a1da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a1de:	f240 80dc 	bls.w	800a39a <_printf_float+0x3aa>
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1ea:	f7f6 fc6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d033      	beq.n	800a25a <_printf_float+0x26a>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	4a41      	ldr	r2, [pc, #260]	; (800a2fc <_printf_float+0x30c>)
 800a1f6:	4631      	mov	r1, r6
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	47b8      	blx	r7
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	f43f af54 	beq.w	800a0aa <_printf_float+0xba>
 800a202:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a206:	429a      	cmp	r2, r3
 800a208:	db02      	blt.n	800a210 <_printf_float+0x220>
 800a20a:	6823      	ldr	r3, [r4, #0]
 800a20c:	07d8      	lsls	r0, r3, #31
 800a20e:	d50f      	bpl.n	800a230 <_printf_float+0x240>
 800a210:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a214:	4631      	mov	r1, r6
 800a216:	4628      	mov	r0, r5
 800a218:	47b8      	blx	r7
 800a21a:	3001      	adds	r0, #1
 800a21c:	f43f af45 	beq.w	800a0aa <_printf_float+0xba>
 800a220:	f04f 0800 	mov.w	r8, #0
 800a224:	f104 091a 	add.w	r9, r4, #26
 800a228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a22a:	3b01      	subs	r3, #1
 800a22c:	4543      	cmp	r3, r8
 800a22e:	dc09      	bgt.n	800a244 <_printf_float+0x254>
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	079b      	lsls	r3, r3, #30
 800a234:	f100 8103 	bmi.w	800a43e <_printf_float+0x44e>
 800a238:	68e0      	ldr	r0, [r4, #12]
 800a23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a23c:	4298      	cmp	r0, r3
 800a23e:	bfb8      	it	lt
 800a240:	4618      	movlt	r0, r3
 800a242:	e734      	b.n	800a0ae <_printf_float+0xbe>
 800a244:	2301      	movs	r3, #1
 800a246:	464a      	mov	r2, r9
 800a248:	4631      	mov	r1, r6
 800a24a:	4628      	mov	r0, r5
 800a24c:	47b8      	blx	r7
 800a24e:	3001      	adds	r0, #1
 800a250:	f43f af2b 	beq.w	800a0aa <_printf_float+0xba>
 800a254:	f108 0801 	add.w	r8, r8, #1
 800a258:	e7e6      	b.n	800a228 <_printf_float+0x238>
 800a25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	dc2b      	bgt.n	800a2b8 <_printf_float+0x2c8>
 800a260:	2301      	movs	r3, #1
 800a262:	4a26      	ldr	r2, [pc, #152]	; (800a2fc <_printf_float+0x30c>)
 800a264:	4631      	mov	r1, r6
 800a266:	4628      	mov	r0, r5
 800a268:	47b8      	blx	r7
 800a26a:	3001      	adds	r0, #1
 800a26c:	f43f af1d 	beq.w	800a0aa <_printf_float+0xba>
 800a270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a272:	b923      	cbnz	r3, 800a27e <_printf_float+0x28e>
 800a274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a276:	b913      	cbnz	r3, 800a27e <_printf_float+0x28e>
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	07d9      	lsls	r1, r3, #31
 800a27c:	d5d8      	bpl.n	800a230 <_printf_float+0x240>
 800a27e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a282:	4631      	mov	r1, r6
 800a284:	4628      	mov	r0, r5
 800a286:	47b8      	blx	r7
 800a288:	3001      	adds	r0, #1
 800a28a:	f43f af0e 	beq.w	800a0aa <_printf_float+0xba>
 800a28e:	f04f 0900 	mov.w	r9, #0
 800a292:	f104 0a1a 	add.w	sl, r4, #26
 800a296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a298:	425b      	negs	r3, r3
 800a29a:	454b      	cmp	r3, r9
 800a29c:	dc01      	bgt.n	800a2a2 <_printf_float+0x2b2>
 800a29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a0:	e794      	b.n	800a1cc <_printf_float+0x1dc>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	4652      	mov	r2, sl
 800a2a6:	4631      	mov	r1, r6
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	47b8      	blx	r7
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	f43f aefc 	beq.w	800a0aa <_printf_float+0xba>
 800a2b2:	f109 0901 	add.w	r9, r9, #1
 800a2b6:	e7ee      	b.n	800a296 <_printf_float+0x2a6>
 800a2b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	bfa8      	it	ge
 800a2c0:	461a      	movge	r2, r3
 800a2c2:	2a00      	cmp	r2, #0
 800a2c4:	4691      	mov	r9, r2
 800a2c6:	dd07      	ble.n	800a2d8 <_printf_float+0x2e8>
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	4642      	mov	r2, r8
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	47b8      	blx	r7
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	f43f aee9 	beq.w	800a0aa <_printf_float+0xba>
 800a2d8:	f104 031a 	add.w	r3, r4, #26
 800a2dc:	f04f 0b00 	mov.w	fp, #0
 800a2e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2e4:	9306      	str	r3, [sp, #24]
 800a2e6:	e015      	b.n	800a314 <_printf_float+0x324>
 800a2e8:	7fefffff 	.word	0x7fefffff
 800a2ec:	0800be7c 	.word	0x0800be7c
 800a2f0:	0800be78 	.word	0x0800be78
 800a2f4:	0800be84 	.word	0x0800be84
 800a2f8:	0800be80 	.word	0x0800be80
 800a2fc:	0800be88 	.word	0x0800be88
 800a300:	2301      	movs	r3, #1
 800a302:	9a06      	ldr	r2, [sp, #24]
 800a304:	4631      	mov	r1, r6
 800a306:	4628      	mov	r0, r5
 800a308:	47b8      	blx	r7
 800a30a:	3001      	adds	r0, #1
 800a30c:	f43f aecd 	beq.w	800a0aa <_printf_float+0xba>
 800a310:	f10b 0b01 	add.w	fp, fp, #1
 800a314:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a318:	ebaa 0309 	sub.w	r3, sl, r9
 800a31c:	455b      	cmp	r3, fp
 800a31e:	dcef      	bgt.n	800a300 <_printf_float+0x310>
 800a320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a324:	429a      	cmp	r2, r3
 800a326:	44d0      	add	r8, sl
 800a328:	db15      	blt.n	800a356 <_printf_float+0x366>
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	07da      	lsls	r2, r3, #31
 800a32e:	d412      	bmi.n	800a356 <_printf_float+0x366>
 800a330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a332:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a334:	eba3 020a 	sub.w	r2, r3, sl
 800a338:	eba3 0a01 	sub.w	sl, r3, r1
 800a33c:	4592      	cmp	sl, r2
 800a33e:	bfa8      	it	ge
 800a340:	4692      	movge	sl, r2
 800a342:	f1ba 0f00 	cmp.w	sl, #0
 800a346:	dc0e      	bgt.n	800a366 <_printf_float+0x376>
 800a348:	f04f 0800 	mov.w	r8, #0
 800a34c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a350:	f104 091a 	add.w	r9, r4, #26
 800a354:	e019      	b.n	800a38a <_printf_float+0x39a>
 800a356:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a35a:	4631      	mov	r1, r6
 800a35c:	4628      	mov	r0, r5
 800a35e:	47b8      	blx	r7
 800a360:	3001      	adds	r0, #1
 800a362:	d1e5      	bne.n	800a330 <_printf_float+0x340>
 800a364:	e6a1      	b.n	800a0aa <_printf_float+0xba>
 800a366:	4653      	mov	r3, sl
 800a368:	4642      	mov	r2, r8
 800a36a:	4631      	mov	r1, r6
 800a36c:	4628      	mov	r0, r5
 800a36e:	47b8      	blx	r7
 800a370:	3001      	adds	r0, #1
 800a372:	d1e9      	bne.n	800a348 <_printf_float+0x358>
 800a374:	e699      	b.n	800a0aa <_printf_float+0xba>
 800a376:	2301      	movs	r3, #1
 800a378:	464a      	mov	r2, r9
 800a37a:	4631      	mov	r1, r6
 800a37c:	4628      	mov	r0, r5
 800a37e:	47b8      	blx	r7
 800a380:	3001      	adds	r0, #1
 800a382:	f43f ae92 	beq.w	800a0aa <_printf_float+0xba>
 800a386:	f108 0801 	add.w	r8, r8, #1
 800a38a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a38e:	1a9b      	subs	r3, r3, r2
 800a390:	eba3 030a 	sub.w	r3, r3, sl
 800a394:	4543      	cmp	r3, r8
 800a396:	dcee      	bgt.n	800a376 <_printf_float+0x386>
 800a398:	e74a      	b.n	800a230 <_printf_float+0x240>
 800a39a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a39c:	2a01      	cmp	r2, #1
 800a39e:	dc01      	bgt.n	800a3a4 <_printf_float+0x3b4>
 800a3a0:	07db      	lsls	r3, r3, #31
 800a3a2:	d53a      	bpl.n	800a41a <_printf_float+0x42a>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	4642      	mov	r2, r8
 800a3a8:	4631      	mov	r1, r6
 800a3aa:	4628      	mov	r0, r5
 800a3ac:	47b8      	blx	r7
 800a3ae:	3001      	adds	r0, #1
 800a3b0:	f43f ae7b 	beq.w	800a0aa <_printf_float+0xba>
 800a3b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3b8:	4631      	mov	r1, r6
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	47b8      	blx	r7
 800a3be:	3001      	adds	r0, #1
 800a3c0:	f108 0801 	add.w	r8, r8, #1
 800a3c4:	f43f ae71 	beq.w	800a0aa <_printf_float+0xba>
 800a3c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f103 3aff 	add.w	sl, r3, #4294967295
 800a3d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f7f6 fb77 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3da:	b9c8      	cbnz	r0, 800a410 <_printf_float+0x420>
 800a3dc:	4653      	mov	r3, sl
 800a3de:	4642      	mov	r2, r8
 800a3e0:	4631      	mov	r1, r6
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	47b8      	blx	r7
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	d10e      	bne.n	800a408 <_printf_float+0x418>
 800a3ea:	e65e      	b.n	800a0aa <_printf_float+0xba>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	4652      	mov	r2, sl
 800a3f0:	4631      	mov	r1, r6
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	47b8      	blx	r7
 800a3f6:	3001      	adds	r0, #1
 800a3f8:	f43f ae57 	beq.w	800a0aa <_printf_float+0xba>
 800a3fc:	f108 0801 	add.w	r8, r8, #1
 800a400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a402:	3b01      	subs	r3, #1
 800a404:	4543      	cmp	r3, r8
 800a406:	dcf1      	bgt.n	800a3ec <_printf_float+0x3fc>
 800a408:	464b      	mov	r3, r9
 800a40a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a40e:	e6de      	b.n	800a1ce <_printf_float+0x1de>
 800a410:	f04f 0800 	mov.w	r8, #0
 800a414:	f104 0a1a 	add.w	sl, r4, #26
 800a418:	e7f2      	b.n	800a400 <_printf_float+0x410>
 800a41a:	2301      	movs	r3, #1
 800a41c:	e7df      	b.n	800a3de <_printf_float+0x3ee>
 800a41e:	2301      	movs	r3, #1
 800a420:	464a      	mov	r2, r9
 800a422:	4631      	mov	r1, r6
 800a424:	4628      	mov	r0, r5
 800a426:	47b8      	blx	r7
 800a428:	3001      	adds	r0, #1
 800a42a:	f43f ae3e 	beq.w	800a0aa <_printf_float+0xba>
 800a42e:	f108 0801 	add.w	r8, r8, #1
 800a432:	68e3      	ldr	r3, [r4, #12]
 800a434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a436:	1a9b      	subs	r3, r3, r2
 800a438:	4543      	cmp	r3, r8
 800a43a:	dcf0      	bgt.n	800a41e <_printf_float+0x42e>
 800a43c:	e6fc      	b.n	800a238 <_printf_float+0x248>
 800a43e:	f04f 0800 	mov.w	r8, #0
 800a442:	f104 0919 	add.w	r9, r4, #25
 800a446:	e7f4      	b.n	800a432 <_printf_float+0x442>
 800a448:	2900      	cmp	r1, #0
 800a44a:	f43f ae8b 	beq.w	800a164 <_printf_float+0x174>
 800a44e:	2300      	movs	r3, #0
 800a450:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a454:	ab09      	add	r3, sp, #36	; 0x24
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	ec49 8b10 	vmov	d0, r8, r9
 800a45c:	6022      	str	r2, [r4, #0]
 800a45e:	f8cd a004 	str.w	sl, [sp, #4]
 800a462:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a466:	4628      	mov	r0, r5
 800a468:	f7ff fd2e 	bl	8009ec8 <__cvt>
 800a46c:	4680      	mov	r8, r0
 800a46e:	e648      	b.n	800a102 <_printf_float+0x112>

0800a470 <_printf_common>:
 800a470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a474:	4691      	mov	r9, r2
 800a476:	461f      	mov	r7, r3
 800a478:	688a      	ldr	r2, [r1, #8]
 800a47a:	690b      	ldr	r3, [r1, #16]
 800a47c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a480:	4293      	cmp	r3, r2
 800a482:	bfb8      	it	lt
 800a484:	4613      	movlt	r3, r2
 800a486:	f8c9 3000 	str.w	r3, [r9]
 800a48a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a48e:	4606      	mov	r6, r0
 800a490:	460c      	mov	r4, r1
 800a492:	b112      	cbz	r2, 800a49a <_printf_common+0x2a>
 800a494:	3301      	adds	r3, #1
 800a496:	f8c9 3000 	str.w	r3, [r9]
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	0699      	lsls	r1, r3, #26
 800a49e:	bf42      	ittt	mi
 800a4a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a4a4:	3302      	addmi	r3, #2
 800a4a6:	f8c9 3000 	strmi.w	r3, [r9]
 800a4aa:	6825      	ldr	r5, [r4, #0]
 800a4ac:	f015 0506 	ands.w	r5, r5, #6
 800a4b0:	d107      	bne.n	800a4c2 <_printf_common+0x52>
 800a4b2:	f104 0a19 	add.w	sl, r4, #25
 800a4b6:	68e3      	ldr	r3, [r4, #12]
 800a4b8:	f8d9 2000 	ldr.w	r2, [r9]
 800a4bc:	1a9b      	subs	r3, r3, r2
 800a4be:	42ab      	cmp	r3, r5
 800a4c0:	dc28      	bgt.n	800a514 <_printf_common+0xa4>
 800a4c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a4c6:	6822      	ldr	r2, [r4, #0]
 800a4c8:	3300      	adds	r3, #0
 800a4ca:	bf18      	it	ne
 800a4cc:	2301      	movne	r3, #1
 800a4ce:	0692      	lsls	r2, r2, #26
 800a4d0:	d42d      	bmi.n	800a52e <_printf_common+0xbe>
 800a4d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4d6:	4639      	mov	r1, r7
 800a4d8:	4630      	mov	r0, r6
 800a4da:	47c0      	blx	r8
 800a4dc:	3001      	adds	r0, #1
 800a4de:	d020      	beq.n	800a522 <_printf_common+0xb2>
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	68e5      	ldr	r5, [r4, #12]
 800a4e4:	f8d9 2000 	ldr.w	r2, [r9]
 800a4e8:	f003 0306 	and.w	r3, r3, #6
 800a4ec:	2b04      	cmp	r3, #4
 800a4ee:	bf08      	it	eq
 800a4f0:	1aad      	subeq	r5, r5, r2
 800a4f2:	68a3      	ldr	r3, [r4, #8]
 800a4f4:	6922      	ldr	r2, [r4, #16]
 800a4f6:	bf0c      	ite	eq
 800a4f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4fc:	2500      	movne	r5, #0
 800a4fe:	4293      	cmp	r3, r2
 800a500:	bfc4      	itt	gt
 800a502:	1a9b      	subgt	r3, r3, r2
 800a504:	18ed      	addgt	r5, r5, r3
 800a506:	f04f 0900 	mov.w	r9, #0
 800a50a:	341a      	adds	r4, #26
 800a50c:	454d      	cmp	r5, r9
 800a50e:	d11a      	bne.n	800a546 <_printf_common+0xd6>
 800a510:	2000      	movs	r0, #0
 800a512:	e008      	b.n	800a526 <_printf_common+0xb6>
 800a514:	2301      	movs	r3, #1
 800a516:	4652      	mov	r2, sl
 800a518:	4639      	mov	r1, r7
 800a51a:	4630      	mov	r0, r6
 800a51c:	47c0      	blx	r8
 800a51e:	3001      	adds	r0, #1
 800a520:	d103      	bne.n	800a52a <_printf_common+0xba>
 800a522:	f04f 30ff 	mov.w	r0, #4294967295
 800a526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a52a:	3501      	adds	r5, #1
 800a52c:	e7c3      	b.n	800a4b6 <_printf_common+0x46>
 800a52e:	18e1      	adds	r1, r4, r3
 800a530:	1c5a      	adds	r2, r3, #1
 800a532:	2030      	movs	r0, #48	; 0x30
 800a534:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a538:	4422      	add	r2, r4
 800a53a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a53e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a542:	3302      	adds	r3, #2
 800a544:	e7c5      	b.n	800a4d2 <_printf_common+0x62>
 800a546:	2301      	movs	r3, #1
 800a548:	4622      	mov	r2, r4
 800a54a:	4639      	mov	r1, r7
 800a54c:	4630      	mov	r0, r6
 800a54e:	47c0      	blx	r8
 800a550:	3001      	adds	r0, #1
 800a552:	d0e6      	beq.n	800a522 <_printf_common+0xb2>
 800a554:	f109 0901 	add.w	r9, r9, #1
 800a558:	e7d8      	b.n	800a50c <_printf_common+0x9c>
	...

0800a55c <_printf_i>:
 800a55c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a560:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a564:	460c      	mov	r4, r1
 800a566:	7e09      	ldrb	r1, [r1, #24]
 800a568:	b085      	sub	sp, #20
 800a56a:	296e      	cmp	r1, #110	; 0x6e
 800a56c:	4617      	mov	r7, r2
 800a56e:	4606      	mov	r6, r0
 800a570:	4698      	mov	r8, r3
 800a572:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a574:	f000 80b3 	beq.w	800a6de <_printf_i+0x182>
 800a578:	d822      	bhi.n	800a5c0 <_printf_i+0x64>
 800a57a:	2963      	cmp	r1, #99	; 0x63
 800a57c:	d036      	beq.n	800a5ec <_printf_i+0x90>
 800a57e:	d80a      	bhi.n	800a596 <_printf_i+0x3a>
 800a580:	2900      	cmp	r1, #0
 800a582:	f000 80b9 	beq.w	800a6f8 <_printf_i+0x19c>
 800a586:	2958      	cmp	r1, #88	; 0x58
 800a588:	f000 8083 	beq.w	800a692 <_printf_i+0x136>
 800a58c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a590:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a594:	e032      	b.n	800a5fc <_printf_i+0xa0>
 800a596:	2964      	cmp	r1, #100	; 0x64
 800a598:	d001      	beq.n	800a59e <_printf_i+0x42>
 800a59a:	2969      	cmp	r1, #105	; 0x69
 800a59c:	d1f6      	bne.n	800a58c <_printf_i+0x30>
 800a59e:	6820      	ldr	r0, [r4, #0]
 800a5a0:	6813      	ldr	r3, [r2, #0]
 800a5a2:	0605      	lsls	r5, r0, #24
 800a5a4:	f103 0104 	add.w	r1, r3, #4
 800a5a8:	d52a      	bpl.n	800a600 <_printf_i+0xa4>
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6011      	str	r1, [r2, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	da03      	bge.n	800a5ba <_printf_i+0x5e>
 800a5b2:	222d      	movs	r2, #45	; 0x2d
 800a5b4:	425b      	negs	r3, r3
 800a5b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a5ba:	486f      	ldr	r0, [pc, #444]	; (800a778 <_printf_i+0x21c>)
 800a5bc:	220a      	movs	r2, #10
 800a5be:	e039      	b.n	800a634 <_printf_i+0xd8>
 800a5c0:	2973      	cmp	r1, #115	; 0x73
 800a5c2:	f000 809d 	beq.w	800a700 <_printf_i+0x1a4>
 800a5c6:	d808      	bhi.n	800a5da <_printf_i+0x7e>
 800a5c8:	296f      	cmp	r1, #111	; 0x6f
 800a5ca:	d020      	beq.n	800a60e <_printf_i+0xb2>
 800a5cc:	2970      	cmp	r1, #112	; 0x70
 800a5ce:	d1dd      	bne.n	800a58c <_printf_i+0x30>
 800a5d0:	6823      	ldr	r3, [r4, #0]
 800a5d2:	f043 0320 	orr.w	r3, r3, #32
 800a5d6:	6023      	str	r3, [r4, #0]
 800a5d8:	e003      	b.n	800a5e2 <_printf_i+0x86>
 800a5da:	2975      	cmp	r1, #117	; 0x75
 800a5dc:	d017      	beq.n	800a60e <_printf_i+0xb2>
 800a5de:	2978      	cmp	r1, #120	; 0x78
 800a5e0:	d1d4      	bne.n	800a58c <_printf_i+0x30>
 800a5e2:	2378      	movs	r3, #120	; 0x78
 800a5e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5e8:	4864      	ldr	r0, [pc, #400]	; (800a77c <_printf_i+0x220>)
 800a5ea:	e055      	b.n	800a698 <_printf_i+0x13c>
 800a5ec:	6813      	ldr	r3, [r2, #0]
 800a5ee:	1d19      	adds	r1, r3, #4
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	6011      	str	r1, [r2, #0]
 800a5f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e08c      	b.n	800a71a <_printf_i+0x1be>
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	6011      	str	r1, [r2, #0]
 800a604:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a608:	bf18      	it	ne
 800a60a:	b21b      	sxthne	r3, r3
 800a60c:	e7cf      	b.n	800a5ae <_printf_i+0x52>
 800a60e:	6813      	ldr	r3, [r2, #0]
 800a610:	6825      	ldr	r5, [r4, #0]
 800a612:	1d18      	adds	r0, r3, #4
 800a614:	6010      	str	r0, [r2, #0]
 800a616:	0628      	lsls	r0, r5, #24
 800a618:	d501      	bpl.n	800a61e <_printf_i+0xc2>
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	e002      	b.n	800a624 <_printf_i+0xc8>
 800a61e:	0668      	lsls	r0, r5, #25
 800a620:	d5fb      	bpl.n	800a61a <_printf_i+0xbe>
 800a622:	881b      	ldrh	r3, [r3, #0]
 800a624:	4854      	ldr	r0, [pc, #336]	; (800a778 <_printf_i+0x21c>)
 800a626:	296f      	cmp	r1, #111	; 0x6f
 800a628:	bf14      	ite	ne
 800a62a:	220a      	movne	r2, #10
 800a62c:	2208      	moveq	r2, #8
 800a62e:	2100      	movs	r1, #0
 800a630:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a634:	6865      	ldr	r5, [r4, #4]
 800a636:	60a5      	str	r5, [r4, #8]
 800a638:	2d00      	cmp	r5, #0
 800a63a:	f2c0 8095 	blt.w	800a768 <_printf_i+0x20c>
 800a63e:	6821      	ldr	r1, [r4, #0]
 800a640:	f021 0104 	bic.w	r1, r1, #4
 800a644:	6021      	str	r1, [r4, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d13d      	bne.n	800a6c6 <_printf_i+0x16a>
 800a64a:	2d00      	cmp	r5, #0
 800a64c:	f040 808e 	bne.w	800a76c <_printf_i+0x210>
 800a650:	4665      	mov	r5, ip
 800a652:	2a08      	cmp	r2, #8
 800a654:	d10b      	bne.n	800a66e <_printf_i+0x112>
 800a656:	6823      	ldr	r3, [r4, #0]
 800a658:	07db      	lsls	r3, r3, #31
 800a65a:	d508      	bpl.n	800a66e <_printf_i+0x112>
 800a65c:	6923      	ldr	r3, [r4, #16]
 800a65e:	6862      	ldr	r2, [r4, #4]
 800a660:	429a      	cmp	r2, r3
 800a662:	bfde      	ittt	le
 800a664:	2330      	movle	r3, #48	; 0x30
 800a666:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a66a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a66e:	ebac 0305 	sub.w	r3, ip, r5
 800a672:	6123      	str	r3, [r4, #16]
 800a674:	f8cd 8000 	str.w	r8, [sp]
 800a678:	463b      	mov	r3, r7
 800a67a:	aa03      	add	r2, sp, #12
 800a67c:	4621      	mov	r1, r4
 800a67e:	4630      	mov	r0, r6
 800a680:	f7ff fef6 	bl	800a470 <_printf_common>
 800a684:	3001      	adds	r0, #1
 800a686:	d14d      	bne.n	800a724 <_printf_i+0x1c8>
 800a688:	f04f 30ff 	mov.w	r0, #4294967295
 800a68c:	b005      	add	sp, #20
 800a68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a692:	4839      	ldr	r0, [pc, #228]	; (800a778 <_printf_i+0x21c>)
 800a694:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a698:	6813      	ldr	r3, [r2, #0]
 800a69a:	6821      	ldr	r1, [r4, #0]
 800a69c:	1d1d      	adds	r5, r3, #4
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	6015      	str	r5, [r2, #0]
 800a6a2:	060a      	lsls	r2, r1, #24
 800a6a4:	d50b      	bpl.n	800a6be <_printf_i+0x162>
 800a6a6:	07ca      	lsls	r2, r1, #31
 800a6a8:	bf44      	itt	mi
 800a6aa:	f041 0120 	orrmi.w	r1, r1, #32
 800a6ae:	6021      	strmi	r1, [r4, #0]
 800a6b0:	b91b      	cbnz	r3, 800a6ba <_printf_i+0x15e>
 800a6b2:	6822      	ldr	r2, [r4, #0]
 800a6b4:	f022 0220 	bic.w	r2, r2, #32
 800a6b8:	6022      	str	r2, [r4, #0]
 800a6ba:	2210      	movs	r2, #16
 800a6bc:	e7b7      	b.n	800a62e <_printf_i+0xd2>
 800a6be:	064d      	lsls	r5, r1, #25
 800a6c0:	bf48      	it	mi
 800a6c2:	b29b      	uxthmi	r3, r3
 800a6c4:	e7ef      	b.n	800a6a6 <_printf_i+0x14a>
 800a6c6:	4665      	mov	r5, ip
 800a6c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6cc:	fb02 3311 	mls	r3, r2, r1, r3
 800a6d0:	5cc3      	ldrb	r3, [r0, r3]
 800a6d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	d1f5      	bne.n	800a6c8 <_printf_i+0x16c>
 800a6dc:	e7b9      	b.n	800a652 <_printf_i+0xf6>
 800a6de:	6813      	ldr	r3, [r2, #0]
 800a6e0:	6825      	ldr	r5, [r4, #0]
 800a6e2:	6961      	ldr	r1, [r4, #20]
 800a6e4:	1d18      	adds	r0, r3, #4
 800a6e6:	6010      	str	r0, [r2, #0]
 800a6e8:	0628      	lsls	r0, r5, #24
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	d501      	bpl.n	800a6f2 <_printf_i+0x196>
 800a6ee:	6019      	str	r1, [r3, #0]
 800a6f0:	e002      	b.n	800a6f8 <_printf_i+0x19c>
 800a6f2:	066a      	lsls	r2, r5, #25
 800a6f4:	d5fb      	bpl.n	800a6ee <_printf_i+0x192>
 800a6f6:	8019      	strh	r1, [r3, #0]
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	6123      	str	r3, [r4, #16]
 800a6fc:	4665      	mov	r5, ip
 800a6fe:	e7b9      	b.n	800a674 <_printf_i+0x118>
 800a700:	6813      	ldr	r3, [r2, #0]
 800a702:	1d19      	adds	r1, r3, #4
 800a704:	6011      	str	r1, [r2, #0]
 800a706:	681d      	ldr	r5, [r3, #0]
 800a708:	6862      	ldr	r2, [r4, #4]
 800a70a:	2100      	movs	r1, #0
 800a70c:	4628      	mov	r0, r5
 800a70e:	f7f5 fd67 	bl	80001e0 <memchr>
 800a712:	b108      	cbz	r0, 800a718 <_printf_i+0x1bc>
 800a714:	1b40      	subs	r0, r0, r5
 800a716:	6060      	str	r0, [r4, #4]
 800a718:	6863      	ldr	r3, [r4, #4]
 800a71a:	6123      	str	r3, [r4, #16]
 800a71c:	2300      	movs	r3, #0
 800a71e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a722:	e7a7      	b.n	800a674 <_printf_i+0x118>
 800a724:	6923      	ldr	r3, [r4, #16]
 800a726:	462a      	mov	r2, r5
 800a728:	4639      	mov	r1, r7
 800a72a:	4630      	mov	r0, r6
 800a72c:	47c0      	blx	r8
 800a72e:	3001      	adds	r0, #1
 800a730:	d0aa      	beq.n	800a688 <_printf_i+0x12c>
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	079b      	lsls	r3, r3, #30
 800a736:	d413      	bmi.n	800a760 <_printf_i+0x204>
 800a738:	68e0      	ldr	r0, [r4, #12]
 800a73a:	9b03      	ldr	r3, [sp, #12]
 800a73c:	4298      	cmp	r0, r3
 800a73e:	bfb8      	it	lt
 800a740:	4618      	movlt	r0, r3
 800a742:	e7a3      	b.n	800a68c <_printf_i+0x130>
 800a744:	2301      	movs	r3, #1
 800a746:	464a      	mov	r2, r9
 800a748:	4639      	mov	r1, r7
 800a74a:	4630      	mov	r0, r6
 800a74c:	47c0      	blx	r8
 800a74e:	3001      	adds	r0, #1
 800a750:	d09a      	beq.n	800a688 <_printf_i+0x12c>
 800a752:	3501      	adds	r5, #1
 800a754:	68e3      	ldr	r3, [r4, #12]
 800a756:	9a03      	ldr	r2, [sp, #12]
 800a758:	1a9b      	subs	r3, r3, r2
 800a75a:	42ab      	cmp	r3, r5
 800a75c:	dcf2      	bgt.n	800a744 <_printf_i+0x1e8>
 800a75e:	e7eb      	b.n	800a738 <_printf_i+0x1dc>
 800a760:	2500      	movs	r5, #0
 800a762:	f104 0919 	add.w	r9, r4, #25
 800a766:	e7f5      	b.n	800a754 <_printf_i+0x1f8>
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1ac      	bne.n	800a6c6 <_printf_i+0x16a>
 800a76c:	7803      	ldrb	r3, [r0, #0]
 800a76e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a772:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a776:	e76c      	b.n	800a652 <_printf_i+0xf6>
 800a778:	0800be8a 	.word	0x0800be8a
 800a77c:	0800be9b 	.word	0x0800be9b

0800a780 <_sbrk_r>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	4c06      	ldr	r4, [pc, #24]	; (800a79c <_sbrk_r+0x1c>)
 800a784:	2300      	movs	r3, #0
 800a786:	4605      	mov	r5, r0
 800a788:	4608      	mov	r0, r1
 800a78a:	6023      	str	r3, [r4, #0]
 800a78c:	f7f7 fc3e 	bl	800200c <_sbrk>
 800a790:	1c43      	adds	r3, r0, #1
 800a792:	d102      	bne.n	800a79a <_sbrk_r+0x1a>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	b103      	cbz	r3, 800a79a <_sbrk_r+0x1a>
 800a798:	602b      	str	r3, [r5, #0]
 800a79a:	bd38      	pop	{r3, r4, r5, pc}
 800a79c:	20001e8c 	.word	0x20001e8c

0800a7a0 <siprintf>:
 800a7a0:	b40e      	push	{r1, r2, r3}
 800a7a2:	b500      	push	{lr}
 800a7a4:	b09c      	sub	sp, #112	; 0x70
 800a7a6:	ab1d      	add	r3, sp, #116	; 0x74
 800a7a8:	9002      	str	r0, [sp, #8]
 800a7aa:	9006      	str	r0, [sp, #24]
 800a7ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7b0:	4809      	ldr	r0, [pc, #36]	; (800a7d8 <siprintf+0x38>)
 800a7b2:	9107      	str	r1, [sp, #28]
 800a7b4:	9104      	str	r1, [sp, #16]
 800a7b6:	4909      	ldr	r1, [pc, #36]	; (800a7dc <siprintf+0x3c>)
 800a7b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7bc:	9105      	str	r1, [sp, #20]
 800a7be:	6800      	ldr	r0, [r0, #0]
 800a7c0:	9301      	str	r3, [sp, #4]
 800a7c2:	a902      	add	r1, sp, #8
 800a7c4:	f001 f9ae 	bl	800bb24 <_svfiprintf_r>
 800a7c8:	9b02      	ldr	r3, [sp, #8]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	701a      	strb	r2, [r3, #0]
 800a7ce:	b01c      	add	sp, #112	; 0x70
 800a7d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7d4:	b003      	add	sp, #12
 800a7d6:	4770      	bx	lr
 800a7d8:	20000180 	.word	0x20000180
 800a7dc:	ffff0208 	.word	0xffff0208

0800a7e0 <quorem>:
 800a7e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e4:	6903      	ldr	r3, [r0, #16]
 800a7e6:	690c      	ldr	r4, [r1, #16]
 800a7e8:	42a3      	cmp	r3, r4
 800a7ea:	4680      	mov	r8, r0
 800a7ec:	f2c0 8082 	blt.w	800a8f4 <quorem+0x114>
 800a7f0:	3c01      	subs	r4, #1
 800a7f2:	f101 0714 	add.w	r7, r1, #20
 800a7f6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a7fa:	f100 0614 	add.w	r6, r0, #20
 800a7fe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a802:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a806:	eb06 030c 	add.w	r3, r6, ip
 800a80a:	3501      	adds	r5, #1
 800a80c:	eb07 090c 	add.w	r9, r7, ip
 800a810:	9301      	str	r3, [sp, #4]
 800a812:	fbb0 f5f5 	udiv	r5, r0, r5
 800a816:	b395      	cbz	r5, 800a87e <quorem+0x9e>
 800a818:	f04f 0a00 	mov.w	sl, #0
 800a81c:	4638      	mov	r0, r7
 800a81e:	46b6      	mov	lr, r6
 800a820:	46d3      	mov	fp, sl
 800a822:	f850 2b04 	ldr.w	r2, [r0], #4
 800a826:	b293      	uxth	r3, r2
 800a828:	fb05 a303 	mla	r3, r5, r3, sl
 800a82c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a830:	b29b      	uxth	r3, r3
 800a832:	ebab 0303 	sub.w	r3, fp, r3
 800a836:	0c12      	lsrs	r2, r2, #16
 800a838:	f8de b000 	ldr.w	fp, [lr]
 800a83c:	fb05 a202 	mla	r2, r5, r2, sl
 800a840:	fa13 f38b 	uxtah	r3, r3, fp
 800a844:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a848:	fa1f fb82 	uxth.w	fp, r2
 800a84c:	f8de 2000 	ldr.w	r2, [lr]
 800a850:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a854:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a858:	b29b      	uxth	r3, r3
 800a85a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a85e:	4581      	cmp	r9, r0
 800a860:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a864:	f84e 3b04 	str.w	r3, [lr], #4
 800a868:	d2db      	bcs.n	800a822 <quorem+0x42>
 800a86a:	f856 300c 	ldr.w	r3, [r6, ip]
 800a86e:	b933      	cbnz	r3, 800a87e <quorem+0x9e>
 800a870:	9b01      	ldr	r3, [sp, #4]
 800a872:	3b04      	subs	r3, #4
 800a874:	429e      	cmp	r6, r3
 800a876:	461a      	mov	r2, r3
 800a878:	d330      	bcc.n	800a8dc <quorem+0xfc>
 800a87a:	f8c8 4010 	str.w	r4, [r8, #16]
 800a87e:	4640      	mov	r0, r8
 800a880:	f001 f822 	bl	800b8c8 <__mcmp>
 800a884:	2800      	cmp	r0, #0
 800a886:	db25      	blt.n	800a8d4 <quorem+0xf4>
 800a888:	3501      	adds	r5, #1
 800a88a:	4630      	mov	r0, r6
 800a88c:	f04f 0c00 	mov.w	ip, #0
 800a890:	f857 2b04 	ldr.w	r2, [r7], #4
 800a894:	f8d0 e000 	ldr.w	lr, [r0]
 800a898:	b293      	uxth	r3, r2
 800a89a:	ebac 0303 	sub.w	r3, ip, r3
 800a89e:	0c12      	lsrs	r2, r2, #16
 800a8a0:	fa13 f38e 	uxtah	r3, r3, lr
 800a8a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a8a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8b2:	45b9      	cmp	r9, r7
 800a8b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a8b8:	f840 3b04 	str.w	r3, [r0], #4
 800a8bc:	d2e8      	bcs.n	800a890 <quorem+0xb0>
 800a8be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a8c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a8c6:	b92a      	cbnz	r2, 800a8d4 <quorem+0xf4>
 800a8c8:	3b04      	subs	r3, #4
 800a8ca:	429e      	cmp	r6, r3
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	d30b      	bcc.n	800a8e8 <quorem+0x108>
 800a8d0:	f8c8 4010 	str.w	r4, [r8, #16]
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	b003      	add	sp, #12
 800a8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8dc:	6812      	ldr	r2, [r2, #0]
 800a8de:	3b04      	subs	r3, #4
 800a8e0:	2a00      	cmp	r2, #0
 800a8e2:	d1ca      	bne.n	800a87a <quorem+0x9a>
 800a8e4:	3c01      	subs	r4, #1
 800a8e6:	e7c5      	b.n	800a874 <quorem+0x94>
 800a8e8:	6812      	ldr	r2, [r2, #0]
 800a8ea:	3b04      	subs	r3, #4
 800a8ec:	2a00      	cmp	r2, #0
 800a8ee:	d1ef      	bne.n	800a8d0 <quorem+0xf0>
 800a8f0:	3c01      	subs	r4, #1
 800a8f2:	e7ea      	b.n	800a8ca <quorem+0xea>
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	e7ee      	b.n	800a8d6 <quorem+0xf6>

0800a8f8 <_dtoa_r>:
 800a8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8fc:	ec57 6b10 	vmov	r6, r7, d0
 800a900:	b097      	sub	sp, #92	; 0x5c
 800a902:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a904:	9106      	str	r1, [sp, #24]
 800a906:	4604      	mov	r4, r0
 800a908:	920b      	str	r2, [sp, #44]	; 0x2c
 800a90a:	9312      	str	r3, [sp, #72]	; 0x48
 800a90c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a910:	e9cd 6700 	strd	r6, r7, [sp]
 800a914:	b93d      	cbnz	r5, 800a926 <_dtoa_r+0x2e>
 800a916:	2010      	movs	r0, #16
 800a918:	f7ff fa16 	bl	8009d48 <malloc>
 800a91c:	6260      	str	r0, [r4, #36]	; 0x24
 800a91e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a922:	6005      	str	r5, [r0, #0]
 800a924:	60c5      	str	r5, [r0, #12]
 800a926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a928:	6819      	ldr	r1, [r3, #0]
 800a92a:	b151      	cbz	r1, 800a942 <_dtoa_r+0x4a>
 800a92c:	685a      	ldr	r2, [r3, #4]
 800a92e:	604a      	str	r2, [r1, #4]
 800a930:	2301      	movs	r3, #1
 800a932:	4093      	lsls	r3, r2
 800a934:	608b      	str	r3, [r1, #8]
 800a936:	4620      	mov	r0, r4
 800a938:	f000 fde5 	bl	800b506 <_Bfree>
 800a93c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a93e:	2200      	movs	r2, #0
 800a940:	601a      	str	r2, [r3, #0]
 800a942:	1e3b      	subs	r3, r7, #0
 800a944:	bfbb      	ittet	lt
 800a946:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a94a:	9301      	strlt	r3, [sp, #4]
 800a94c:	2300      	movge	r3, #0
 800a94e:	2201      	movlt	r2, #1
 800a950:	bfac      	ite	ge
 800a952:	f8c8 3000 	strge.w	r3, [r8]
 800a956:	f8c8 2000 	strlt.w	r2, [r8]
 800a95a:	4baf      	ldr	r3, [pc, #700]	; (800ac18 <_dtoa_r+0x320>)
 800a95c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a960:	ea33 0308 	bics.w	r3, r3, r8
 800a964:	d114      	bne.n	800a990 <_dtoa_r+0x98>
 800a966:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a968:	f242 730f 	movw	r3, #9999	; 0x270f
 800a96c:	6013      	str	r3, [r2, #0]
 800a96e:	9b00      	ldr	r3, [sp, #0]
 800a970:	b923      	cbnz	r3, 800a97c <_dtoa_r+0x84>
 800a972:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a976:	2800      	cmp	r0, #0
 800a978:	f000 8542 	beq.w	800b400 <_dtoa_r+0xb08>
 800a97c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a97e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ac2c <_dtoa_r+0x334>
 800a982:	2b00      	cmp	r3, #0
 800a984:	f000 8544 	beq.w	800b410 <_dtoa_r+0xb18>
 800a988:	f10b 0303 	add.w	r3, fp, #3
 800a98c:	f000 bd3e 	b.w	800b40c <_dtoa_r+0xb14>
 800a990:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a994:	2200      	movs	r2, #0
 800a996:	2300      	movs	r3, #0
 800a998:	4630      	mov	r0, r6
 800a99a:	4639      	mov	r1, r7
 800a99c:	f7f6 f894 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9a0:	4681      	mov	r9, r0
 800a9a2:	b168      	cbz	r0, 800a9c0 <_dtoa_r+0xc8>
 800a9a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	6013      	str	r3, [r2, #0]
 800a9aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 8524 	beq.w	800b3fa <_dtoa_r+0xb02>
 800a9b2:	4b9a      	ldr	r3, [pc, #616]	; (800ac1c <_dtoa_r+0x324>)
 800a9b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a9b6:	f103 3bff 	add.w	fp, r3, #4294967295
 800a9ba:	6013      	str	r3, [r2, #0]
 800a9bc:	f000 bd28 	b.w	800b410 <_dtoa_r+0xb18>
 800a9c0:	aa14      	add	r2, sp, #80	; 0x50
 800a9c2:	a915      	add	r1, sp, #84	; 0x54
 800a9c4:	ec47 6b10 	vmov	d0, r6, r7
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f000 fff4 	bl	800b9b6 <__d2b>
 800a9ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a9d2:	9004      	str	r0, [sp, #16]
 800a9d4:	2d00      	cmp	r5, #0
 800a9d6:	d07c      	beq.n	800aad2 <_dtoa_r+0x1da>
 800a9d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a9dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a9e0:	46b2      	mov	sl, r6
 800a9e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a9e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a9ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	4b8b      	ldr	r3, [pc, #556]	; (800ac20 <_dtoa_r+0x328>)
 800a9f2:	4650      	mov	r0, sl
 800a9f4:	4659      	mov	r1, fp
 800a9f6:	f7f5 fc47 	bl	8000288 <__aeabi_dsub>
 800a9fa:	a381      	add	r3, pc, #516	; (adr r3, 800ac00 <_dtoa_r+0x308>)
 800a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa00:	f7f5 fdfa 	bl	80005f8 <__aeabi_dmul>
 800aa04:	a380      	add	r3, pc, #512	; (adr r3, 800ac08 <_dtoa_r+0x310>)
 800aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0a:	f7f5 fc3f 	bl	800028c <__adddf3>
 800aa0e:	4606      	mov	r6, r0
 800aa10:	4628      	mov	r0, r5
 800aa12:	460f      	mov	r7, r1
 800aa14:	f7f5 fd86 	bl	8000524 <__aeabi_i2d>
 800aa18:	a37d      	add	r3, pc, #500	; (adr r3, 800ac10 <_dtoa_r+0x318>)
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	f7f5 fdeb 	bl	80005f8 <__aeabi_dmul>
 800aa22:	4602      	mov	r2, r0
 800aa24:	460b      	mov	r3, r1
 800aa26:	4630      	mov	r0, r6
 800aa28:	4639      	mov	r1, r7
 800aa2a:	f7f5 fc2f 	bl	800028c <__adddf3>
 800aa2e:	4606      	mov	r6, r0
 800aa30:	460f      	mov	r7, r1
 800aa32:	f7f6 f891 	bl	8000b58 <__aeabi_d2iz>
 800aa36:	2200      	movs	r2, #0
 800aa38:	4682      	mov	sl, r0
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	4639      	mov	r1, r7
 800aa40:	f7f6 f84c 	bl	8000adc <__aeabi_dcmplt>
 800aa44:	b148      	cbz	r0, 800aa5a <_dtoa_r+0x162>
 800aa46:	4650      	mov	r0, sl
 800aa48:	f7f5 fd6c 	bl	8000524 <__aeabi_i2d>
 800aa4c:	4632      	mov	r2, r6
 800aa4e:	463b      	mov	r3, r7
 800aa50:	f7f6 f83a 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa54:	b908      	cbnz	r0, 800aa5a <_dtoa_r+0x162>
 800aa56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa5a:	f1ba 0f16 	cmp.w	sl, #22
 800aa5e:	d859      	bhi.n	800ab14 <_dtoa_r+0x21c>
 800aa60:	4970      	ldr	r1, [pc, #448]	; (800ac24 <_dtoa_r+0x32c>)
 800aa62:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800aa66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa6e:	f7f6 f853 	bl	8000b18 <__aeabi_dcmpgt>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d050      	beq.n	800ab18 <_dtoa_r+0x220>
 800aa76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa80:	1b5d      	subs	r5, r3, r5
 800aa82:	f1b5 0801 	subs.w	r8, r5, #1
 800aa86:	bf49      	itett	mi
 800aa88:	f1c5 0301 	rsbmi	r3, r5, #1
 800aa8c:	2300      	movpl	r3, #0
 800aa8e:	9305      	strmi	r3, [sp, #20]
 800aa90:	f04f 0800 	movmi.w	r8, #0
 800aa94:	bf58      	it	pl
 800aa96:	9305      	strpl	r3, [sp, #20]
 800aa98:	f1ba 0f00 	cmp.w	sl, #0
 800aa9c:	db3e      	blt.n	800ab1c <_dtoa_r+0x224>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	44d0      	add	r8, sl
 800aaa2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800aaa6:	9307      	str	r3, [sp, #28]
 800aaa8:	9b06      	ldr	r3, [sp, #24]
 800aaaa:	2b09      	cmp	r3, #9
 800aaac:	f200 8090 	bhi.w	800abd0 <_dtoa_r+0x2d8>
 800aab0:	2b05      	cmp	r3, #5
 800aab2:	bfc4      	itt	gt
 800aab4:	3b04      	subgt	r3, #4
 800aab6:	9306      	strgt	r3, [sp, #24]
 800aab8:	9b06      	ldr	r3, [sp, #24]
 800aaba:	f1a3 0302 	sub.w	r3, r3, #2
 800aabe:	bfcc      	ite	gt
 800aac0:	2500      	movgt	r5, #0
 800aac2:	2501      	movle	r5, #1
 800aac4:	2b03      	cmp	r3, #3
 800aac6:	f200 808f 	bhi.w	800abe8 <_dtoa_r+0x2f0>
 800aaca:	e8df f003 	tbb	[pc, r3]
 800aace:	7f7d      	.short	0x7f7d
 800aad0:	7131      	.short	0x7131
 800aad2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800aad6:	441d      	add	r5, r3
 800aad8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800aadc:	2820      	cmp	r0, #32
 800aade:	dd13      	ble.n	800ab08 <_dtoa_r+0x210>
 800aae0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800aae4:	9b00      	ldr	r3, [sp, #0]
 800aae6:	fa08 f800 	lsl.w	r8, r8, r0
 800aaea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800aaee:	fa23 f000 	lsr.w	r0, r3, r0
 800aaf2:	ea48 0000 	orr.w	r0, r8, r0
 800aaf6:	f7f5 fd05 	bl	8000504 <__aeabi_ui2d>
 800aafa:	2301      	movs	r3, #1
 800aafc:	4682      	mov	sl, r0
 800aafe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ab02:	3d01      	subs	r5, #1
 800ab04:	9313      	str	r3, [sp, #76]	; 0x4c
 800ab06:	e772      	b.n	800a9ee <_dtoa_r+0xf6>
 800ab08:	9b00      	ldr	r3, [sp, #0]
 800ab0a:	f1c0 0020 	rsb	r0, r0, #32
 800ab0e:	fa03 f000 	lsl.w	r0, r3, r0
 800ab12:	e7f0      	b.n	800aaf6 <_dtoa_r+0x1fe>
 800ab14:	2301      	movs	r3, #1
 800ab16:	e7b1      	b.n	800aa7c <_dtoa_r+0x184>
 800ab18:	900f      	str	r0, [sp, #60]	; 0x3c
 800ab1a:	e7b0      	b.n	800aa7e <_dtoa_r+0x186>
 800ab1c:	9b05      	ldr	r3, [sp, #20]
 800ab1e:	eba3 030a 	sub.w	r3, r3, sl
 800ab22:	9305      	str	r3, [sp, #20]
 800ab24:	f1ca 0300 	rsb	r3, sl, #0
 800ab28:	9307      	str	r3, [sp, #28]
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	930e      	str	r3, [sp, #56]	; 0x38
 800ab2e:	e7bb      	b.n	800aaa8 <_dtoa_r+0x1b0>
 800ab30:	2301      	movs	r3, #1
 800ab32:	930a      	str	r3, [sp, #40]	; 0x28
 800ab34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	dd59      	ble.n	800abee <_dtoa_r+0x2f6>
 800ab3a:	9302      	str	r3, [sp, #8]
 800ab3c:	4699      	mov	r9, r3
 800ab3e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab40:	2200      	movs	r2, #0
 800ab42:	6072      	str	r2, [r6, #4]
 800ab44:	2204      	movs	r2, #4
 800ab46:	f102 0014 	add.w	r0, r2, #20
 800ab4a:	4298      	cmp	r0, r3
 800ab4c:	6871      	ldr	r1, [r6, #4]
 800ab4e:	d953      	bls.n	800abf8 <_dtoa_r+0x300>
 800ab50:	4620      	mov	r0, r4
 800ab52:	f000 fca4 	bl	800b49e <_Balloc>
 800ab56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab58:	6030      	str	r0, [r6, #0]
 800ab5a:	f1b9 0f0e 	cmp.w	r9, #14
 800ab5e:	f8d3 b000 	ldr.w	fp, [r3]
 800ab62:	f200 80e6 	bhi.w	800ad32 <_dtoa_r+0x43a>
 800ab66:	2d00      	cmp	r5, #0
 800ab68:	f000 80e3 	beq.w	800ad32 <_dtoa_r+0x43a>
 800ab6c:	ed9d 7b00 	vldr	d7, [sp]
 800ab70:	f1ba 0f00 	cmp.w	sl, #0
 800ab74:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ab78:	dd74      	ble.n	800ac64 <_dtoa_r+0x36c>
 800ab7a:	4a2a      	ldr	r2, [pc, #168]	; (800ac24 <_dtoa_r+0x32c>)
 800ab7c:	f00a 030f 	and.w	r3, sl, #15
 800ab80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ab84:	ed93 7b00 	vldr	d7, [r3]
 800ab88:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ab8c:	06f0      	lsls	r0, r6, #27
 800ab8e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ab92:	d565      	bpl.n	800ac60 <_dtoa_r+0x368>
 800ab94:	4b24      	ldr	r3, [pc, #144]	; (800ac28 <_dtoa_r+0x330>)
 800ab96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab9a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab9e:	f7f5 fe55 	bl	800084c <__aeabi_ddiv>
 800aba2:	e9cd 0100 	strd	r0, r1, [sp]
 800aba6:	f006 060f 	and.w	r6, r6, #15
 800abaa:	2503      	movs	r5, #3
 800abac:	4f1e      	ldr	r7, [pc, #120]	; (800ac28 <_dtoa_r+0x330>)
 800abae:	e04c      	b.n	800ac4a <_dtoa_r+0x352>
 800abb0:	2301      	movs	r3, #1
 800abb2:	930a      	str	r3, [sp, #40]	; 0x28
 800abb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abb6:	4453      	add	r3, sl
 800abb8:	f103 0901 	add.w	r9, r3, #1
 800abbc:	9302      	str	r3, [sp, #8]
 800abbe:	464b      	mov	r3, r9
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	bfb8      	it	lt
 800abc4:	2301      	movlt	r3, #1
 800abc6:	e7ba      	b.n	800ab3e <_dtoa_r+0x246>
 800abc8:	2300      	movs	r3, #0
 800abca:	e7b2      	b.n	800ab32 <_dtoa_r+0x23a>
 800abcc:	2300      	movs	r3, #0
 800abce:	e7f0      	b.n	800abb2 <_dtoa_r+0x2ba>
 800abd0:	2501      	movs	r5, #1
 800abd2:	2300      	movs	r3, #0
 800abd4:	9306      	str	r3, [sp, #24]
 800abd6:	950a      	str	r5, [sp, #40]	; 0x28
 800abd8:	f04f 33ff 	mov.w	r3, #4294967295
 800abdc:	9302      	str	r3, [sp, #8]
 800abde:	4699      	mov	r9, r3
 800abe0:	2200      	movs	r2, #0
 800abe2:	2312      	movs	r3, #18
 800abe4:	920b      	str	r2, [sp, #44]	; 0x2c
 800abe6:	e7aa      	b.n	800ab3e <_dtoa_r+0x246>
 800abe8:	2301      	movs	r3, #1
 800abea:	930a      	str	r3, [sp, #40]	; 0x28
 800abec:	e7f4      	b.n	800abd8 <_dtoa_r+0x2e0>
 800abee:	2301      	movs	r3, #1
 800abf0:	9302      	str	r3, [sp, #8]
 800abf2:	4699      	mov	r9, r3
 800abf4:	461a      	mov	r2, r3
 800abf6:	e7f5      	b.n	800abe4 <_dtoa_r+0x2ec>
 800abf8:	3101      	adds	r1, #1
 800abfa:	6071      	str	r1, [r6, #4]
 800abfc:	0052      	lsls	r2, r2, #1
 800abfe:	e7a2      	b.n	800ab46 <_dtoa_r+0x24e>
 800ac00:	636f4361 	.word	0x636f4361
 800ac04:	3fd287a7 	.word	0x3fd287a7
 800ac08:	8b60c8b3 	.word	0x8b60c8b3
 800ac0c:	3fc68a28 	.word	0x3fc68a28
 800ac10:	509f79fb 	.word	0x509f79fb
 800ac14:	3fd34413 	.word	0x3fd34413
 800ac18:	7ff00000 	.word	0x7ff00000
 800ac1c:	0800be89 	.word	0x0800be89
 800ac20:	3ff80000 	.word	0x3ff80000
 800ac24:	0800bee8 	.word	0x0800bee8
 800ac28:	0800bec0 	.word	0x0800bec0
 800ac2c:	0800beb5 	.word	0x0800beb5
 800ac30:	07f1      	lsls	r1, r6, #31
 800ac32:	d508      	bpl.n	800ac46 <_dtoa_r+0x34e>
 800ac34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac3c:	f7f5 fcdc 	bl	80005f8 <__aeabi_dmul>
 800ac40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac44:	3501      	adds	r5, #1
 800ac46:	1076      	asrs	r6, r6, #1
 800ac48:	3708      	adds	r7, #8
 800ac4a:	2e00      	cmp	r6, #0
 800ac4c:	d1f0      	bne.n	800ac30 <_dtoa_r+0x338>
 800ac4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ac52:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac56:	f7f5 fdf9 	bl	800084c <__aeabi_ddiv>
 800ac5a:	e9cd 0100 	strd	r0, r1, [sp]
 800ac5e:	e01a      	b.n	800ac96 <_dtoa_r+0x39e>
 800ac60:	2502      	movs	r5, #2
 800ac62:	e7a3      	b.n	800abac <_dtoa_r+0x2b4>
 800ac64:	f000 80a0 	beq.w	800ada8 <_dtoa_r+0x4b0>
 800ac68:	f1ca 0600 	rsb	r6, sl, #0
 800ac6c:	4b9f      	ldr	r3, [pc, #636]	; (800aeec <_dtoa_r+0x5f4>)
 800ac6e:	4fa0      	ldr	r7, [pc, #640]	; (800aef0 <_dtoa_r+0x5f8>)
 800ac70:	f006 020f 	and.w	r2, r6, #15
 800ac74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac80:	f7f5 fcba 	bl	80005f8 <__aeabi_dmul>
 800ac84:	e9cd 0100 	strd	r0, r1, [sp]
 800ac88:	1136      	asrs	r6, r6, #4
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	2502      	movs	r5, #2
 800ac8e:	2e00      	cmp	r6, #0
 800ac90:	d17f      	bne.n	800ad92 <_dtoa_r+0x49a>
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d1e1      	bne.n	800ac5a <_dtoa_r+0x362>
 800ac96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 8087 	beq.w	800adac <_dtoa_r+0x4b4>
 800ac9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aca2:	2200      	movs	r2, #0
 800aca4:	4b93      	ldr	r3, [pc, #588]	; (800aef4 <_dtoa_r+0x5fc>)
 800aca6:	4630      	mov	r0, r6
 800aca8:	4639      	mov	r1, r7
 800acaa:	f7f5 ff17 	bl	8000adc <__aeabi_dcmplt>
 800acae:	2800      	cmp	r0, #0
 800acb0:	d07c      	beq.n	800adac <_dtoa_r+0x4b4>
 800acb2:	f1b9 0f00 	cmp.w	r9, #0
 800acb6:	d079      	beq.n	800adac <_dtoa_r+0x4b4>
 800acb8:	9b02      	ldr	r3, [sp, #8]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	dd35      	ble.n	800ad2a <_dtoa_r+0x432>
 800acbe:	f10a 33ff 	add.w	r3, sl, #4294967295
 800acc2:	9308      	str	r3, [sp, #32]
 800acc4:	4639      	mov	r1, r7
 800acc6:	2200      	movs	r2, #0
 800acc8:	4b8b      	ldr	r3, [pc, #556]	; (800aef8 <_dtoa_r+0x600>)
 800acca:	4630      	mov	r0, r6
 800accc:	f7f5 fc94 	bl	80005f8 <__aeabi_dmul>
 800acd0:	e9cd 0100 	strd	r0, r1, [sp]
 800acd4:	9f02      	ldr	r7, [sp, #8]
 800acd6:	3501      	adds	r5, #1
 800acd8:	4628      	mov	r0, r5
 800acda:	f7f5 fc23 	bl	8000524 <__aeabi_i2d>
 800acde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ace2:	f7f5 fc89 	bl	80005f8 <__aeabi_dmul>
 800ace6:	2200      	movs	r2, #0
 800ace8:	4b84      	ldr	r3, [pc, #528]	; (800aefc <_dtoa_r+0x604>)
 800acea:	f7f5 facf 	bl	800028c <__adddf3>
 800acee:	4605      	mov	r5, r0
 800acf0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800acf4:	2f00      	cmp	r7, #0
 800acf6:	d15d      	bne.n	800adb4 <_dtoa_r+0x4bc>
 800acf8:	2200      	movs	r2, #0
 800acfa:	4b81      	ldr	r3, [pc, #516]	; (800af00 <_dtoa_r+0x608>)
 800acfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad00:	f7f5 fac2 	bl	8000288 <__aeabi_dsub>
 800ad04:	462a      	mov	r2, r5
 800ad06:	4633      	mov	r3, r6
 800ad08:	e9cd 0100 	strd	r0, r1, [sp]
 800ad0c:	f7f5 ff04 	bl	8000b18 <__aeabi_dcmpgt>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	f040 8288 	bne.w	800b226 <_dtoa_r+0x92e>
 800ad16:	462a      	mov	r2, r5
 800ad18:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ad1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad20:	f7f5 fedc 	bl	8000adc <__aeabi_dcmplt>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	f040 827c 	bne.w	800b222 <_dtoa_r+0x92a>
 800ad2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad2e:	e9cd 2300 	strd	r2, r3, [sp]
 800ad32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f2c0 8150 	blt.w	800afda <_dtoa_r+0x6e2>
 800ad3a:	f1ba 0f0e 	cmp.w	sl, #14
 800ad3e:	f300 814c 	bgt.w	800afda <_dtoa_r+0x6e2>
 800ad42:	4b6a      	ldr	r3, [pc, #424]	; (800aeec <_dtoa_r+0x5f4>)
 800ad44:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ad48:	ed93 7b00 	vldr	d7, [r3]
 800ad4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad54:	f280 80d8 	bge.w	800af08 <_dtoa_r+0x610>
 800ad58:	f1b9 0f00 	cmp.w	r9, #0
 800ad5c:	f300 80d4 	bgt.w	800af08 <_dtoa_r+0x610>
 800ad60:	f040 825e 	bne.w	800b220 <_dtoa_r+0x928>
 800ad64:	2200      	movs	r2, #0
 800ad66:	4b66      	ldr	r3, [pc, #408]	; (800af00 <_dtoa_r+0x608>)
 800ad68:	ec51 0b17 	vmov	r0, r1, d7
 800ad6c:	f7f5 fc44 	bl	80005f8 <__aeabi_dmul>
 800ad70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad74:	f7f5 fec6 	bl	8000b04 <__aeabi_dcmpge>
 800ad78:	464f      	mov	r7, r9
 800ad7a:	464e      	mov	r6, r9
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	f040 8234 	bne.w	800b1ea <_dtoa_r+0x8f2>
 800ad82:	2331      	movs	r3, #49	; 0x31
 800ad84:	f10b 0501 	add.w	r5, fp, #1
 800ad88:	f88b 3000 	strb.w	r3, [fp]
 800ad8c:	f10a 0a01 	add.w	sl, sl, #1
 800ad90:	e22f      	b.n	800b1f2 <_dtoa_r+0x8fa>
 800ad92:	07f2      	lsls	r2, r6, #31
 800ad94:	d505      	bpl.n	800ada2 <_dtoa_r+0x4aa>
 800ad96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad9a:	f7f5 fc2d 	bl	80005f8 <__aeabi_dmul>
 800ad9e:	3501      	adds	r5, #1
 800ada0:	2301      	movs	r3, #1
 800ada2:	1076      	asrs	r6, r6, #1
 800ada4:	3708      	adds	r7, #8
 800ada6:	e772      	b.n	800ac8e <_dtoa_r+0x396>
 800ada8:	2502      	movs	r5, #2
 800adaa:	e774      	b.n	800ac96 <_dtoa_r+0x39e>
 800adac:	f8cd a020 	str.w	sl, [sp, #32]
 800adb0:	464f      	mov	r7, r9
 800adb2:	e791      	b.n	800acd8 <_dtoa_r+0x3e0>
 800adb4:	4b4d      	ldr	r3, [pc, #308]	; (800aeec <_dtoa_r+0x5f4>)
 800adb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800adba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800adbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d047      	beq.n	800ae54 <_dtoa_r+0x55c>
 800adc4:	4602      	mov	r2, r0
 800adc6:	460b      	mov	r3, r1
 800adc8:	2000      	movs	r0, #0
 800adca:	494e      	ldr	r1, [pc, #312]	; (800af04 <_dtoa_r+0x60c>)
 800adcc:	f7f5 fd3e 	bl	800084c <__aeabi_ddiv>
 800add0:	462a      	mov	r2, r5
 800add2:	4633      	mov	r3, r6
 800add4:	f7f5 fa58 	bl	8000288 <__aeabi_dsub>
 800add8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800addc:	465d      	mov	r5, fp
 800adde:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ade2:	f7f5 feb9 	bl	8000b58 <__aeabi_d2iz>
 800ade6:	4606      	mov	r6, r0
 800ade8:	f7f5 fb9c 	bl	8000524 <__aeabi_i2d>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adf4:	f7f5 fa48 	bl	8000288 <__aeabi_dsub>
 800adf8:	3630      	adds	r6, #48	; 0x30
 800adfa:	f805 6b01 	strb.w	r6, [r5], #1
 800adfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ae02:	e9cd 0100 	strd	r0, r1, [sp]
 800ae06:	f7f5 fe69 	bl	8000adc <__aeabi_dcmplt>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d163      	bne.n	800aed6 <_dtoa_r+0x5de>
 800ae0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae12:	2000      	movs	r0, #0
 800ae14:	4937      	ldr	r1, [pc, #220]	; (800aef4 <_dtoa_r+0x5fc>)
 800ae16:	f7f5 fa37 	bl	8000288 <__aeabi_dsub>
 800ae1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ae1e:	f7f5 fe5d 	bl	8000adc <__aeabi_dcmplt>
 800ae22:	2800      	cmp	r0, #0
 800ae24:	f040 80b7 	bne.w	800af96 <_dtoa_r+0x69e>
 800ae28:	eba5 030b 	sub.w	r3, r5, fp
 800ae2c:	429f      	cmp	r7, r3
 800ae2e:	f77f af7c 	ble.w	800ad2a <_dtoa_r+0x432>
 800ae32:	2200      	movs	r2, #0
 800ae34:	4b30      	ldr	r3, [pc, #192]	; (800aef8 <_dtoa_r+0x600>)
 800ae36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae3a:	f7f5 fbdd 	bl	80005f8 <__aeabi_dmul>
 800ae3e:	2200      	movs	r2, #0
 800ae40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ae44:	4b2c      	ldr	r3, [pc, #176]	; (800aef8 <_dtoa_r+0x600>)
 800ae46:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae4a:	f7f5 fbd5 	bl	80005f8 <__aeabi_dmul>
 800ae4e:	e9cd 0100 	strd	r0, r1, [sp]
 800ae52:	e7c4      	b.n	800adde <_dtoa_r+0x4e6>
 800ae54:	462a      	mov	r2, r5
 800ae56:	4633      	mov	r3, r6
 800ae58:	f7f5 fbce 	bl	80005f8 <__aeabi_dmul>
 800ae5c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ae60:	eb0b 0507 	add.w	r5, fp, r7
 800ae64:	465e      	mov	r6, fp
 800ae66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae6a:	f7f5 fe75 	bl	8000b58 <__aeabi_d2iz>
 800ae6e:	4607      	mov	r7, r0
 800ae70:	f7f5 fb58 	bl	8000524 <__aeabi_i2d>
 800ae74:	3730      	adds	r7, #48	; 0x30
 800ae76:	4602      	mov	r2, r0
 800ae78:	460b      	mov	r3, r1
 800ae7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae7e:	f7f5 fa03 	bl	8000288 <__aeabi_dsub>
 800ae82:	f806 7b01 	strb.w	r7, [r6], #1
 800ae86:	42ae      	cmp	r6, r5
 800ae88:	e9cd 0100 	strd	r0, r1, [sp]
 800ae8c:	f04f 0200 	mov.w	r2, #0
 800ae90:	d126      	bne.n	800aee0 <_dtoa_r+0x5e8>
 800ae92:	4b1c      	ldr	r3, [pc, #112]	; (800af04 <_dtoa_r+0x60c>)
 800ae94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae98:	f7f5 f9f8 	bl	800028c <__adddf3>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	460b      	mov	r3, r1
 800aea0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aea4:	f7f5 fe38 	bl	8000b18 <__aeabi_dcmpgt>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	d174      	bne.n	800af96 <_dtoa_r+0x69e>
 800aeac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	4914      	ldr	r1, [pc, #80]	; (800af04 <_dtoa_r+0x60c>)
 800aeb4:	f7f5 f9e8 	bl	8000288 <__aeabi_dsub>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aec0:	f7f5 fe0c 	bl	8000adc <__aeabi_dcmplt>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	f43f af30 	beq.w	800ad2a <_dtoa_r+0x432>
 800aeca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aece:	2b30      	cmp	r3, #48	; 0x30
 800aed0:	f105 32ff 	add.w	r2, r5, #4294967295
 800aed4:	d002      	beq.n	800aedc <_dtoa_r+0x5e4>
 800aed6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aeda:	e04a      	b.n	800af72 <_dtoa_r+0x67a>
 800aedc:	4615      	mov	r5, r2
 800aede:	e7f4      	b.n	800aeca <_dtoa_r+0x5d2>
 800aee0:	4b05      	ldr	r3, [pc, #20]	; (800aef8 <_dtoa_r+0x600>)
 800aee2:	f7f5 fb89 	bl	80005f8 <__aeabi_dmul>
 800aee6:	e9cd 0100 	strd	r0, r1, [sp]
 800aeea:	e7bc      	b.n	800ae66 <_dtoa_r+0x56e>
 800aeec:	0800bee8 	.word	0x0800bee8
 800aef0:	0800bec0 	.word	0x0800bec0
 800aef4:	3ff00000 	.word	0x3ff00000
 800aef8:	40240000 	.word	0x40240000
 800aefc:	401c0000 	.word	0x401c0000
 800af00:	40140000 	.word	0x40140000
 800af04:	3fe00000 	.word	0x3fe00000
 800af08:	e9dd 6700 	ldrd	r6, r7, [sp]
 800af0c:	465d      	mov	r5, fp
 800af0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af12:	4630      	mov	r0, r6
 800af14:	4639      	mov	r1, r7
 800af16:	f7f5 fc99 	bl	800084c <__aeabi_ddiv>
 800af1a:	f7f5 fe1d 	bl	8000b58 <__aeabi_d2iz>
 800af1e:	4680      	mov	r8, r0
 800af20:	f7f5 fb00 	bl	8000524 <__aeabi_i2d>
 800af24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af28:	f7f5 fb66 	bl	80005f8 <__aeabi_dmul>
 800af2c:	4602      	mov	r2, r0
 800af2e:	460b      	mov	r3, r1
 800af30:	4630      	mov	r0, r6
 800af32:	4639      	mov	r1, r7
 800af34:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800af38:	f7f5 f9a6 	bl	8000288 <__aeabi_dsub>
 800af3c:	f805 6b01 	strb.w	r6, [r5], #1
 800af40:	eba5 060b 	sub.w	r6, r5, fp
 800af44:	45b1      	cmp	r9, r6
 800af46:	4602      	mov	r2, r0
 800af48:	460b      	mov	r3, r1
 800af4a:	d139      	bne.n	800afc0 <_dtoa_r+0x6c8>
 800af4c:	f7f5 f99e 	bl	800028c <__adddf3>
 800af50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af54:	4606      	mov	r6, r0
 800af56:	460f      	mov	r7, r1
 800af58:	f7f5 fdde 	bl	8000b18 <__aeabi_dcmpgt>
 800af5c:	b9c8      	cbnz	r0, 800af92 <_dtoa_r+0x69a>
 800af5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af62:	4630      	mov	r0, r6
 800af64:	4639      	mov	r1, r7
 800af66:	f7f5 fdaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800af6a:	b110      	cbz	r0, 800af72 <_dtoa_r+0x67a>
 800af6c:	f018 0f01 	tst.w	r8, #1
 800af70:	d10f      	bne.n	800af92 <_dtoa_r+0x69a>
 800af72:	9904      	ldr	r1, [sp, #16]
 800af74:	4620      	mov	r0, r4
 800af76:	f000 fac6 	bl	800b506 <_Bfree>
 800af7a:	2300      	movs	r3, #0
 800af7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af7e:	702b      	strb	r3, [r5, #0]
 800af80:	f10a 0301 	add.w	r3, sl, #1
 800af84:	6013      	str	r3, [r2, #0]
 800af86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f000 8241 	beq.w	800b410 <_dtoa_r+0xb18>
 800af8e:	601d      	str	r5, [r3, #0]
 800af90:	e23e      	b.n	800b410 <_dtoa_r+0xb18>
 800af92:	f8cd a020 	str.w	sl, [sp, #32]
 800af96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800af9a:	2a39      	cmp	r2, #57	; 0x39
 800af9c:	f105 33ff 	add.w	r3, r5, #4294967295
 800afa0:	d108      	bne.n	800afb4 <_dtoa_r+0x6bc>
 800afa2:	459b      	cmp	fp, r3
 800afa4:	d10a      	bne.n	800afbc <_dtoa_r+0x6c4>
 800afa6:	9b08      	ldr	r3, [sp, #32]
 800afa8:	3301      	adds	r3, #1
 800afaa:	9308      	str	r3, [sp, #32]
 800afac:	2330      	movs	r3, #48	; 0x30
 800afae:	f88b 3000 	strb.w	r3, [fp]
 800afb2:	465b      	mov	r3, fp
 800afb4:	781a      	ldrb	r2, [r3, #0]
 800afb6:	3201      	adds	r2, #1
 800afb8:	701a      	strb	r2, [r3, #0]
 800afba:	e78c      	b.n	800aed6 <_dtoa_r+0x5de>
 800afbc:	461d      	mov	r5, r3
 800afbe:	e7ea      	b.n	800af96 <_dtoa_r+0x69e>
 800afc0:	2200      	movs	r2, #0
 800afc2:	4b9b      	ldr	r3, [pc, #620]	; (800b230 <_dtoa_r+0x938>)
 800afc4:	f7f5 fb18 	bl	80005f8 <__aeabi_dmul>
 800afc8:	2200      	movs	r2, #0
 800afca:	2300      	movs	r3, #0
 800afcc:	4606      	mov	r6, r0
 800afce:	460f      	mov	r7, r1
 800afd0:	f7f5 fd7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d09a      	beq.n	800af0e <_dtoa_r+0x616>
 800afd8:	e7cb      	b.n	800af72 <_dtoa_r+0x67a>
 800afda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afdc:	2a00      	cmp	r2, #0
 800afde:	f000 808b 	beq.w	800b0f8 <_dtoa_r+0x800>
 800afe2:	9a06      	ldr	r2, [sp, #24]
 800afe4:	2a01      	cmp	r2, #1
 800afe6:	dc6e      	bgt.n	800b0c6 <_dtoa_r+0x7ce>
 800afe8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800afea:	2a00      	cmp	r2, #0
 800afec:	d067      	beq.n	800b0be <_dtoa_r+0x7c6>
 800afee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aff2:	9f07      	ldr	r7, [sp, #28]
 800aff4:	9d05      	ldr	r5, [sp, #20]
 800aff6:	9a05      	ldr	r2, [sp, #20]
 800aff8:	2101      	movs	r1, #1
 800affa:	441a      	add	r2, r3
 800affc:	4620      	mov	r0, r4
 800affe:	9205      	str	r2, [sp, #20]
 800b000:	4498      	add	r8, r3
 800b002:	f000 fb20 	bl	800b646 <__i2b>
 800b006:	4606      	mov	r6, r0
 800b008:	2d00      	cmp	r5, #0
 800b00a:	dd0c      	ble.n	800b026 <_dtoa_r+0x72e>
 800b00c:	f1b8 0f00 	cmp.w	r8, #0
 800b010:	dd09      	ble.n	800b026 <_dtoa_r+0x72e>
 800b012:	4545      	cmp	r5, r8
 800b014:	9a05      	ldr	r2, [sp, #20]
 800b016:	462b      	mov	r3, r5
 800b018:	bfa8      	it	ge
 800b01a:	4643      	movge	r3, r8
 800b01c:	1ad2      	subs	r2, r2, r3
 800b01e:	9205      	str	r2, [sp, #20]
 800b020:	1aed      	subs	r5, r5, r3
 800b022:	eba8 0803 	sub.w	r8, r8, r3
 800b026:	9b07      	ldr	r3, [sp, #28]
 800b028:	b1eb      	cbz	r3, 800b066 <_dtoa_r+0x76e>
 800b02a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d067      	beq.n	800b100 <_dtoa_r+0x808>
 800b030:	b18f      	cbz	r7, 800b056 <_dtoa_r+0x75e>
 800b032:	4631      	mov	r1, r6
 800b034:	463a      	mov	r2, r7
 800b036:	4620      	mov	r0, r4
 800b038:	f000 fba4 	bl	800b784 <__pow5mult>
 800b03c:	9a04      	ldr	r2, [sp, #16]
 800b03e:	4601      	mov	r1, r0
 800b040:	4606      	mov	r6, r0
 800b042:	4620      	mov	r0, r4
 800b044:	f000 fb08 	bl	800b658 <__multiply>
 800b048:	9904      	ldr	r1, [sp, #16]
 800b04a:	9008      	str	r0, [sp, #32]
 800b04c:	4620      	mov	r0, r4
 800b04e:	f000 fa5a 	bl	800b506 <_Bfree>
 800b052:	9b08      	ldr	r3, [sp, #32]
 800b054:	9304      	str	r3, [sp, #16]
 800b056:	9b07      	ldr	r3, [sp, #28]
 800b058:	1bda      	subs	r2, r3, r7
 800b05a:	d004      	beq.n	800b066 <_dtoa_r+0x76e>
 800b05c:	9904      	ldr	r1, [sp, #16]
 800b05e:	4620      	mov	r0, r4
 800b060:	f000 fb90 	bl	800b784 <__pow5mult>
 800b064:	9004      	str	r0, [sp, #16]
 800b066:	2101      	movs	r1, #1
 800b068:	4620      	mov	r0, r4
 800b06a:	f000 faec 	bl	800b646 <__i2b>
 800b06e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b070:	4607      	mov	r7, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	f000 81d0 	beq.w	800b418 <_dtoa_r+0xb20>
 800b078:	461a      	mov	r2, r3
 800b07a:	4601      	mov	r1, r0
 800b07c:	4620      	mov	r0, r4
 800b07e:	f000 fb81 	bl	800b784 <__pow5mult>
 800b082:	9b06      	ldr	r3, [sp, #24]
 800b084:	2b01      	cmp	r3, #1
 800b086:	4607      	mov	r7, r0
 800b088:	dc40      	bgt.n	800b10c <_dtoa_r+0x814>
 800b08a:	9b00      	ldr	r3, [sp, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d139      	bne.n	800b104 <_dtoa_r+0x80c>
 800b090:	9b01      	ldr	r3, [sp, #4]
 800b092:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b096:	2b00      	cmp	r3, #0
 800b098:	d136      	bne.n	800b108 <_dtoa_r+0x810>
 800b09a:	9b01      	ldr	r3, [sp, #4]
 800b09c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0a0:	0d1b      	lsrs	r3, r3, #20
 800b0a2:	051b      	lsls	r3, r3, #20
 800b0a4:	b12b      	cbz	r3, 800b0b2 <_dtoa_r+0x7ba>
 800b0a6:	9b05      	ldr	r3, [sp, #20]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	9305      	str	r3, [sp, #20]
 800b0ac:	f108 0801 	add.w	r8, r8, #1
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	9307      	str	r3, [sp, #28]
 800b0b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d12a      	bne.n	800b110 <_dtoa_r+0x818>
 800b0ba:	2001      	movs	r0, #1
 800b0bc:	e030      	b.n	800b120 <_dtoa_r+0x828>
 800b0be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b0c4:	e795      	b.n	800aff2 <_dtoa_r+0x6fa>
 800b0c6:	9b07      	ldr	r3, [sp, #28]
 800b0c8:	f109 37ff 	add.w	r7, r9, #4294967295
 800b0cc:	42bb      	cmp	r3, r7
 800b0ce:	bfbf      	itttt	lt
 800b0d0:	9b07      	ldrlt	r3, [sp, #28]
 800b0d2:	9707      	strlt	r7, [sp, #28]
 800b0d4:	1afa      	sublt	r2, r7, r3
 800b0d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b0d8:	bfbb      	ittet	lt
 800b0da:	189b      	addlt	r3, r3, r2
 800b0dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b0de:	1bdf      	subge	r7, r3, r7
 800b0e0:	2700      	movlt	r7, #0
 800b0e2:	f1b9 0f00 	cmp.w	r9, #0
 800b0e6:	bfb5      	itete	lt
 800b0e8:	9b05      	ldrlt	r3, [sp, #20]
 800b0ea:	9d05      	ldrge	r5, [sp, #20]
 800b0ec:	eba3 0509 	sublt.w	r5, r3, r9
 800b0f0:	464b      	movge	r3, r9
 800b0f2:	bfb8      	it	lt
 800b0f4:	2300      	movlt	r3, #0
 800b0f6:	e77e      	b.n	800aff6 <_dtoa_r+0x6fe>
 800b0f8:	9f07      	ldr	r7, [sp, #28]
 800b0fa:	9d05      	ldr	r5, [sp, #20]
 800b0fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b0fe:	e783      	b.n	800b008 <_dtoa_r+0x710>
 800b100:	9a07      	ldr	r2, [sp, #28]
 800b102:	e7ab      	b.n	800b05c <_dtoa_r+0x764>
 800b104:	2300      	movs	r3, #0
 800b106:	e7d4      	b.n	800b0b2 <_dtoa_r+0x7ba>
 800b108:	9b00      	ldr	r3, [sp, #0]
 800b10a:	e7d2      	b.n	800b0b2 <_dtoa_r+0x7ba>
 800b10c:	2300      	movs	r3, #0
 800b10e:	9307      	str	r3, [sp, #28]
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b116:	6918      	ldr	r0, [r3, #16]
 800b118:	f000 fa47 	bl	800b5aa <__hi0bits>
 800b11c:	f1c0 0020 	rsb	r0, r0, #32
 800b120:	4440      	add	r0, r8
 800b122:	f010 001f 	ands.w	r0, r0, #31
 800b126:	d047      	beq.n	800b1b8 <_dtoa_r+0x8c0>
 800b128:	f1c0 0320 	rsb	r3, r0, #32
 800b12c:	2b04      	cmp	r3, #4
 800b12e:	dd3b      	ble.n	800b1a8 <_dtoa_r+0x8b0>
 800b130:	9b05      	ldr	r3, [sp, #20]
 800b132:	f1c0 001c 	rsb	r0, r0, #28
 800b136:	4403      	add	r3, r0
 800b138:	9305      	str	r3, [sp, #20]
 800b13a:	4405      	add	r5, r0
 800b13c:	4480      	add	r8, r0
 800b13e:	9b05      	ldr	r3, [sp, #20]
 800b140:	2b00      	cmp	r3, #0
 800b142:	dd05      	ble.n	800b150 <_dtoa_r+0x858>
 800b144:	461a      	mov	r2, r3
 800b146:	9904      	ldr	r1, [sp, #16]
 800b148:	4620      	mov	r0, r4
 800b14a:	f000 fb69 	bl	800b820 <__lshift>
 800b14e:	9004      	str	r0, [sp, #16]
 800b150:	f1b8 0f00 	cmp.w	r8, #0
 800b154:	dd05      	ble.n	800b162 <_dtoa_r+0x86a>
 800b156:	4639      	mov	r1, r7
 800b158:	4642      	mov	r2, r8
 800b15a:	4620      	mov	r0, r4
 800b15c:	f000 fb60 	bl	800b820 <__lshift>
 800b160:	4607      	mov	r7, r0
 800b162:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b164:	b353      	cbz	r3, 800b1bc <_dtoa_r+0x8c4>
 800b166:	4639      	mov	r1, r7
 800b168:	9804      	ldr	r0, [sp, #16]
 800b16a:	f000 fbad 	bl	800b8c8 <__mcmp>
 800b16e:	2800      	cmp	r0, #0
 800b170:	da24      	bge.n	800b1bc <_dtoa_r+0x8c4>
 800b172:	2300      	movs	r3, #0
 800b174:	220a      	movs	r2, #10
 800b176:	9904      	ldr	r1, [sp, #16]
 800b178:	4620      	mov	r0, r4
 800b17a:	f000 f9db 	bl	800b534 <__multadd>
 800b17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b180:	9004      	str	r0, [sp, #16]
 800b182:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b186:	2b00      	cmp	r3, #0
 800b188:	f000 814d 	beq.w	800b426 <_dtoa_r+0xb2e>
 800b18c:	2300      	movs	r3, #0
 800b18e:	4631      	mov	r1, r6
 800b190:	220a      	movs	r2, #10
 800b192:	4620      	mov	r0, r4
 800b194:	f000 f9ce 	bl	800b534 <__multadd>
 800b198:	9b02      	ldr	r3, [sp, #8]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	4606      	mov	r6, r0
 800b19e:	dc4f      	bgt.n	800b240 <_dtoa_r+0x948>
 800b1a0:	9b06      	ldr	r3, [sp, #24]
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	dd4c      	ble.n	800b240 <_dtoa_r+0x948>
 800b1a6:	e011      	b.n	800b1cc <_dtoa_r+0x8d4>
 800b1a8:	d0c9      	beq.n	800b13e <_dtoa_r+0x846>
 800b1aa:	9a05      	ldr	r2, [sp, #20]
 800b1ac:	331c      	adds	r3, #28
 800b1ae:	441a      	add	r2, r3
 800b1b0:	9205      	str	r2, [sp, #20]
 800b1b2:	441d      	add	r5, r3
 800b1b4:	4498      	add	r8, r3
 800b1b6:	e7c2      	b.n	800b13e <_dtoa_r+0x846>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	e7f6      	b.n	800b1aa <_dtoa_r+0x8b2>
 800b1bc:	f1b9 0f00 	cmp.w	r9, #0
 800b1c0:	dc38      	bgt.n	800b234 <_dtoa_r+0x93c>
 800b1c2:	9b06      	ldr	r3, [sp, #24]
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	dd35      	ble.n	800b234 <_dtoa_r+0x93c>
 800b1c8:	f8cd 9008 	str.w	r9, [sp, #8]
 800b1cc:	9b02      	ldr	r3, [sp, #8]
 800b1ce:	b963      	cbnz	r3, 800b1ea <_dtoa_r+0x8f2>
 800b1d0:	4639      	mov	r1, r7
 800b1d2:	2205      	movs	r2, #5
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f000 f9ad 	bl	800b534 <__multadd>
 800b1da:	4601      	mov	r1, r0
 800b1dc:	4607      	mov	r7, r0
 800b1de:	9804      	ldr	r0, [sp, #16]
 800b1e0:	f000 fb72 	bl	800b8c8 <__mcmp>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	f73f adcc 	bgt.w	800ad82 <_dtoa_r+0x48a>
 800b1ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1ec:	465d      	mov	r5, fp
 800b1ee:	ea6f 0a03 	mvn.w	sl, r3
 800b1f2:	f04f 0900 	mov.w	r9, #0
 800b1f6:	4639      	mov	r1, r7
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f000 f984 	bl	800b506 <_Bfree>
 800b1fe:	2e00      	cmp	r6, #0
 800b200:	f43f aeb7 	beq.w	800af72 <_dtoa_r+0x67a>
 800b204:	f1b9 0f00 	cmp.w	r9, #0
 800b208:	d005      	beq.n	800b216 <_dtoa_r+0x91e>
 800b20a:	45b1      	cmp	r9, r6
 800b20c:	d003      	beq.n	800b216 <_dtoa_r+0x91e>
 800b20e:	4649      	mov	r1, r9
 800b210:	4620      	mov	r0, r4
 800b212:	f000 f978 	bl	800b506 <_Bfree>
 800b216:	4631      	mov	r1, r6
 800b218:	4620      	mov	r0, r4
 800b21a:	f000 f974 	bl	800b506 <_Bfree>
 800b21e:	e6a8      	b.n	800af72 <_dtoa_r+0x67a>
 800b220:	2700      	movs	r7, #0
 800b222:	463e      	mov	r6, r7
 800b224:	e7e1      	b.n	800b1ea <_dtoa_r+0x8f2>
 800b226:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b22a:	463e      	mov	r6, r7
 800b22c:	e5a9      	b.n	800ad82 <_dtoa_r+0x48a>
 800b22e:	bf00      	nop
 800b230:	40240000 	.word	0x40240000
 800b234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b236:	f8cd 9008 	str.w	r9, [sp, #8]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	f000 80fa 	beq.w	800b434 <_dtoa_r+0xb3c>
 800b240:	2d00      	cmp	r5, #0
 800b242:	dd05      	ble.n	800b250 <_dtoa_r+0x958>
 800b244:	4631      	mov	r1, r6
 800b246:	462a      	mov	r2, r5
 800b248:	4620      	mov	r0, r4
 800b24a:	f000 fae9 	bl	800b820 <__lshift>
 800b24e:	4606      	mov	r6, r0
 800b250:	9b07      	ldr	r3, [sp, #28]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d04c      	beq.n	800b2f0 <_dtoa_r+0x9f8>
 800b256:	6871      	ldr	r1, [r6, #4]
 800b258:	4620      	mov	r0, r4
 800b25a:	f000 f920 	bl	800b49e <_Balloc>
 800b25e:	6932      	ldr	r2, [r6, #16]
 800b260:	3202      	adds	r2, #2
 800b262:	4605      	mov	r5, r0
 800b264:	0092      	lsls	r2, r2, #2
 800b266:	f106 010c 	add.w	r1, r6, #12
 800b26a:	300c      	adds	r0, #12
 800b26c:	f000 f90a 	bl	800b484 <memcpy>
 800b270:	2201      	movs	r2, #1
 800b272:	4629      	mov	r1, r5
 800b274:	4620      	mov	r0, r4
 800b276:	f000 fad3 	bl	800b820 <__lshift>
 800b27a:	9b00      	ldr	r3, [sp, #0]
 800b27c:	f8cd b014 	str.w	fp, [sp, #20]
 800b280:	f003 0301 	and.w	r3, r3, #1
 800b284:	46b1      	mov	r9, r6
 800b286:	9307      	str	r3, [sp, #28]
 800b288:	4606      	mov	r6, r0
 800b28a:	4639      	mov	r1, r7
 800b28c:	9804      	ldr	r0, [sp, #16]
 800b28e:	f7ff faa7 	bl	800a7e0 <quorem>
 800b292:	4649      	mov	r1, r9
 800b294:	4605      	mov	r5, r0
 800b296:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b29a:	9804      	ldr	r0, [sp, #16]
 800b29c:	f000 fb14 	bl	800b8c8 <__mcmp>
 800b2a0:	4632      	mov	r2, r6
 800b2a2:	9000      	str	r0, [sp, #0]
 800b2a4:	4639      	mov	r1, r7
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f000 fb28 	bl	800b8fc <__mdiff>
 800b2ac:	68c3      	ldr	r3, [r0, #12]
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	bb03      	cbnz	r3, 800b2f4 <_dtoa_r+0x9fc>
 800b2b2:	4601      	mov	r1, r0
 800b2b4:	9008      	str	r0, [sp, #32]
 800b2b6:	9804      	ldr	r0, [sp, #16]
 800b2b8:	f000 fb06 	bl	800b8c8 <__mcmp>
 800b2bc:	9a08      	ldr	r2, [sp, #32]
 800b2be:	4603      	mov	r3, r0
 800b2c0:	4611      	mov	r1, r2
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	9308      	str	r3, [sp, #32]
 800b2c6:	f000 f91e 	bl	800b506 <_Bfree>
 800b2ca:	9b08      	ldr	r3, [sp, #32]
 800b2cc:	b9a3      	cbnz	r3, 800b2f8 <_dtoa_r+0xa00>
 800b2ce:	9a06      	ldr	r2, [sp, #24]
 800b2d0:	b992      	cbnz	r2, 800b2f8 <_dtoa_r+0xa00>
 800b2d2:	9a07      	ldr	r2, [sp, #28]
 800b2d4:	b982      	cbnz	r2, 800b2f8 <_dtoa_r+0xa00>
 800b2d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b2da:	d029      	beq.n	800b330 <_dtoa_r+0xa38>
 800b2dc:	9b00      	ldr	r3, [sp, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	dd01      	ble.n	800b2e6 <_dtoa_r+0x9ee>
 800b2e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b2e6:	9b05      	ldr	r3, [sp, #20]
 800b2e8:	1c5d      	adds	r5, r3, #1
 800b2ea:	f883 8000 	strb.w	r8, [r3]
 800b2ee:	e782      	b.n	800b1f6 <_dtoa_r+0x8fe>
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	e7c2      	b.n	800b27a <_dtoa_r+0x982>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e7e3      	b.n	800b2c0 <_dtoa_r+0x9c8>
 800b2f8:	9a00      	ldr	r2, [sp, #0]
 800b2fa:	2a00      	cmp	r2, #0
 800b2fc:	db04      	blt.n	800b308 <_dtoa_r+0xa10>
 800b2fe:	d125      	bne.n	800b34c <_dtoa_r+0xa54>
 800b300:	9a06      	ldr	r2, [sp, #24]
 800b302:	bb1a      	cbnz	r2, 800b34c <_dtoa_r+0xa54>
 800b304:	9a07      	ldr	r2, [sp, #28]
 800b306:	bb0a      	cbnz	r2, 800b34c <_dtoa_r+0xa54>
 800b308:	2b00      	cmp	r3, #0
 800b30a:	ddec      	ble.n	800b2e6 <_dtoa_r+0x9ee>
 800b30c:	2201      	movs	r2, #1
 800b30e:	9904      	ldr	r1, [sp, #16]
 800b310:	4620      	mov	r0, r4
 800b312:	f000 fa85 	bl	800b820 <__lshift>
 800b316:	4639      	mov	r1, r7
 800b318:	9004      	str	r0, [sp, #16]
 800b31a:	f000 fad5 	bl	800b8c8 <__mcmp>
 800b31e:	2800      	cmp	r0, #0
 800b320:	dc03      	bgt.n	800b32a <_dtoa_r+0xa32>
 800b322:	d1e0      	bne.n	800b2e6 <_dtoa_r+0x9ee>
 800b324:	f018 0f01 	tst.w	r8, #1
 800b328:	d0dd      	beq.n	800b2e6 <_dtoa_r+0x9ee>
 800b32a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b32e:	d1d8      	bne.n	800b2e2 <_dtoa_r+0x9ea>
 800b330:	9b05      	ldr	r3, [sp, #20]
 800b332:	9a05      	ldr	r2, [sp, #20]
 800b334:	1c5d      	adds	r5, r3, #1
 800b336:	2339      	movs	r3, #57	; 0x39
 800b338:	7013      	strb	r3, [r2, #0]
 800b33a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b33e:	2b39      	cmp	r3, #57	; 0x39
 800b340:	f105 32ff 	add.w	r2, r5, #4294967295
 800b344:	d04f      	beq.n	800b3e6 <_dtoa_r+0xaee>
 800b346:	3301      	adds	r3, #1
 800b348:	7013      	strb	r3, [r2, #0]
 800b34a:	e754      	b.n	800b1f6 <_dtoa_r+0x8fe>
 800b34c:	9a05      	ldr	r2, [sp, #20]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f102 0501 	add.w	r5, r2, #1
 800b354:	dd06      	ble.n	800b364 <_dtoa_r+0xa6c>
 800b356:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b35a:	d0e9      	beq.n	800b330 <_dtoa_r+0xa38>
 800b35c:	f108 0801 	add.w	r8, r8, #1
 800b360:	9b05      	ldr	r3, [sp, #20]
 800b362:	e7c2      	b.n	800b2ea <_dtoa_r+0x9f2>
 800b364:	9a02      	ldr	r2, [sp, #8]
 800b366:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b36a:	eba5 030b 	sub.w	r3, r5, fp
 800b36e:	4293      	cmp	r3, r2
 800b370:	d021      	beq.n	800b3b6 <_dtoa_r+0xabe>
 800b372:	2300      	movs	r3, #0
 800b374:	220a      	movs	r2, #10
 800b376:	9904      	ldr	r1, [sp, #16]
 800b378:	4620      	mov	r0, r4
 800b37a:	f000 f8db 	bl	800b534 <__multadd>
 800b37e:	45b1      	cmp	r9, r6
 800b380:	9004      	str	r0, [sp, #16]
 800b382:	f04f 0300 	mov.w	r3, #0
 800b386:	f04f 020a 	mov.w	r2, #10
 800b38a:	4649      	mov	r1, r9
 800b38c:	4620      	mov	r0, r4
 800b38e:	d105      	bne.n	800b39c <_dtoa_r+0xaa4>
 800b390:	f000 f8d0 	bl	800b534 <__multadd>
 800b394:	4681      	mov	r9, r0
 800b396:	4606      	mov	r6, r0
 800b398:	9505      	str	r5, [sp, #20]
 800b39a:	e776      	b.n	800b28a <_dtoa_r+0x992>
 800b39c:	f000 f8ca 	bl	800b534 <__multadd>
 800b3a0:	4631      	mov	r1, r6
 800b3a2:	4681      	mov	r9, r0
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	220a      	movs	r2, #10
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f000 f8c3 	bl	800b534 <__multadd>
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	e7f2      	b.n	800b398 <_dtoa_r+0xaa0>
 800b3b2:	f04f 0900 	mov.w	r9, #0
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	9904      	ldr	r1, [sp, #16]
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f000 fa30 	bl	800b820 <__lshift>
 800b3c0:	4639      	mov	r1, r7
 800b3c2:	9004      	str	r0, [sp, #16]
 800b3c4:	f000 fa80 	bl	800b8c8 <__mcmp>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	dcb6      	bgt.n	800b33a <_dtoa_r+0xa42>
 800b3cc:	d102      	bne.n	800b3d4 <_dtoa_r+0xadc>
 800b3ce:	f018 0f01 	tst.w	r8, #1
 800b3d2:	d1b2      	bne.n	800b33a <_dtoa_r+0xa42>
 800b3d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b3d8:	2b30      	cmp	r3, #48	; 0x30
 800b3da:	f105 32ff 	add.w	r2, r5, #4294967295
 800b3de:	f47f af0a 	bne.w	800b1f6 <_dtoa_r+0x8fe>
 800b3e2:	4615      	mov	r5, r2
 800b3e4:	e7f6      	b.n	800b3d4 <_dtoa_r+0xadc>
 800b3e6:	4593      	cmp	fp, r2
 800b3e8:	d105      	bne.n	800b3f6 <_dtoa_r+0xafe>
 800b3ea:	2331      	movs	r3, #49	; 0x31
 800b3ec:	f10a 0a01 	add.w	sl, sl, #1
 800b3f0:	f88b 3000 	strb.w	r3, [fp]
 800b3f4:	e6ff      	b.n	800b1f6 <_dtoa_r+0x8fe>
 800b3f6:	4615      	mov	r5, r2
 800b3f8:	e79f      	b.n	800b33a <_dtoa_r+0xa42>
 800b3fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b460 <_dtoa_r+0xb68>
 800b3fe:	e007      	b.n	800b410 <_dtoa_r+0xb18>
 800b400:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b402:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b464 <_dtoa_r+0xb6c>
 800b406:	b11b      	cbz	r3, 800b410 <_dtoa_r+0xb18>
 800b408:	f10b 0308 	add.w	r3, fp, #8
 800b40c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b40e:	6013      	str	r3, [r2, #0]
 800b410:	4658      	mov	r0, fp
 800b412:	b017      	add	sp, #92	; 0x5c
 800b414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b418:	9b06      	ldr	r3, [sp, #24]
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	f77f ae35 	ble.w	800b08a <_dtoa_r+0x792>
 800b420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b422:	9307      	str	r3, [sp, #28]
 800b424:	e649      	b.n	800b0ba <_dtoa_r+0x7c2>
 800b426:	9b02      	ldr	r3, [sp, #8]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	dc03      	bgt.n	800b434 <_dtoa_r+0xb3c>
 800b42c:	9b06      	ldr	r3, [sp, #24]
 800b42e:	2b02      	cmp	r3, #2
 800b430:	f73f aecc 	bgt.w	800b1cc <_dtoa_r+0x8d4>
 800b434:	465d      	mov	r5, fp
 800b436:	4639      	mov	r1, r7
 800b438:	9804      	ldr	r0, [sp, #16]
 800b43a:	f7ff f9d1 	bl	800a7e0 <quorem>
 800b43e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b442:	f805 8b01 	strb.w	r8, [r5], #1
 800b446:	9a02      	ldr	r2, [sp, #8]
 800b448:	eba5 030b 	sub.w	r3, r5, fp
 800b44c:	429a      	cmp	r2, r3
 800b44e:	ddb0      	ble.n	800b3b2 <_dtoa_r+0xaba>
 800b450:	2300      	movs	r3, #0
 800b452:	220a      	movs	r2, #10
 800b454:	9904      	ldr	r1, [sp, #16]
 800b456:	4620      	mov	r0, r4
 800b458:	f000 f86c 	bl	800b534 <__multadd>
 800b45c:	9004      	str	r0, [sp, #16]
 800b45e:	e7ea      	b.n	800b436 <_dtoa_r+0xb3e>
 800b460:	0800be88 	.word	0x0800be88
 800b464:	0800beac 	.word	0x0800beac

0800b468 <_localeconv_r>:
 800b468:	4b04      	ldr	r3, [pc, #16]	; (800b47c <_localeconv_r+0x14>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	6a18      	ldr	r0, [r3, #32]
 800b46e:	4b04      	ldr	r3, [pc, #16]	; (800b480 <_localeconv_r+0x18>)
 800b470:	2800      	cmp	r0, #0
 800b472:	bf08      	it	eq
 800b474:	4618      	moveq	r0, r3
 800b476:	30f0      	adds	r0, #240	; 0xf0
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	20000180 	.word	0x20000180
 800b480:	200001e4 	.word	0x200001e4

0800b484 <memcpy>:
 800b484:	b510      	push	{r4, lr}
 800b486:	1e43      	subs	r3, r0, #1
 800b488:	440a      	add	r2, r1
 800b48a:	4291      	cmp	r1, r2
 800b48c:	d100      	bne.n	800b490 <memcpy+0xc>
 800b48e:	bd10      	pop	{r4, pc}
 800b490:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b494:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b498:	e7f7      	b.n	800b48a <memcpy+0x6>

0800b49a <__malloc_lock>:
 800b49a:	4770      	bx	lr

0800b49c <__malloc_unlock>:
 800b49c:	4770      	bx	lr

0800b49e <_Balloc>:
 800b49e:	b570      	push	{r4, r5, r6, lr}
 800b4a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	460e      	mov	r6, r1
 800b4a6:	b93d      	cbnz	r5, 800b4b8 <_Balloc+0x1a>
 800b4a8:	2010      	movs	r0, #16
 800b4aa:	f7fe fc4d 	bl	8009d48 <malloc>
 800b4ae:	6260      	str	r0, [r4, #36]	; 0x24
 800b4b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b4b4:	6005      	str	r5, [r0, #0]
 800b4b6:	60c5      	str	r5, [r0, #12]
 800b4b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b4ba:	68eb      	ldr	r3, [r5, #12]
 800b4bc:	b183      	cbz	r3, 800b4e0 <_Balloc+0x42>
 800b4be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b4c6:	b9b8      	cbnz	r0, 800b4f8 <_Balloc+0x5a>
 800b4c8:	2101      	movs	r1, #1
 800b4ca:	fa01 f506 	lsl.w	r5, r1, r6
 800b4ce:	1d6a      	adds	r2, r5, #5
 800b4d0:	0092      	lsls	r2, r2, #2
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f000 fabe 	bl	800ba54 <_calloc_r>
 800b4d8:	b160      	cbz	r0, 800b4f4 <_Balloc+0x56>
 800b4da:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b4de:	e00e      	b.n	800b4fe <_Balloc+0x60>
 800b4e0:	2221      	movs	r2, #33	; 0x21
 800b4e2:	2104      	movs	r1, #4
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f000 fab5 	bl	800ba54 <_calloc_r>
 800b4ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4ec:	60e8      	str	r0, [r5, #12]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1e4      	bne.n	800b4be <_Balloc+0x20>
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	bd70      	pop	{r4, r5, r6, pc}
 800b4f8:	6802      	ldr	r2, [r0, #0]
 800b4fa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b4fe:	2300      	movs	r3, #0
 800b500:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b504:	e7f7      	b.n	800b4f6 <_Balloc+0x58>

0800b506 <_Bfree>:
 800b506:	b570      	push	{r4, r5, r6, lr}
 800b508:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b50a:	4606      	mov	r6, r0
 800b50c:	460d      	mov	r5, r1
 800b50e:	b93c      	cbnz	r4, 800b520 <_Bfree+0x1a>
 800b510:	2010      	movs	r0, #16
 800b512:	f7fe fc19 	bl	8009d48 <malloc>
 800b516:	6270      	str	r0, [r6, #36]	; 0x24
 800b518:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b51c:	6004      	str	r4, [r0, #0]
 800b51e:	60c4      	str	r4, [r0, #12]
 800b520:	b13d      	cbz	r5, 800b532 <_Bfree+0x2c>
 800b522:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b524:	686a      	ldr	r2, [r5, #4]
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b52c:	6029      	str	r1, [r5, #0]
 800b52e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b532:	bd70      	pop	{r4, r5, r6, pc}

0800b534 <__multadd>:
 800b534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b538:	690d      	ldr	r5, [r1, #16]
 800b53a:	461f      	mov	r7, r3
 800b53c:	4606      	mov	r6, r0
 800b53e:	460c      	mov	r4, r1
 800b540:	f101 0c14 	add.w	ip, r1, #20
 800b544:	2300      	movs	r3, #0
 800b546:	f8dc 0000 	ldr.w	r0, [ip]
 800b54a:	b281      	uxth	r1, r0
 800b54c:	fb02 7101 	mla	r1, r2, r1, r7
 800b550:	0c0f      	lsrs	r7, r1, #16
 800b552:	0c00      	lsrs	r0, r0, #16
 800b554:	fb02 7000 	mla	r0, r2, r0, r7
 800b558:	b289      	uxth	r1, r1
 800b55a:	3301      	adds	r3, #1
 800b55c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b560:	429d      	cmp	r5, r3
 800b562:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b566:	f84c 1b04 	str.w	r1, [ip], #4
 800b56a:	dcec      	bgt.n	800b546 <__multadd+0x12>
 800b56c:	b1d7      	cbz	r7, 800b5a4 <__multadd+0x70>
 800b56e:	68a3      	ldr	r3, [r4, #8]
 800b570:	42ab      	cmp	r3, r5
 800b572:	dc12      	bgt.n	800b59a <__multadd+0x66>
 800b574:	6861      	ldr	r1, [r4, #4]
 800b576:	4630      	mov	r0, r6
 800b578:	3101      	adds	r1, #1
 800b57a:	f7ff ff90 	bl	800b49e <_Balloc>
 800b57e:	6922      	ldr	r2, [r4, #16]
 800b580:	3202      	adds	r2, #2
 800b582:	f104 010c 	add.w	r1, r4, #12
 800b586:	4680      	mov	r8, r0
 800b588:	0092      	lsls	r2, r2, #2
 800b58a:	300c      	adds	r0, #12
 800b58c:	f7ff ff7a 	bl	800b484 <memcpy>
 800b590:	4621      	mov	r1, r4
 800b592:	4630      	mov	r0, r6
 800b594:	f7ff ffb7 	bl	800b506 <_Bfree>
 800b598:	4644      	mov	r4, r8
 800b59a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b59e:	3501      	adds	r5, #1
 800b5a0:	615f      	str	r7, [r3, #20]
 800b5a2:	6125      	str	r5, [r4, #16]
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b5aa <__hi0bits>:
 800b5aa:	0c02      	lsrs	r2, r0, #16
 800b5ac:	0412      	lsls	r2, r2, #16
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	b9b2      	cbnz	r2, 800b5e0 <__hi0bits+0x36>
 800b5b2:	0403      	lsls	r3, r0, #16
 800b5b4:	2010      	movs	r0, #16
 800b5b6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b5ba:	bf04      	itt	eq
 800b5bc:	021b      	lsleq	r3, r3, #8
 800b5be:	3008      	addeq	r0, #8
 800b5c0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b5c4:	bf04      	itt	eq
 800b5c6:	011b      	lsleq	r3, r3, #4
 800b5c8:	3004      	addeq	r0, #4
 800b5ca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b5ce:	bf04      	itt	eq
 800b5d0:	009b      	lsleq	r3, r3, #2
 800b5d2:	3002      	addeq	r0, #2
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	db06      	blt.n	800b5e6 <__hi0bits+0x3c>
 800b5d8:	005b      	lsls	r3, r3, #1
 800b5da:	d503      	bpl.n	800b5e4 <__hi0bits+0x3a>
 800b5dc:	3001      	adds	r0, #1
 800b5de:	4770      	bx	lr
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	e7e8      	b.n	800b5b6 <__hi0bits+0xc>
 800b5e4:	2020      	movs	r0, #32
 800b5e6:	4770      	bx	lr

0800b5e8 <__lo0bits>:
 800b5e8:	6803      	ldr	r3, [r0, #0]
 800b5ea:	f013 0207 	ands.w	r2, r3, #7
 800b5ee:	4601      	mov	r1, r0
 800b5f0:	d00b      	beq.n	800b60a <__lo0bits+0x22>
 800b5f2:	07da      	lsls	r2, r3, #31
 800b5f4:	d423      	bmi.n	800b63e <__lo0bits+0x56>
 800b5f6:	0798      	lsls	r0, r3, #30
 800b5f8:	bf49      	itett	mi
 800b5fa:	085b      	lsrmi	r3, r3, #1
 800b5fc:	089b      	lsrpl	r3, r3, #2
 800b5fe:	2001      	movmi	r0, #1
 800b600:	600b      	strmi	r3, [r1, #0]
 800b602:	bf5c      	itt	pl
 800b604:	600b      	strpl	r3, [r1, #0]
 800b606:	2002      	movpl	r0, #2
 800b608:	4770      	bx	lr
 800b60a:	b298      	uxth	r0, r3
 800b60c:	b9a8      	cbnz	r0, 800b63a <__lo0bits+0x52>
 800b60e:	0c1b      	lsrs	r3, r3, #16
 800b610:	2010      	movs	r0, #16
 800b612:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b616:	bf04      	itt	eq
 800b618:	0a1b      	lsreq	r3, r3, #8
 800b61a:	3008      	addeq	r0, #8
 800b61c:	071a      	lsls	r2, r3, #28
 800b61e:	bf04      	itt	eq
 800b620:	091b      	lsreq	r3, r3, #4
 800b622:	3004      	addeq	r0, #4
 800b624:	079a      	lsls	r2, r3, #30
 800b626:	bf04      	itt	eq
 800b628:	089b      	lsreq	r3, r3, #2
 800b62a:	3002      	addeq	r0, #2
 800b62c:	07da      	lsls	r2, r3, #31
 800b62e:	d402      	bmi.n	800b636 <__lo0bits+0x4e>
 800b630:	085b      	lsrs	r3, r3, #1
 800b632:	d006      	beq.n	800b642 <__lo0bits+0x5a>
 800b634:	3001      	adds	r0, #1
 800b636:	600b      	str	r3, [r1, #0]
 800b638:	4770      	bx	lr
 800b63a:	4610      	mov	r0, r2
 800b63c:	e7e9      	b.n	800b612 <__lo0bits+0x2a>
 800b63e:	2000      	movs	r0, #0
 800b640:	4770      	bx	lr
 800b642:	2020      	movs	r0, #32
 800b644:	4770      	bx	lr

0800b646 <__i2b>:
 800b646:	b510      	push	{r4, lr}
 800b648:	460c      	mov	r4, r1
 800b64a:	2101      	movs	r1, #1
 800b64c:	f7ff ff27 	bl	800b49e <_Balloc>
 800b650:	2201      	movs	r2, #1
 800b652:	6144      	str	r4, [r0, #20]
 800b654:	6102      	str	r2, [r0, #16]
 800b656:	bd10      	pop	{r4, pc}

0800b658 <__multiply>:
 800b658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b65c:	4614      	mov	r4, r2
 800b65e:	690a      	ldr	r2, [r1, #16]
 800b660:	6923      	ldr	r3, [r4, #16]
 800b662:	429a      	cmp	r2, r3
 800b664:	bfb8      	it	lt
 800b666:	460b      	movlt	r3, r1
 800b668:	4688      	mov	r8, r1
 800b66a:	bfbc      	itt	lt
 800b66c:	46a0      	movlt	r8, r4
 800b66e:	461c      	movlt	r4, r3
 800b670:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b674:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b678:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b67c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b680:	eb07 0609 	add.w	r6, r7, r9
 800b684:	42b3      	cmp	r3, r6
 800b686:	bfb8      	it	lt
 800b688:	3101      	addlt	r1, #1
 800b68a:	f7ff ff08 	bl	800b49e <_Balloc>
 800b68e:	f100 0514 	add.w	r5, r0, #20
 800b692:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b696:	462b      	mov	r3, r5
 800b698:	2200      	movs	r2, #0
 800b69a:	4573      	cmp	r3, lr
 800b69c:	d316      	bcc.n	800b6cc <__multiply+0x74>
 800b69e:	f104 0214 	add.w	r2, r4, #20
 800b6a2:	f108 0114 	add.w	r1, r8, #20
 800b6a6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b6aa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	9b00      	ldr	r3, [sp, #0]
 800b6b2:	9201      	str	r2, [sp, #4]
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d80c      	bhi.n	800b6d2 <__multiply+0x7a>
 800b6b8:	2e00      	cmp	r6, #0
 800b6ba:	dd03      	ble.n	800b6c4 <__multiply+0x6c>
 800b6bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d05d      	beq.n	800b780 <__multiply+0x128>
 800b6c4:	6106      	str	r6, [r0, #16]
 800b6c6:	b003      	add	sp, #12
 800b6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6cc:	f843 2b04 	str.w	r2, [r3], #4
 800b6d0:	e7e3      	b.n	800b69a <__multiply+0x42>
 800b6d2:	f8b2 b000 	ldrh.w	fp, [r2]
 800b6d6:	f1bb 0f00 	cmp.w	fp, #0
 800b6da:	d023      	beq.n	800b724 <__multiply+0xcc>
 800b6dc:	4689      	mov	r9, r1
 800b6de:	46ac      	mov	ip, r5
 800b6e0:	f04f 0800 	mov.w	r8, #0
 800b6e4:	f859 4b04 	ldr.w	r4, [r9], #4
 800b6e8:	f8dc a000 	ldr.w	sl, [ip]
 800b6ec:	b2a3      	uxth	r3, r4
 800b6ee:	fa1f fa8a 	uxth.w	sl, sl
 800b6f2:	fb0b a303 	mla	r3, fp, r3, sl
 800b6f6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b6fa:	f8dc 4000 	ldr.w	r4, [ip]
 800b6fe:	4443      	add	r3, r8
 800b700:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b704:	fb0b 840a 	mla	r4, fp, sl, r8
 800b708:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b70c:	46e2      	mov	sl, ip
 800b70e:	b29b      	uxth	r3, r3
 800b710:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b714:	454f      	cmp	r7, r9
 800b716:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b71a:	f84a 3b04 	str.w	r3, [sl], #4
 800b71e:	d82b      	bhi.n	800b778 <__multiply+0x120>
 800b720:	f8cc 8004 	str.w	r8, [ip, #4]
 800b724:	9b01      	ldr	r3, [sp, #4]
 800b726:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b72a:	3204      	adds	r2, #4
 800b72c:	f1ba 0f00 	cmp.w	sl, #0
 800b730:	d020      	beq.n	800b774 <__multiply+0x11c>
 800b732:	682b      	ldr	r3, [r5, #0]
 800b734:	4689      	mov	r9, r1
 800b736:	46a8      	mov	r8, r5
 800b738:	f04f 0b00 	mov.w	fp, #0
 800b73c:	f8b9 c000 	ldrh.w	ip, [r9]
 800b740:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b744:	fb0a 440c 	mla	r4, sl, ip, r4
 800b748:	445c      	add	r4, fp
 800b74a:	46c4      	mov	ip, r8
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b752:	f84c 3b04 	str.w	r3, [ip], #4
 800b756:	f859 3b04 	ldr.w	r3, [r9], #4
 800b75a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b75e:	0c1b      	lsrs	r3, r3, #16
 800b760:	fb0a b303 	mla	r3, sl, r3, fp
 800b764:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b768:	454f      	cmp	r7, r9
 800b76a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b76e:	d805      	bhi.n	800b77c <__multiply+0x124>
 800b770:	f8c8 3004 	str.w	r3, [r8, #4]
 800b774:	3504      	adds	r5, #4
 800b776:	e79b      	b.n	800b6b0 <__multiply+0x58>
 800b778:	46d4      	mov	ip, sl
 800b77a:	e7b3      	b.n	800b6e4 <__multiply+0x8c>
 800b77c:	46e0      	mov	r8, ip
 800b77e:	e7dd      	b.n	800b73c <__multiply+0xe4>
 800b780:	3e01      	subs	r6, #1
 800b782:	e799      	b.n	800b6b8 <__multiply+0x60>

0800b784 <__pow5mult>:
 800b784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b788:	4615      	mov	r5, r2
 800b78a:	f012 0203 	ands.w	r2, r2, #3
 800b78e:	4606      	mov	r6, r0
 800b790:	460f      	mov	r7, r1
 800b792:	d007      	beq.n	800b7a4 <__pow5mult+0x20>
 800b794:	3a01      	subs	r2, #1
 800b796:	4c21      	ldr	r4, [pc, #132]	; (800b81c <__pow5mult+0x98>)
 800b798:	2300      	movs	r3, #0
 800b79a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b79e:	f7ff fec9 	bl	800b534 <__multadd>
 800b7a2:	4607      	mov	r7, r0
 800b7a4:	10ad      	asrs	r5, r5, #2
 800b7a6:	d035      	beq.n	800b814 <__pow5mult+0x90>
 800b7a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b7aa:	b93c      	cbnz	r4, 800b7bc <__pow5mult+0x38>
 800b7ac:	2010      	movs	r0, #16
 800b7ae:	f7fe facb 	bl	8009d48 <malloc>
 800b7b2:	6270      	str	r0, [r6, #36]	; 0x24
 800b7b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7b8:	6004      	str	r4, [r0, #0]
 800b7ba:	60c4      	str	r4, [r0, #12]
 800b7bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b7c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7c4:	b94c      	cbnz	r4, 800b7da <__pow5mult+0x56>
 800b7c6:	f240 2171 	movw	r1, #625	; 0x271
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	f7ff ff3b 	bl	800b646 <__i2b>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	6003      	str	r3, [r0, #0]
 800b7da:	f04f 0800 	mov.w	r8, #0
 800b7de:	07eb      	lsls	r3, r5, #31
 800b7e0:	d50a      	bpl.n	800b7f8 <__pow5mult+0x74>
 800b7e2:	4639      	mov	r1, r7
 800b7e4:	4622      	mov	r2, r4
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	f7ff ff36 	bl	800b658 <__multiply>
 800b7ec:	4639      	mov	r1, r7
 800b7ee:	4681      	mov	r9, r0
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	f7ff fe88 	bl	800b506 <_Bfree>
 800b7f6:	464f      	mov	r7, r9
 800b7f8:	106d      	asrs	r5, r5, #1
 800b7fa:	d00b      	beq.n	800b814 <__pow5mult+0x90>
 800b7fc:	6820      	ldr	r0, [r4, #0]
 800b7fe:	b938      	cbnz	r0, 800b810 <__pow5mult+0x8c>
 800b800:	4622      	mov	r2, r4
 800b802:	4621      	mov	r1, r4
 800b804:	4630      	mov	r0, r6
 800b806:	f7ff ff27 	bl	800b658 <__multiply>
 800b80a:	6020      	str	r0, [r4, #0]
 800b80c:	f8c0 8000 	str.w	r8, [r0]
 800b810:	4604      	mov	r4, r0
 800b812:	e7e4      	b.n	800b7de <__pow5mult+0x5a>
 800b814:	4638      	mov	r0, r7
 800b816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b81a:	bf00      	nop
 800b81c:	0800bfb0 	.word	0x0800bfb0

0800b820 <__lshift>:
 800b820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b824:	460c      	mov	r4, r1
 800b826:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b82a:	6923      	ldr	r3, [r4, #16]
 800b82c:	6849      	ldr	r1, [r1, #4]
 800b82e:	eb0a 0903 	add.w	r9, sl, r3
 800b832:	68a3      	ldr	r3, [r4, #8]
 800b834:	4607      	mov	r7, r0
 800b836:	4616      	mov	r6, r2
 800b838:	f109 0501 	add.w	r5, r9, #1
 800b83c:	42ab      	cmp	r3, r5
 800b83e:	db32      	blt.n	800b8a6 <__lshift+0x86>
 800b840:	4638      	mov	r0, r7
 800b842:	f7ff fe2c 	bl	800b49e <_Balloc>
 800b846:	2300      	movs	r3, #0
 800b848:	4680      	mov	r8, r0
 800b84a:	f100 0114 	add.w	r1, r0, #20
 800b84e:	461a      	mov	r2, r3
 800b850:	4553      	cmp	r3, sl
 800b852:	db2b      	blt.n	800b8ac <__lshift+0x8c>
 800b854:	6920      	ldr	r0, [r4, #16]
 800b856:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b85a:	f104 0314 	add.w	r3, r4, #20
 800b85e:	f016 021f 	ands.w	r2, r6, #31
 800b862:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b866:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b86a:	d025      	beq.n	800b8b8 <__lshift+0x98>
 800b86c:	f1c2 0e20 	rsb	lr, r2, #32
 800b870:	2000      	movs	r0, #0
 800b872:	681e      	ldr	r6, [r3, #0]
 800b874:	468a      	mov	sl, r1
 800b876:	4096      	lsls	r6, r2
 800b878:	4330      	orrs	r0, r6
 800b87a:	f84a 0b04 	str.w	r0, [sl], #4
 800b87e:	f853 0b04 	ldr.w	r0, [r3], #4
 800b882:	459c      	cmp	ip, r3
 800b884:	fa20 f00e 	lsr.w	r0, r0, lr
 800b888:	d814      	bhi.n	800b8b4 <__lshift+0x94>
 800b88a:	6048      	str	r0, [r1, #4]
 800b88c:	b108      	cbz	r0, 800b892 <__lshift+0x72>
 800b88e:	f109 0502 	add.w	r5, r9, #2
 800b892:	3d01      	subs	r5, #1
 800b894:	4638      	mov	r0, r7
 800b896:	f8c8 5010 	str.w	r5, [r8, #16]
 800b89a:	4621      	mov	r1, r4
 800b89c:	f7ff fe33 	bl	800b506 <_Bfree>
 800b8a0:	4640      	mov	r0, r8
 800b8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a6:	3101      	adds	r1, #1
 800b8a8:	005b      	lsls	r3, r3, #1
 800b8aa:	e7c7      	b.n	800b83c <__lshift+0x1c>
 800b8ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	e7cd      	b.n	800b850 <__lshift+0x30>
 800b8b4:	4651      	mov	r1, sl
 800b8b6:	e7dc      	b.n	800b872 <__lshift+0x52>
 800b8b8:	3904      	subs	r1, #4
 800b8ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8be:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8c2:	459c      	cmp	ip, r3
 800b8c4:	d8f9      	bhi.n	800b8ba <__lshift+0x9a>
 800b8c6:	e7e4      	b.n	800b892 <__lshift+0x72>

0800b8c8 <__mcmp>:
 800b8c8:	6903      	ldr	r3, [r0, #16]
 800b8ca:	690a      	ldr	r2, [r1, #16]
 800b8cc:	1a9b      	subs	r3, r3, r2
 800b8ce:	b530      	push	{r4, r5, lr}
 800b8d0:	d10c      	bne.n	800b8ec <__mcmp+0x24>
 800b8d2:	0092      	lsls	r2, r2, #2
 800b8d4:	3014      	adds	r0, #20
 800b8d6:	3114      	adds	r1, #20
 800b8d8:	1884      	adds	r4, r0, r2
 800b8da:	4411      	add	r1, r2
 800b8dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b8e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b8e4:	4295      	cmp	r5, r2
 800b8e6:	d003      	beq.n	800b8f0 <__mcmp+0x28>
 800b8e8:	d305      	bcc.n	800b8f6 <__mcmp+0x2e>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	bd30      	pop	{r4, r5, pc}
 800b8f0:	42a0      	cmp	r0, r4
 800b8f2:	d3f3      	bcc.n	800b8dc <__mcmp+0x14>
 800b8f4:	e7fa      	b.n	800b8ec <__mcmp+0x24>
 800b8f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8fa:	e7f7      	b.n	800b8ec <__mcmp+0x24>

0800b8fc <__mdiff>:
 800b8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b900:	460d      	mov	r5, r1
 800b902:	4607      	mov	r7, r0
 800b904:	4611      	mov	r1, r2
 800b906:	4628      	mov	r0, r5
 800b908:	4614      	mov	r4, r2
 800b90a:	f7ff ffdd 	bl	800b8c8 <__mcmp>
 800b90e:	1e06      	subs	r6, r0, #0
 800b910:	d108      	bne.n	800b924 <__mdiff+0x28>
 800b912:	4631      	mov	r1, r6
 800b914:	4638      	mov	r0, r7
 800b916:	f7ff fdc2 	bl	800b49e <_Balloc>
 800b91a:	2301      	movs	r3, #1
 800b91c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b924:	bfa4      	itt	ge
 800b926:	4623      	movge	r3, r4
 800b928:	462c      	movge	r4, r5
 800b92a:	4638      	mov	r0, r7
 800b92c:	6861      	ldr	r1, [r4, #4]
 800b92e:	bfa6      	itte	ge
 800b930:	461d      	movge	r5, r3
 800b932:	2600      	movge	r6, #0
 800b934:	2601      	movlt	r6, #1
 800b936:	f7ff fdb2 	bl	800b49e <_Balloc>
 800b93a:	692b      	ldr	r3, [r5, #16]
 800b93c:	60c6      	str	r6, [r0, #12]
 800b93e:	6926      	ldr	r6, [r4, #16]
 800b940:	f105 0914 	add.w	r9, r5, #20
 800b944:	f104 0214 	add.w	r2, r4, #20
 800b948:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b94c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b950:	f100 0514 	add.w	r5, r0, #20
 800b954:	f04f 0e00 	mov.w	lr, #0
 800b958:	f852 ab04 	ldr.w	sl, [r2], #4
 800b95c:	f859 4b04 	ldr.w	r4, [r9], #4
 800b960:	fa1e f18a 	uxtah	r1, lr, sl
 800b964:	b2a3      	uxth	r3, r4
 800b966:	1ac9      	subs	r1, r1, r3
 800b968:	0c23      	lsrs	r3, r4, #16
 800b96a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b96e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b972:	b289      	uxth	r1, r1
 800b974:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b978:	45c8      	cmp	r8, r9
 800b97a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b97e:	4694      	mov	ip, r2
 800b980:	f845 3b04 	str.w	r3, [r5], #4
 800b984:	d8e8      	bhi.n	800b958 <__mdiff+0x5c>
 800b986:	45bc      	cmp	ip, r7
 800b988:	d304      	bcc.n	800b994 <__mdiff+0x98>
 800b98a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b98e:	b183      	cbz	r3, 800b9b2 <__mdiff+0xb6>
 800b990:	6106      	str	r6, [r0, #16]
 800b992:	e7c5      	b.n	800b920 <__mdiff+0x24>
 800b994:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b998:	fa1e f381 	uxtah	r3, lr, r1
 800b99c:	141a      	asrs	r2, r3, #16
 800b99e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b9ac:	f845 3b04 	str.w	r3, [r5], #4
 800b9b0:	e7e9      	b.n	800b986 <__mdiff+0x8a>
 800b9b2:	3e01      	subs	r6, #1
 800b9b4:	e7e9      	b.n	800b98a <__mdiff+0x8e>

0800b9b6 <__d2b>:
 800b9b6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9ba:	460e      	mov	r6, r1
 800b9bc:	2101      	movs	r1, #1
 800b9be:	ec59 8b10 	vmov	r8, r9, d0
 800b9c2:	4615      	mov	r5, r2
 800b9c4:	f7ff fd6b 	bl	800b49e <_Balloc>
 800b9c8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b9cc:	4607      	mov	r7, r0
 800b9ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9d2:	bb34      	cbnz	r4, 800ba22 <__d2b+0x6c>
 800b9d4:	9301      	str	r3, [sp, #4]
 800b9d6:	f1b8 0300 	subs.w	r3, r8, #0
 800b9da:	d027      	beq.n	800ba2c <__d2b+0x76>
 800b9dc:	a802      	add	r0, sp, #8
 800b9de:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b9e2:	f7ff fe01 	bl	800b5e8 <__lo0bits>
 800b9e6:	9900      	ldr	r1, [sp, #0]
 800b9e8:	b1f0      	cbz	r0, 800ba28 <__d2b+0x72>
 800b9ea:	9a01      	ldr	r2, [sp, #4]
 800b9ec:	f1c0 0320 	rsb	r3, r0, #32
 800b9f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9f4:	430b      	orrs	r3, r1
 800b9f6:	40c2      	lsrs	r2, r0
 800b9f8:	617b      	str	r3, [r7, #20]
 800b9fa:	9201      	str	r2, [sp, #4]
 800b9fc:	9b01      	ldr	r3, [sp, #4]
 800b9fe:	61bb      	str	r3, [r7, #24]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	bf14      	ite	ne
 800ba04:	2102      	movne	r1, #2
 800ba06:	2101      	moveq	r1, #1
 800ba08:	6139      	str	r1, [r7, #16]
 800ba0a:	b1c4      	cbz	r4, 800ba3e <__d2b+0x88>
 800ba0c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ba10:	4404      	add	r4, r0
 800ba12:	6034      	str	r4, [r6, #0]
 800ba14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba18:	6028      	str	r0, [r5, #0]
 800ba1a:	4638      	mov	r0, r7
 800ba1c:	b003      	add	sp, #12
 800ba1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba26:	e7d5      	b.n	800b9d4 <__d2b+0x1e>
 800ba28:	6179      	str	r1, [r7, #20]
 800ba2a:	e7e7      	b.n	800b9fc <__d2b+0x46>
 800ba2c:	a801      	add	r0, sp, #4
 800ba2e:	f7ff fddb 	bl	800b5e8 <__lo0bits>
 800ba32:	9b01      	ldr	r3, [sp, #4]
 800ba34:	617b      	str	r3, [r7, #20]
 800ba36:	2101      	movs	r1, #1
 800ba38:	6139      	str	r1, [r7, #16]
 800ba3a:	3020      	adds	r0, #32
 800ba3c:	e7e5      	b.n	800ba0a <__d2b+0x54>
 800ba3e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ba42:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba46:	6030      	str	r0, [r6, #0]
 800ba48:	6918      	ldr	r0, [r3, #16]
 800ba4a:	f7ff fdae 	bl	800b5aa <__hi0bits>
 800ba4e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ba52:	e7e1      	b.n	800ba18 <__d2b+0x62>

0800ba54 <_calloc_r>:
 800ba54:	b538      	push	{r3, r4, r5, lr}
 800ba56:	fb02 f401 	mul.w	r4, r2, r1
 800ba5a:	4621      	mov	r1, r4
 800ba5c:	f7fe f9da 	bl	8009e14 <_malloc_r>
 800ba60:	4605      	mov	r5, r0
 800ba62:	b118      	cbz	r0, 800ba6c <_calloc_r+0x18>
 800ba64:	4622      	mov	r2, r4
 800ba66:	2100      	movs	r1, #0
 800ba68:	f7fe f97e 	bl	8009d68 <memset>
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	bd38      	pop	{r3, r4, r5, pc}

0800ba70 <__ssputs_r>:
 800ba70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba74:	688e      	ldr	r6, [r1, #8]
 800ba76:	429e      	cmp	r6, r3
 800ba78:	4682      	mov	sl, r0
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	4690      	mov	r8, r2
 800ba7e:	4699      	mov	r9, r3
 800ba80:	d837      	bhi.n	800baf2 <__ssputs_r+0x82>
 800ba82:	898a      	ldrh	r2, [r1, #12]
 800ba84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba88:	d031      	beq.n	800baee <__ssputs_r+0x7e>
 800ba8a:	6825      	ldr	r5, [r4, #0]
 800ba8c:	6909      	ldr	r1, [r1, #16]
 800ba8e:	1a6f      	subs	r7, r5, r1
 800ba90:	6965      	ldr	r5, [r4, #20]
 800ba92:	2302      	movs	r3, #2
 800ba94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba98:	fb95 f5f3 	sdiv	r5, r5, r3
 800ba9c:	f109 0301 	add.w	r3, r9, #1
 800baa0:	443b      	add	r3, r7
 800baa2:	429d      	cmp	r5, r3
 800baa4:	bf38      	it	cc
 800baa6:	461d      	movcc	r5, r3
 800baa8:	0553      	lsls	r3, r2, #21
 800baaa:	d530      	bpl.n	800bb0e <__ssputs_r+0x9e>
 800baac:	4629      	mov	r1, r5
 800baae:	f7fe f9b1 	bl	8009e14 <_malloc_r>
 800bab2:	4606      	mov	r6, r0
 800bab4:	b950      	cbnz	r0, 800bacc <__ssputs_r+0x5c>
 800bab6:	230c      	movs	r3, #12
 800bab8:	f8ca 3000 	str.w	r3, [sl]
 800babc:	89a3      	ldrh	r3, [r4, #12]
 800babe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bac2:	81a3      	strh	r3, [r4, #12]
 800bac4:	f04f 30ff 	mov.w	r0, #4294967295
 800bac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bacc:	463a      	mov	r2, r7
 800bace:	6921      	ldr	r1, [r4, #16]
 800bad0:	f7ff fcd8 	bl	800b484 <memcpy>
 800bad4:	89a3      	ldrh	r3, [r4, #12]
 800bad6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bade:	81a3      	strh	r3, [r4, #12]
 800bae0:	6126      	str	r6, [r4, #16]
 800bae2:	6165      	str	r5, [r4, #20]
 800bae4:	443e      	add	r6, r7
 800bae6:	1bed      	subs	r5, r5, r7
 800bae8:	6026      	str	r6, [r4, #0]
 800baea:	60a5      	str	r5, [r4, #8]
 800baec:	464e      	mov	r6, r9
 800baee:	454e      	cmp	r6, r9
 800baf0:	d900      	bls.n	800baf4 <__ssputs_r+0x84>
 800baf2:	464e      	mov	r6, r9
 800baf4:	4632      	mov	r2, r6
 800baf6:	4641      	mov	r1, r8
 800baf8:	6820      	ldr	r0, [r4, #0]
 800bafa:	f000 f91d 	bl	800bd38 <memmove>
 800bafe:	68a3      	ldr	r3, [r4, #8]
 800bb00:	1b9b      	subs	r3, r3, r6
 800bb02:	60a3      	str	r3, [r4, #8]
 800bb04:	6823      	ldr	r3, [r4, #0]
 800bb06:	441e      	add	r6, r3
 800bb08:	6026      	str	r6, [r4, #0]
 800bb0a:	2000      	movs	r0, #0
 800bb0c:	e7dc      	b.n	800bac8 <__ssputs_r+0x58>
 800bb0e:	462a      	mov	r2, r5
 800bb10:	f000 f92b 	bl	800bd6a <_realloc_r>
 800bb14:	4606      	mov	r6, r0
 800bb16:	2800      	cmp	r0, #0
 800bb18:	d1e2      	bne.n	800bae0 <__ssputs_r+0x70>
 800bb1a:	6921      	ldr	r1, [r4, #16]
 800bb1c:	4650      	mov	r0, sl
 800bb1e:	f7fe f92b 	bl	8009d78 <_free_r>
 800bb22:	e7c8      	b.n	800bab6 <__ssputs_r+0x46>

0800bb24 <_svfiprintf_r>:
 800bb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb28:	461d      	mov	r5, r3
 800bb2a:	898b      	ldrh	r3, [r1, #12]
 800bb2c:	061f      	lsls	r7, r3, #24
 800bb2e:	b09d      	sub	sp, #116	; 0x74
 800bb30:	4680      	mov	r8, r0
 800bb32:	460c      	mov	r4, r1
 800bb34:	4616      	mov	r6, r2
 800bb36:	d50f      	bpl.n	800bb58 <_svfiprintf_r+0x34>
 800bb38:	690b      	ldr	r3, [r1, #16]
 800bb3a:	b96b      	cbnz	r3, 800bb58 <_svfiprintf_r+0x34>
 800bb3c:	2140      	movs	r1, #64	; 0x40
 800bb3e:	f7fe f969 	bl	8009e14 <_malloc_r>
 800bb42:	6020      	str	r0, [r4, #0]
 800bb44:	6120      	str	r0, [r4, #16]
 800bb46:	b928      	cbnz	r0, 800bb54 <_svfiprintf_r+0x30>
 800bb48:	230c      	movs	r3, #12
 800bb4a:	f8c8 3000 	str.w	r3, [r8]
 800bb4e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb52:	e0c8      	b.n	800bce6 <_svfiprintf_r+0x1c2>
 800bb54:	2340      	movs	r3, #64	; 0x40
 800bb56:	6163      	str	r3, [r4, #20]
 800bb58:	2300      	movs	r3, #0
 800bb5a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb5c:	2320      	movs	r3, #32
 800bb5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb62:	2330      	movs	r3, #48	; 0x30
 800bb64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb68:	9503      	str	r5, [sp, #12]
 800bb6a:	f04f 0b01 	mov.w	fp, #1
 800bb6e:	4637      	mov	r7, r6
 800bb70:	463d      	mov	r5, r7
 800bb72:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bb76:	b10b      	cbz	r3, 800bb7c <_svfiprintf_r+0x58>
 800bb78:	2b25      	cmp	r3, #37	; 0x25
 800bb7a:	d13e      	bne.n	800bbfa <_svfiprintf_r+0xd6>
 800bb7c:	ebb7 0a06 	subs.w	sl, r7, r6
 800bb80:	d00b      	beq.n	800bb9a <_svfiprintf_r+0x76>
 800bb82:	4653      	mov	r3, sl
 800bb84:	4632      	mov	r2, r6
 800bb86:	4621      	mov	r1, r4
 800bb88:	4640      	mov	r0, r8
 800bb8a:	f7ff ff71 	bl	800ba70 <__ssputs_r>
 800bb8e:	3001      	adds	r0, #1
 800bb90:	f000 80a4 	beq.w	800bcdc <_svfiprintf_r+0x1b8>
 800bb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb96:	4453      	add	r3, sl
 800bb98:	9309      	str	r3, [sp, #36]	; 0x24
 800bb9a:	783b      	ldrb	r3, [r7, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f000 809d 	beq.w	800bcdc <_svfiprintf_r+0x1b8>
 800bba2:	2300      	movs	r3, #0
 800bba4:	f04f 32ff 	mov.w	r2, #4294967295
 800bba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbac:	9304      	str	r3, [sp, #16]
 800bbae:	9307      	str	r3, [sp, #28]
 800bbb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbb4:	931a      	str	r3, [sp, #104]	; 0x68
 800bbb6:	462f      	mov	r7, r5
 800bbb8:	2205      	movs	r2, #5
 800bbba:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bbbe:	4850      	ldr	r0, [pc, #320]	; (800bd00 <_svfiprintf_r+0x1dc>)
 800bbc0:	f7f4 fb0e 	bl	80001e0 <memchr>
 800bbc4:	9b04      	ldr	r3, [sp, #16]
 800bbc6:	b9d0      	cbnz	r0, 800bbfe <_svfiprintf_r+0xda>
 800bbc8:	06d9      	lsls	r1, r3, #27
 800bbca:	bf44      	itt	mi
 800bbcc:	2220      	movmi	r2, #32
 800bbce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bbd2:	071a      	lsls	r2, r3, #28
 800bbd4:	bf44      	itt	mi
 800bbd6:	222b      	movmi	r2, #43	; 0x2b
 800bbd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bbdc:	782a      	ldrb	r2, [r5, #0]
 800bbde:	2a2a      	cmp	r2, #42	; 0x2a
 800bbe0:	d015      	beq.n	800bc0e <_svfiprintf_r+0xea>
 800bbe2:	9a07      	ldr	r2, [sp, #28]
 800bbe4:	462f      	mov	r7, r5
 800bbe6:	2000      	movs	r0, #0
 800bbe8:	250a      	movs	r5, #10
 800bbea:	4639      	mov	r1, r7
 800bbec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbf0:	3b30      	subs	r3, #48	; 0x30
 800bbf2:	2b09      	cmp	r3, #9
 800bbf4:	d94d      	bls.n	800bc92 <_svfiprintf_r+0x16e>
 800bbf6:	b1b8      	cbz	r0, 800bc28 <_svfiprintf_r+0x104>
 800bbf8:	e00f      	b.n	800bc1a <_svfiprintf_r+0xf6>
 800bbfa:	462f      	mov	r7, r5
 800bbfc:	e7b8      	b.n	800bb70 <_svfiprintf_r+0x4c>
 800bbfe:	4a40      	ldr	r2, [pc, #256]	; (800bd00 <_svfiprintf_r+0x1dc>)
 800bc00:	1a80      	subs	r0, r0, r2
 800bc02:	fa0b f000 	lsl.w	r0, fp, r0
 800bc06:	4318      	orrs	r0, r3
 800bc08:	9004      	str	r0, [sp, #16]
 800bc0a:	463d      	mov	r5, r7
 800bc0c:	e7d3      	b.n	800bbb6 <_svfiprintf_r+0x92>
 800bc0e:	9a03      	ldr	r2, [sp, #12]
 800bc10:	1d11      	adds	r1, r2, #4
 800bc12:	6812      	ldr	r2, [r2, #0]
 800bc14:	9103      	str	r1, [sp, #12]
 800bc16:	2a00      	cmp	r2, #0
 800bc18:	db01      	blt.n	800bc1e <_svfiprintf_r+0xfa>
 800bc1a:	9207      	str	r2, [sp, #28]
 800bc1c:	e004      	b.n	800bc28 <_svfiprintf_r+0x104>
 800bc1e:	4252      	negs	r2, r2
 800bc20:	f043 0302 	orr.w	r3, r3, #2
 800bc24:	9207      	str	r2, [sp, #28]
 800bc26:	9304      	str	r3, [sp, #16]
 800bc28:	783b      	ldrb	r3, [r7, #0]
 800bc2a:	2b2e      	cmp	r3, #46	; 0x2e
 800bc2c:	d10c      	bne.n	800bc48 <_svfiprintf_r+0x124>
 800bc2e:	787b      	ldrb	r3, [r7, #1]
 800bc30:	2b2a      	cmp	r3, #42	; 0x2a
 800bc32:	d133      	bne.n	800bc9c <_svfiprintf_r+0x178>
 800bc34:	9b03      	ldr	r3, [sp, #12]
 800bc36:	1d1a      	adds	r2, r3, #4
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	9203      	str	r2, [sp, #12]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	bfb8      	it	lt
 800bc40:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc44:	3702      	adds	r7, #2
 800bc46:	9305      	str	r3, [sp, #20]
 800bc48:	4d2e      	ldr	r5, [pc, #184]	; (800bd04 <_svfiprintf_r+0x1e0>)
 800bc4a:	7839      	ldrb	r1, [r7, #0]
 800bc4c:	2203      	movs	r2, #3
 800bc4e:	4628      	mov	r0, r5
 800bc50:	f7f4 fac6 	bl	80001e0 <memchr>
 800bc54:	b138      	cbz	r0, 800bc66 <_svfiprintf_r+0x142>
 800bc56:	2340      	movs	r3, #64	; 0x40
 800bc58:	1b40      	subs	r0, r0, r5
 800bc5a:	fa03 f000 	lsl.w	r0, r3, r0
 800bc5e:	9b04      	ldr	r3, [sp, #16]
 800bc60:	4303      	orrs	r3, r0
 800bc62:	3701      	adds	r7, #1
 800bc64:	9304      	str	r3, [sp, #16]
 800bc66:	7839      	ldrb	r1, [r7, #0]
 800bc68:	4827      	ldr	r0, [pc, #156]	; (800bd08 <_svfiprintf_r+0x1e4>)
 800bc6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc6e:	2206      	movs	r2, #6
 800bc70:	1c7e      	adds	r6, r7, #1
 800bc72:	f7f4 fab5 	bl	80001e0 <memchr>
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d038      	beq.n	800bcec <_svfiprintf_r+0x1c8>
 800bc7a:	4b24      	ldr	r3, [pc, #144]	; (800bd0c <_svfiprintf_r+0x1e8>)
 800bc7c:	bb13      	cbnz	r3, 800bcc4 <_svfiprintf_r+0x1a0>
 800bc7e:	9b03      	ldr	r3, [sp, #12]
 800bc80:	3307      	adds	r3, #7
 800bc82:	f023 0307 	bic.w	r3, r3, #7
 800bc86:	3308      	adds	r3, #8
 800bc88:	9303      	str	r3, [sp, #12]
 800bc8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc8c:	444b      	add	r3, r9
 800bc8e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc90:	e76d      	b.n	800bb6e <_svfiprintf_r+0x4a>
 800bc92:	fb05 3202 	mla	r2, r5, r2, r3
 800bc96:	2001      	movs	r0, #1
 800bc98:	460f      	mov	r7, r1
 800bc9a:	e7a6      	b.n	800bbea <_svfiprintf_r+0xc6>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	3701      	adds	r7, #1
 800bca0:	9305      	str	r3, [sp, #20]
 800bca2:	4619      	mov	r1, r3
 800bca4:	250a      	movs	r5, #10
 800bca6:	4638      	mov	r0, r7
 800bca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcac:	3a30      	subs	r2, #48	; 0x30
 800bcae:	2a09      	cmp	r2, #9
 800bcb0:	d903      	bls.n	800bcba <_svfiprintf_r+0x196>
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d0c8      	beq.n	800bc48 <_svfiprintf_r+0x124>
 800bcb6:	9105      	str	r1, [sp, #20]
 800bcb8:	e7c6      	b.n	800bc48 <_svfiprintf_r+0x124>
 800bcba:	fb05 2101 	mla	r1, r5, r1, r2
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	4607      	mov	r7, r0
 800bcc2:	e7f0      	b.n	800bca6 <_svfiprintf_r+0x182>
 800bcc4:	ab03      	add	r3, sp, #12
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	4622      	mov	r2, r4
 800bcca:	4b11      	ldr	r3, [pc, #68]	; (800bd10 <_svfiprintf_r+0x1ec>)
 800bccc:	a904      	add	r1, sp, #16
 800bcce:	4640      	mov	r0, r8
 800bcd0:	f7fe f98e 	bl	8009ff0 <_printf_float>
 800bcd4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bcd8:	4681      	mov	r9, r0
 800bcda:	d1d6      	bne.n	800bc8a <_svfiprintf_r+0x166>
 800bcdc:	89a3      	ldrh	r3, [r4, #12]
 800bcde:	065b      	lsls	r3, r3, #25
 800bce0:	f53f af35 	bmi.w	800bb4e <_svfiprintf_r+0x2a>
 800bce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bce6:	b01d      	add	sp, #116	; 0x74
 800bce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcec:	ab03      	add	r3, sp, #12
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	4622      	mov	r2, r4
 800bcf2:	4b07      	ldr	r3, [pc, #28]	; (800bd10 <_svfiprintf_r+0x1ec>)
 800bcf4:	a904      	add	r1, sp, #16
 800bcf6:	4640      	mov	r0, r8
 800bcf8:	f7fe fc30 	bl	800a55c <_printf_i>
 800bcfc:	e7ea      	b.n	800bcd4 <_svfiprintf_r+0x1b0>
 800bcfe:	bf00      	nop
 800bd00:	0800bfbc 	.word	0x0800bfbc
 800bd04:	0800bfc2 	.word	0x0800bfc2
 800bd08:	0800bfc6 	.word	0x0800bfc6
 800bd0c:	08009ff1 	.word	0x08009ff1
 800bd10:	0800ba71 	.word	0x0800ba71

0800bd14 <__ascii_mbtowc>:
 800bd14:	b082      	sub	sp, #8
 800bd16:	b901      	cbnz	r1, 800bd1a <__ascii_mbtowc+0x6>
 800bd18:	a901      	add	r1, sp, #4
 800bd1a:	b142      	cbz	r2, 800bd2e <__ascii_mbtowc+0x1a>
 800bd1c:	b14b      	cbz	r3, 800bd32 <__ascii_mbtowc+0x1e>
 800bd1e:	7813      	ldrb	r3, [r2, #0]
 800bd20:	600b      	str	r3, [r1, #0]
 800bd22:	7812      	ldrb	r2, [r2, #0]
 800bd24:	1c10      	adds	r0, r2, #0
 800bd26:	bf18      	it	ne
 800bd28:	2001      	movne	r0, #1
 800bd2a:	b002      	add	sp, #8
 800bd2c:	4770      	bx	lr
 800bd2e:	4610      	mov	r0, r2
 800bd30:	e7fb      	b.n	800bd2a <__ascii_mbtowc+0x16>
 800bd32:	f06f 0001 	mvn.w	r0, #1
 800bd36:	e7f8      	b.n	800bd2a <__ascii_mbtowc+0x16>

0800bd38 <memmove>:
 800bd38:	4288      	cmp	r0, r1
 800bd3a:	b510      	push	{r4, lr}
 800bd3c:	eb01 0302 	add.w	r3, r1, r2
 800bd40:	d807      	bhi.n	800bd52 <memmove+0x1a>
 800bd42:	1e42      	subs	r2, r0, #1
 800bd44:	4299      	cmp	r1, r3
 800bd46:	d00a      	beq.n	800bd5e <memmove+0x26>
 800bd48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd4c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bd50:	e7f8      	b.n	800bd44 <memmove+0xc>
 800bd52:	4283      	cmp	r3, r0
 800bd54:	d9f5      	bls.n	800bd42 <memmove+0xa>
 800bd56:	1881      	adds	r1, r0, r2
 800bd58:	1ad2      	subs	r2, r2, r3
 800bd5a:	42d3      	cmn	r3, r2
 800bd5c:	d100      	bne.n	800bd60 <memmove+0x28>
 800bd5e:	bd10      	pop	{r4, pc}
 800bd60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd64:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bd68:	e7f7      	b.n	800bd5a <memmove+0x22>

0800bd6a <_realloc_r>:
 800bd6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd6c:	4607      	mov	r7, r0
 800bd6e:	4614      	mov	r4, r2
 800bd70:	460e      	mov	r6, r1
 800bd72:	b921      	cbnz	r1, 800bd7e <_realloc_r+0x14>
 800bd74:	4611      	mov	r1, r2
 800bd76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bd7a:	f7fe b84b 	b.w	8009e14 <_malloc_r>
 800bd7e:	b922      	cbnz	r2, 800bd8a <_realloc_r+0x20>
 800bd80:	f7fd fffa 	bl	8009d78 <_free_r>
 800bd84:	4625      	mov	r5, r4
 800bd86:	4628      	mov	r0, r5
 800bd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd8a:	f000 f821 	bl	800bdd0 <_malloc_usable_size_r>
 800bd8e:	42a0      	cmp	r0, r4
 800bd90:	d20f      	bcs.n	800bdb2 <_realloc_r+0x48>
 800bd92:	4621      	mov	r1, r4
 800bd94:	4638      	mov	r0, r7
 800bd96:	f7fe f83d 	bl	8009e14 <_malloc_r>
 800bd9a:	4605      	mov	r5, r0
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d0f2      	beq.n	800bd86 <_realloc_r+0x1c>
 800bda0:	4631      	mov	r1, r6
 800bda2:	4622      	mov	r2, r4
 800bda4:	f7ff fb6e 	bl	800b484 <memcpy>
 800bda8:	4631      	mov	r1, r6
 800bdaa:	4638      	mov	r0, r7
 800bdac:	f7fd ffe4 	bl	8009d78 <_free_r>
 800bdb0:	e7e9      	b.n	800bd86 <_realloc_r+0x1c>
 800bdb2:	4635      	mov	r5, r6
 800bdb4:	e7e7      	b.n	800bd86 <_realloc_r+0x1c>

0800bdb6 <__ascii_wctomb>:
 800bdb6:	b149      	cbz	r1, 800bdcc <__ascii_wctomb+0x16>
 800bdb8:	2aff      	cmp	r2, #255	; 0xff
 800bdba:	bf85      	ittet	hi
 800bdbc:	238a      	movhi	r3, #138	; 0x8a
 800bdbe:	6003      	strhi	r3, [r0, #0]
 800bdc0:	700a      	strbls	r2, [r1, #0]
 800bdc2:	f04f 30ff 	movhi.w	r0, #4294967295
 800bdc6:	bf98      	it	ls
 800bdc8:	2001      	movls	r0, #1
 800bdca:	4770      	bx	lr
 800bdcc:	4608      	mov	r0, r1
 800bdce:	4770      	bx	lr

0800bdd0 <_malloc_usable_size_r>:
 800bdd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdd4:	1f18      	subs	r0, r3, #4
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	bfbc      	itt	lt
 800bdda:	580b      	ldrlt	r3, [r1, r0]
 800bddc:	18c0      	addlt	r0, r0, r3
 800bdde:	4770      	bx	lr

0800bde0 <_init>:
 800bde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde2:	bf00      	nop
 800bde4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bde6:	bc08      	pop	{r3}
 800bde8:	469e      	mov	lr, r3
 800bdea:	4770      	bx	lr

0800bdec <_fini>:
 800bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdee:	bf00      	nop
 800bdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdf2:	bc08      	pop	{r3}
 800bdf4:	469e      	mov	lr, r3
 800bdf6:	4770      	bx	lr
