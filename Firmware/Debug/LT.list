
LT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a840  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800a9c8  0800a9c8  0001a9c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac50  0800ac50  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac50  0800ac50  0001ac50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac58  0800ac58  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac58  0800ac58  0001ac58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac5c  0800ac5c  0001ac5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800ac60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a6c  20000350  0800afb0  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dbc  0800afb0  00021dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   000195c2  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003572  00000000  00000000  00039942  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001318  00000000  00000000  0003ceb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001190  00000000  00000000  0003e1d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000226cf  00000000  00000000  0003f360  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010d03  00000000  00000000  00061a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2885  00000000  00000000  00072732  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134fb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005810  00000000  00000000  00135034  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000350 	.word	0x20000350
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a9b0 	.word	0x0800a9b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000354 	.word	0x20000354
 80001c4:	0800a9b0 	.word	0x0800a9b0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <BMI088_ReadAccRegister>:
	float gyr[3];

} BMI088;

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 8000e0e:	7afb      	ldrb	r3, [r7, #11]
 8000e10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	753b      	strb	r3, [r7, #20]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	757b      	strb	r3, [r7, #21]
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	6858      	ldr	r0, [r3, #4]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	899b      	ldrh	r3, [r3, #12]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f001 fb3a 	bl	80024a4 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	6818      	ldr	r0, [r3, #0]
 8000e34:	f107 0210 	add.w	r2, r7, #16
 8000e38:	f107 0114 	add.w	r1, r7, #20
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2303      	movs	r3, #3
 8000e44:	f003 fab4 	bl	80043b0 <HAL_SPI_TransmitReceive>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	bf0c      	ite	eq
 8000e4e:	2301      	moveq	r3, #1
 8000e50:	2300      	movne	r3, #0
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6858      	ldr	r0, [r3, #4]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	899b      	ldrh	r3, [r3, #12]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	4619      	mov	r1, r3
 8000e62:	f001 fb1f 	bl	80024a4 <HAL_GPIO_WritePin>

	if (status == 1) {
 8000e66:	7dfb      	ldrb	r3, [r7, #23]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d102      	bne.n	8000e72 <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8000e6c:	7cba      	ldrb	r2, [r7, #18]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8000e72:	7dfb      	ldrb	r3, [r7, #23]

}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af02      	add	r7, sp, #8
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	460b      	mov	r3, r1
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 8000e8a:	7afb      	ldrb	r3, [r7, #11]
 8000e8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	753b      	strb	r3, [r7, #20]
 8000e94:	2300      	movs	r3, #0
 8000e96:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6898      	ldr	r0, [r3, #8]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	89db      	ldrh	r3, [r3, #14]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f001 fafe 	bl	80024a4 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	6818      	ldr	r0, [r3, #0]
 8000eac:	f107 0210 	add.w	r2, r7, #16
 8000eb0:	f107 0114 	add.w	r1, r7, #20
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2302      	movs	r3, #2
 8000ebc:	f003 fa78 	bl	80043b0 <HAL_SPI_TransmitReceive>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	bf0c      	ite	eq
 8000ec6:	2301      	moveq	r3, #1
 8000ec8:	2300      	movne	r3, #0
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6898      	ldr	r0, [r3, #8]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	89db      	ldrh	r3, [r3, #14]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f001 fae3 	bl	80024a4 <HAL_GPIO_WritePin>

	if (status == 1) {
 8000ede:	7dfb      	ldrb	r3, [r7, #23]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d102      	bne.n	8000eea <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 8000ee4:	7c7a      	ldrb	r2, [r7, #17]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8000eea:	7dfb      	ldrb	r3, [r7, #23]

}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	70fb      	strb	r3, [r7, #3]
 8000f00:	4613      	mov	r3, r2
 8000f02:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	733b      	strb	r3, [r7, #12]
 8000f08:	78bb      	ldrb	r3, [r7, #2]
 8000f0a:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6858      	ldr	r0, [r3, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	899b      	ldrh	r3, [r3, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	4619      	mov	r1, r3
 8000f18:	f001 fac4 	bl	80024a4 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	f107 010c 	add.w	r1, r7, #12
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	2202      	movs	r2, #2
 8000f2a:	f003 f90d 	bl	8004148 <HAL_SPI_Transmit>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	bf0c      	ite	eq
 8000f34:	2301      	moveq	r3, #1
 8000f36:	2300      	movne	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8000f3c:	bf00      	nop
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f003 fce0 	bl	8004908 <HAL_SPI_GetState>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d1f7      	bne.n	8000f3e <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6858      	ldr	r0, [r3, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	899b      	ldrh	r3, [r3, #12]
 8000f56:	2201      	movs	r2, #1
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f001 faa3 	bl	80024a4 <HAL_GPIO_WritePin>

	return status;
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	70fb      	strb	r3, [r7, #3]
 8000f74:	4613      	mov	r3, r2
 8000f76:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	733b      	strb	r3, [r7, #12]
 8000f7c:	78bb      	ldrb	r3, [r7, #2]
 8000f7e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6898      	ldr	r0, [r3, #8]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	89db      	ldrh	r3, [r3, #14]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f001 fa8a 	bl	80024a4 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	f107 010c 	add.w	r1, r7, #12
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	f003 f8d3 	bl	8004148 <HAL_SPI_Transmit>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	bf0c      	ite	eq
 8000fa8:	2301      	moveq	r3, #1
 8000faa:	2300      	movne	r3, #0
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8000fb0:	bf00      	nop
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 fca6 	bl	8004908 <HAL_SPI_GetState>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d1f7      	bne.n	8000fb2 <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6898      	ldr	r0, [r3, #8]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	89db      	ldrh	r3, [r3, #14]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f001 fa69 	bl	80024a4 <HAL_GPIO_WritePin>

	return status;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]

}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <BMI088_Init>:

uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	887a      	ldrh	r2, [r7, #2]
 8000ffa:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6a3a      	ldr	r2, [r7, #32]
 8001000:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001006:	81da      	strh	r2, [r3, #14]

	uint8_t status = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6858      	ldr	r0, [r3, #4]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	899b      	ldrh	r3, [r3, #12]
 8001014:	2200      	movs	r2, #0
 8001016:	4619      	mov	r1, r3
 8001018:	f001 fa44 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800101c:	2001      	movs	r0, #1
 800101e:	f000 ff51 	bl	8001ec4 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6858      	ldr	r0, [r3, #4]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	899b      	ldrh	r3, [r3, #12]
 800102a:	2201      	movs	r2, #1
 800102c:	4619      	mov	r1, r3
 800102e:	f001 fa39 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001032:	2032      	movs	r0, #50	; 0x32
 8001034:	f000 ff46 	bl	8001ec4 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8001038:	22b6      	movs	r2, #182	; 0xb6
 800103a:	217e      	movs	r1, #126	; 0x7e
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f7ff ff59 	bl	8000ef4 <BMI088_WriteAccRegister>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	4413      	add	r3, r2
 800104a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 800104c:	2032      	movs	r0, #50	; 0x32
 800104e:	f000 ff39 	bl	8001ec4 <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8001052:	f107 0316 	add.w	r3, r7, #22
 8001056:	461a      	mov	r2, r3
 8001058:	2100      	movs	r1, #0
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f7ff fed0 	bl	8000e00 <BMI088_ReadAccRegister>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	4413      	add	r3, r2
 8001068:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 800106a:	200a      	movs	r0, #10
 800106c:	f000 ff2a 	bl	8001ec4 <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 8001070:	22a8      	movs	r2, #168	; 0xa8
 8001072:	2140      	movs	r1, #64	; 0x40
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f7ff ff3d 	bl	8000ef4 <BMI088_WriteAccRegister>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	4413      	add	r3, r2
 8001082:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001084:	200a      	movs	r0, #10
 8001086:	f000 ff1d 	bl	8001ec4 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 800108a:	2200      	movs	r2, #0
 800108c:	2141      	movs	r1, #65	; 0x41
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f7ff ff30 	bl	8000ef4 <BMI088_WriteAccRegister>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	4413      	add	r3, r2
 800109c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800109e:	200a      	movs	r0, #10
 80010a0:	f000 ff10 	bl	8001ec4 <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 80010a4:	220a      	movs	r2, #10
 80010a6:	2153      	movs	r1, #83	; 0x53
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f7ff ff23 	bl	8000ef4 <BMI088_WriteAccRegister>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	7dfb      	ldrb	r3, [r7, #23]
 80010b4:	4413      	add	r3, r2
 80010b6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010b8:	200a      	movs	r0, #10
 80010ba:	f000 ff03 	bl	8001ec4 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 80010be:	2204      	movs	r2, #4
 80010c0:	2158      	movs	r1, #88	; 0x58
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f7ff ff16 	bl	8000ef4 <BMI088_WriteAccRegister>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	4413      	add	r3, r2
 80010d0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010d2:	200a      	movs	r0, #10
 80010d4:	f000 fef6 	bl	8001ec4 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 80010d8:	2200      	movs	r2, #0
 80010da:	217c      	movs	r1, #124	; 0x7c
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f7ff ff09 	bl	8000ef4 <BMI088_WriteAccRegister>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	4413      	add	r3, r2
 80010ea:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010ec:	200a      	movs	r0, #10
 80010ee:	f000 fee9 	bl	8001ec4 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 80010f2:	2204      	movs	r2, #4
 80010f4:	217d      	movs	r1, #125	; 0x7d
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f7ff fefc 	bl	8000ef4 <BMI088_WriteAccRegister>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	4413      	add	r3, r2
 8001104:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001106:	200a      	movs	r0, #10
 8001108:	f000 fedc 	bl	8001ec4 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4a38      	ldr	r2, [pc, #224]	; (80011f0 <BMI088_Init+0x214>)
 8001110:	611a      	str	r2, [r3, #16]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6898      	ldr	r0, [r3, #8]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	89db      	ldrh	r3, [r3, #14]
 800111a:	2201      	movs	r2, #1
 800111c:	4619      	mov	r1, r3
 800111e:	f001 f9c1 	bl	80024a4 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8001122:	22b6      	movs	r2, #182	; 0xb6
 8001124:	2114      	movs	r1, #20
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f7ff ff1e 	bl	8000f68 <BMI088_WriteGyrRegister>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	7dfb      	ldrb	r3, [r7, #23]
 8001132:	4413      	add	r3, r2
 8001134:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8001136:	20fa      	movs	r0, #250	; 0xfa
 8001138:	f000 fec4 	bl	8001ec4 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 800113c:	f107 0316 	add.w	r3, r7, #22
 8001140:	461a      	mov	r2, r3
 8001142:	2100      	movs	r1, #0
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f7ff fe99 	bl	8000e7c <BMI088_ReadGyrRegister>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	4413      	add	r3, r2
 8001152:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 8001154:	200a      	movs	r0, #10
 8001156:	f000 feb5 	bl	8001ec4 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 800115a:	2201      	movs	r2, #1
 800115c:	210f      	movs	r1, #15
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff ff02 	bl	8000f68 <BMI088_WriteGyrRegister>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	4413      	add	r3, r2
 800116c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800116e:	200a      	movs	r0, #10
 8001170:	f000 fea8 	bl	8001ec4 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x07); /* ODR = 100 Hz, Filter bandwidth = 32 Hz */
 8001174:	2207      	movs	r2, #7
 8001176:	2110      	movs	r1, #16
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f7ff fef5 	bl	8000f68 <BMI088_WriteGyrRegister>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	7dfb      	ldrb	r3, [r7, #23]
 8001184:	4413      	add	r3, r2
 8001186:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001188:	200a      	movs	r0, #10
 800118a:	f000 fe9b 	bl	8001ec4 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	2115      	movs	r1, #21
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff fee8 	bl	8000f68 <BMI088_WriteGyrRegister>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	4413      	add	r3, r2
 80011a0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011a2:	200a      	movs	r0, #10
 80011a4:	f000 fe8e 	bl	8001ec4 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 80011a8:	2201      	movs	r2, #1
 80011aa:	2116      	movs	r1, #22
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff fedb 	bl	8000f68 <BMI088_WriteGyrRegister>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	4413      	add	r3, r2
 80011ba:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011bc:	200a      	movs	r0, #10
 80011be:	f000 fe81 	bl	8001ec4 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 80011c2:	2201      	movs	r2, #1
 80011c4:	2118      	movs	r1, #24
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff fece 	bl	8000f68 <BMI088_WriteGyrRegister>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	4413      	add	r3, r2
 80011d4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80011d6:	200a      	movs	r0, #10
 80011d8:	f000 fe74 	bl	8001ec4 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to deg/s) */
	imu->gyrConversion = 1.0f / 32768.0f; /* Datasheet page 39 */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 80011e2:	615a      	str	r2, [r3, #20]

	return status;
 80011e4:	7dfb      	ldrb	r3, [r7, #23]

}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	3a6b70a4 	.word	0x3a6b70a4

080011f4 <BMI088_ReadAccelerometer>:

uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	2392      	movs	r3, #146	; 0x92
 8001208:	743b      	strb	r3, [r7, #16]
	uint8_t rxBuf[8];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6858      	ldr	r0, [r3, #4]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	899b      	ldrh	r3, [r3, #12]
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	f001 f945 	bl	80024a4 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 8, HAL_MAX_DELAY) == HAL_OK);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6818      	ldr	r0, [r3, #0]
 800121e:	f107 0208 	add.w	r2, r7, #8
 8001222:	f107 0110 	add.w	r1, r7, #16
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2308      	movs	r3, #8
 800122e:	f003 f8bf 	bl	80043b0 <HAL_SPI_TransmitReceive>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	bf0c      	ite	eq
 8001238:	2301      	moveq	r3, #1
 800123a:	2300      	movne	r3, #0
 800123c:	b2db      	uxtb	r3, r3
 800123e:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6858      	ldr	r0, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	899b      	ldrh	r3, [r3, #12]
 8001248:	2201      	movs	r2, #1
 800124a:	4619      	mov	r1, r3
 800124c:	f001 f92a 	bl	80024a4 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[3] << 8) | rxBuf[2]);
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	7abb      	ldrb	r3, [r7, #10]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[5] << 8) | rxBuf[4]);
 800125e:	7b7b      	ldrb	r3, [r7, #13]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b21a      	sxth	r2, r3
 8001264:	7b3b      	ldrb	r3, [r7, #12]
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[7] << 8) | rxBuf[6]);
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	b21a      	sxth	r2, r3
 8001272:	7bbb      	ldrb	r3, [r7, #14]
 8001274:	b21b      	sxth	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc[0] = imu->accConversion * accX;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001280:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	edc3 7a06 	vstr	s15, [r3, #24]
	imu->acc[1] = imu->accConversion * accY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	ed93 7a04 	vldr	s14, [r3, #16]
 800129c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	edc3 7a07 	vstr	s15, [r3, #28]
	imu->acc[2] = imu->accConversion * accZ;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	ed93 7a04 	vldr	s14, [r3, #16]
 80012b8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	edc3 7a08 	vstr	s15, [r3, #32]

	return status;
 80012ce:	7ffb      	ldrb	r3, [r7, #31]

}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <BMI088_ReadGyroscope>:

uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af02      	add	r7, sp, #8
 80012de:	6078      	str	r0, [r7, #4]

	/* Read raw gyroscope data */
	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 80012e0:	2382      	movs	r3, #130	; 0x82
 80012e2:	743b      	strb	r3, [r7, #16]
 80012e4:	2300      	movs	r3, #0
 80012e6:	747b      	strb	r3, [r7, #17]
 80012e8:	2300      	movs	r3, #0
 80012ea:	74bb      	strb	r3, [r7, #18]
 80012ec:	2300      	movs	r3, #0
 80012ee:	74fb      	strb	r3, [r7, #19]
 80012f0:	2300      	movs	r3, #0
 80012f2:	753b      	strb	r3, [r7, #20]
 80012f4:	2300      	movs	r3, #0
 80012f6:	757b      	strb	r3, [r7, #21]
 80012f8:	2300      	movs	r3, #0
 80012fa:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6898      	ldr	r0, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	89db      	ldrh	r3, [r3, #14]
 8001304:	2200      	movs	r2, #0
 8001306:	4619      	mov	r1, r3
 8001308:	f001 f8cc 	bl	80024a4 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	f107 0208 	add.w	r2, r7, #8
 8001314:	f107 0110 	add.w	r1, r7, #16
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2307      	movs	r3, #7
 8001320:	f003 f846 	bl	80043b0 <HAL_SPI_TransmitReceive>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf0c      	ite	eq
 800132a:	2301      	moveq	r3, #1
 800132c:	2300      	movne	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6898      	ldr	r0, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	89db      	ldrh	r3, [r3, #14]
 800133a:	2201      	movs	r2, #1
 800133c:	4619      	mov	r1, r3
 800133e:	f001 f8b1 	bl	80024a4 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 8001342:	7abb      	ldrb	r3, [r7, #10]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	b21a      	sxth	r2, r3
 8001348:	7a7b      	ldrb	r3, [r7, #9]
 800134a:	b21b      	sxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	83bb      	strh	r3, [r7, #28]
	int16_t gyrY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 8001350:	7b3b      	ldrb	r3, [r7, #12]
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	b21a      	sxth	r2, r3
 8001356:	7afb      	ldrb	r3, [r7, #11]
 8001358:	b21b      	sxth	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	837b      	strh	r3, [r7, #26]
	int16_t gyrZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 800135e:	7bbb      	ldrb	r3, [r7, #14]
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	b21a      	sxth	r2, r3
 8001364:	7b7b      	ldrb	r3, [r7, #13]
 8001366:	b21b      	sxth	r3, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	833b      	strh	r3, [r7, #24]

	/* Convert to deg/s */
	imu->gyr[0] = imu->gyrConversion * gyrX;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001372:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001376:	ee07 3a90 	vmov	s15, r3
 800137a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800137e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	imu->gyr[1] = imu->gyrConversion * gyrY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	ed93 7a05 	vldr	s14, [r3, #20]
 800138e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	imu->gyr[2] = imu->gyrConversion * gyrZ;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	ed93 7a05 	vldr	s14, [r3, #20]
 80013aa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	return status;
 80013c0:	7ffb      	ldrb	r3, [r7, #31]

}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3720      	adds	r7, #32
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <LED_SetIntensity>:
static void MX_SPI1_Init(void);
static void MX_SPI3_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);

void LED_SetIntensity(uint8_t red, uint8_t green, uint8_t blue) {
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	460b      	mov	r3, r1
 80013d8:	71bb      	strb	r3, [r7, #6]
 80013da:	4613      	mov	r3, r2
 80013dc:	717b      	strb	r3, [r7, #5]

	htim3.Instance->CCR1 = red;
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <LED_SetIntensity+0x38>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	79fa      	ldrb	r2, [r7, #7]
 80013e4:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = green;
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <LED_SetIntensity+0x38>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	79ba      	ldrb	r2, [r7, #6]
 80013ec:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR1 = blue;
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <LED_SetIntensity+0x3c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	797a      	ldrb	r2, [r7, #5]
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34

}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	200003ec 	.word	0x200003ec
 8001408:	2000037c 	.word	0x2000037c

0800140c <LED_Initialise>:

void LED_Initialise() {
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0

	/* Start RGB LED PWM timers */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001410:	2100      	movs	r1, #0
 8001412:	4809      	ldr	r0, [pc, #36]	; (8001438 <LED_Initialise+0x2c>)
 8001414:	f003 fba6 	bl	8004b64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001418:	2104      	movs	r1, #4
 800141a:	4807      	ldr	r0, [pc, #28]	; (8001438 <LED_Initialise+0x2c>)
 800141c:	f003 fba2 	bl	8004b64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001420:	2100      	movs	r1, #0
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <LED_Initialise+0x30>)
 8001424:	f003 fb9e 	bl	8004b64 <HAL_TIM_PWM_Start>

	LED_SetIntensity(0, 0, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff ffcd 	bl	80013cc <LED_SetIntensity>

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200003ec 	.word	0x200003ec
 800143c:	2000037c 	.word	0x2000037c

08001440 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == INT_ACC_Pin) {
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	2b04      	cmp	r3, #4
 800144e:	d103      	bne.n	8001458 <HAL_GPIO_EXTI_Callback+0x18>

		BMI088_ReadAccelerometer(&imu);
 8001450:	4806      	ldr	r0, [pc, #24]	; (800146c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001452:	f7ff fecf 	bl	80011f4 <BMI088_ReadAccelerometer>

		BMI088_ReadGyroscope(&imu);

	}

}
 8001456:	e005      	b.n	8001464 <HAL_GPIO_EXTI_Callback+0x24>
	} else if (GPIO_Pin == INT_GYR_Pin) {
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	2b08      	cmp	r3, #8
 800145c:	d102      	bne.n	8001464 <HAL_GPIO_EXTI_Callback+0x24>
		BMI088_ReadGyroscope(&imu);
 800145e:	4803      	ldr	r0, [pc, #12]	; (800146c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001460:	f7ff ff3a 	bl	80012d8 <BMI088_ReadGyroscope>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200003bc 	.word	0x200003bc

08001470 <main>:

int main(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af02      	add	r7, sp, #8

  HAL_Init();
 8001476:	f000 fcb3 	bl	8001de0 <HAL_Init>

  SystemClock_Config();
 800147a:	f000 f845 	bl	8001508 <SystemClock_Config>

  MX_GPIO_Init();
 800147e:	f000 fa11 	bl	80018a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001482:	f000 f8ab 	bl	80015dc <MX_SPI1_Init>
  MX_SPI3_Init();
 8001486:	f000 f8df 	bl	8001648 <MX_SPI3_Init>
  MX_TIM3_Init();
 800148a:	f000 f913 	bl	80016b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800148e:	f000 f993 	bl	80017b8 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8001492:	f006 ffe1 	bl	8008458 <MX_USB_DEVICE_Init>

  LED_Initialise();
 8001496:	f7ff ffb9 	bl	800140c <LED_Initialise>


  LED_SetIntensity(100, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2064      	movs	r0, #100	; 0x64
 80014a0:	f7ff ff94 	bl	80013cc <LED_SetIntensity>
  HAL_Delay(1000);
 80014a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a8:	f000 fd0c 	bl	8001ec4 <HAL_Delay>

  LED_SetIntensity(0, 100, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2164      	movs	r1, #100	; 0x64
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff ff8b 	bl	80013cc <LED_SetIntensity>
  HAL_Delay(1000);
 80014b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ba:	f000 fd03 	bl	8001ec4 <HAL_Delay>

  LED_SetIntensity(0, 0, 100);
 80014be:	2264      	movs	r2, #100	; 0x64
 80014c0:	2100      	movs	r1, #0
 80014c2:	2000      	movs	r0, #0
 80014c4:	f7ff ff82 	bl	80013cc <LED_SetIntensity>
  HAL_Delay(1000);
 80014c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014cc:	f000 fcfa 	bl	8001ec4 <HAL_Delay>

  BMI088_Init(&imu, &hspi1, GPIOA, SPI1_NCS_ACC_Pin, GPIOC, SPI1_NCS_GYR_Pin);
 80014d0:	2310      	movs	r3, #16
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <main+0x84>)
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2310      	movs	r3, #16
 80014da:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <main+0x88>)
 80014dc:	4907      	ldr	r1, [pc, #28]	; (80014fc <main+0x8c>)
 80014de:	4808      	ldr	r0, [pc, #32]	; (8001500 <main+0x90>)
 80014e0:	f7ff fd7c 	bl	8000fdc <BMI088_Init>
	 // BMI088_ReadAccelerometer(&imu);

	  //printf("%f\t%f\t%f\r\n", imu.acc[0], imu.acc[1], imu.acc[2]);


	  CDC_Transmit_FS((uint8_t *) "Hello\r\n", 7);
 80014e4:	2107      	movs	r1, #7
 80014e6:	4807      	ldr	r0, [pc, #28]	; (8001504 <main+0x94>)
 80014e8:	f007 f874 	bl	80085d4 <CDC_Transmit_FS>

	  HAL_Delay(50);
 80014ec:	2032      	movs	r0, #50	; 0x32
 80014ee:	f000 fce9 	bl	8001ec4 <HAL_Delay>
	  CDC_Transmit_FS((uint8_t *) "Hello\r\n", 7);
 80014f2:	e7f7      	b.n	80014e4 <main+0x74>
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	20000484 	.word	0x20000484
 8001500:	200003bc 	.word	0x200003bc
 8001504:	0800a9c8 	.word	0x0800a9c8

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b094      	sub	sp, #80	; 0x50
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	2230      	movs	r2, #48	; 0x30
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f007 fcd8 	bl	8008ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <SystemClock_Config+0xcc>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a27      	ldr	r2, [pc, #156]	; (80015d4 <SystemClock_Config+0xcc>)
 8001536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153a:	6413      	str	r3, [r2, #64]	; 0x40
 800153c:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <SystemClock_Config+0xcc>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <SystemClock_Config+0xd0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <SystemClock_Config+0xd0>)
 8001552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <SystemClock_Config+0xd0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001564:	2301      	movs	r3, #1
 8001566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156e:	2302      	movs	r3, #2
 8001570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001578:	2308      	movs	r3, #8
 800157a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800157c:	23a8      	movs	r3, #168	; 0xa8
 800157e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001580:	2302      	movs	r3, #2
 8001582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001584:	2307      	movs	r3, #7
 8001586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001588:	f107 0320 	add.w	r3, r7, #32
 800158c:	4618      	mov	r0, r3
 800158e:	f002 f93f 	bl	8003810 <HAL_RCC_OscConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001598:	f000 fa18 	bl	80019cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159c:	230f      	movs	r3, #15
 800159e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a0:	2302      	movs	r3, #2
 80015a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	2105      	movs	r1, #5
 80015ba:	4618      	mov	r0, r3
 80015bc:	f002 fb98 	bl	8003cf0 <HAL_RCC_ClockConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015c6:	f000 fa01 	bl	80019cc <Error_Handler>
  }
}
 80015ca:	bf00      	nop
 80015cc:	3750      	adds	r7, #80	; 0x50
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40007000 	.word	0x40007000

080015dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <MX_SPI1_Init+0x64>)
 80015e2:	4a18      	ldr	r2, [pc, #96]	; (8001644 <MX_SPI1_Init+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <MX_SPI1_Init+0x64>)
 80015e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_SPI1_Init+0x64>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_SPI1_Init+0x64>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_SPI1_Init+0x64>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_SPI1_Init+0x64>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_SPI1_Init+0x64>)
 8001608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_SPI1_Init+0x64>)
 8001610:	2218      	movs	r2, #24
 8001612:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <MX_SPI1_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_SPI1_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <MX_SPI1_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_SPI1_Init+0x64>)
 8001628:	220a      	movs	r2, #10
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <MX_SPI1_Init+0x64>)
 800162e:	f002 fd27 	bl	8004080 <HAL_SPI_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001638:	f000 f9c8 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000484 	.word	0x20000484
 8001644:	40013000 	.word	0x40013000

08001648 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_SPI3_Init+0x64>)
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <MX_SPI3_Init+0x68>)
 8001650:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <MX_SPI3_Init+0x64>)
 8001654:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001658:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_SPI3_Init+0x64>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <MX_SPI3_Init+0x64>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_SPI3_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_SPI3_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_SPI3_Init+0x64>)
 8001674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001678:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_SPI3_Init+0x64>)
 800167c:	2210      	movs	r2, #16
 800167e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <MX_SPI3_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_SPI3_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <MX_SPI3_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_SPI3_Init+0x64>)
 8001694:	220a      	movs	r2, #10
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <MX_SPI3_Init+0x64>)
 800169a:	f002 fcf1 	bl	8004080 <HAL_SPI_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80016a4:	f000 f992 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000042c 	.word	0x2000042c
 80016b0:	40003c00 	.word	0x40003c00

080016b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08e      	sub	sp, #56	; 0x38
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c8:	f107 0320 	add.w	r3, r7, #32
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	615a      	str	r2, [r3, #20]
 80016e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016e4:	4b32      	ldr	r3, [pc, #200]	; (80017b0 <MX_TIM3_Init+0xfc>)
 80016e6:	4a33      	ldr	r2, [pc, #204]	; (80017b4 <MX_TIM3_Init+0x100>)
 80016e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80016ea:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <MX_TIM3_Init+0xfc>)
 80016ec:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80016f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f2:	4b2f      	ldr	r3, [pc, #188]	; (80017b0 <MX_TIM3_Init+0xfc>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80016f8:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <MX_TIM3_Init+0xfc>)
 80016fa:	2263      	movs	r2, #99	; 0x63
 80016fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fe:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <MX_TIM3_Init+0xfc>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001704:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <MX_TIM3_Init+0xfc>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800170a:	4829      	ldr	r0, [pc, #164]	; (80017b0 <MX_TIM3_Init+0xfc>)
 800170c:	f003 f9ca 	bl	8004aa4 <HAL_TIM_Base_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001716:	f000 f959 	bl	80019cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001720:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001724:	4619      	mov	r1, r3
 8001726:	4822      	ldr	r0, [pc, #136]	; (80017b0 <MX_TIM3_Init+0xfc>)
 8001728:	f003 fb20 	bl	8004d6c <HAL_TIM_ConfigClockSource>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001732:	f000 f94b 	bl	80019cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001736:	481e      	ldr	r0, [pc, #120]	; (80017b0 <MX_TIM3_Init+0xfc>)
 8001738:	f003 f9df 	bl	8004afa <HAL_TIM_PWM_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001742:	f000 f943 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800174e:	f107 0320 	add.w	r3, r7, #32
 8001752:	4619      	mov	r1, r3
 8001754:	4816      	ldr	r0, [pc, #88]	; (80017b0 <MX_TIM3_Init+0xfc>)
 8001756:	f003 fed1 	bl	80054fc <HAL_TIMEx_MasterConfigSynchronization>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001760:	f000 f934 	bl	80019cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001764:	2360      	movs	r3, #96	; 0x60
 8001766:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	2200      	movs	r2, #0
 8001778:	4619      	mov	r1, r3
 800177a:	480d      	ldr	r0, [pc, #52]	; (80017b0 <MX_TIM3_Init+0xfc>)
 800177c:	f003 fa30 	bl	8004be0 <HAL_TIM_PWM_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001786:	f000 f921 	bl	80019cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2204      	movs	r2, #4
 800178e:	4619      	mov	r1, r3
 8001790:	4807      	ldr	r0, [pc, #28]	; (80017b0 <MX_TIM3_Init+0xfc>)
 8001792:	f003 fa25 	bl	8004be0 <HAL_TIM_PWM_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800179c:	f000 f916 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017a0:	4803      	ldr	r0, [pc, #12]	; (80017b0 <MX_TIM3_Init+0xfc>)
 80017a2:	f000 fa01 	bl	8001ba8 <HAL_TIM_MspPostInit>

}
 80017a6:	bf00      	nop
 80017a8:	3738      	adds	r7, #56	; 0x38
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200003ec 	.word	0x200003ec
 80017b4:	40000400 	.word	0x40000400

080017b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08e      	sub	sp, #56	; 0x38
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	f107 0320 	add.w	r3, r7, #32
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
 80017e4:	615a      	str	r2, [r3, #20]
 80017e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017e8:	4b2c      	ldr	r3, [pc, #176]	; (800189c <MX_TIM4_Init+0xe4>)
 80017ea:	4a2d      	ldr	r2, [pc, #180]	; (80018a0 <MX_TIM4_Init+0xe8>)
 80017ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 80017ee:	4b2b      	ldr	r3, [pc, #172]	; (800189c <MX_TIM4_Init+0xe4>)
 80017f0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80017f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <MX_TIM4_Init+0xe4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <MX_TIM4_Init+0xe4>)
 80017fe:	2263      	movs	r2, #99	; 0x63
 8001800:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <MX_TIM4_Init+0xe4>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001808:	4b24      	ldr	r3, [pc, #144]	; (800189c <MX_TIM4_Init+0xe4>)
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800180e:	4823      	ldr	r0, [pc, #140]	; (800189c <MX_TIM4_Init+0xe4>)
 8001810:	f003 f948 	bl	8004aa4 <HAL_TIM_Base_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800181a:	f000 f8d7 	bl	80019cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001824:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001828:	4619      	mov	r1, r3
 800182a:	481c      	ldr	r0, [pc, #112]	; (800189c <MX_TIM4_Init+0xe4>)
 800182c:	f003 fa9e 	bl	8004d6c <HAL_TIM_ConfigClockSource>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001836:	f000 f8c9 	bl	80019cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800183a:	4818      	ldr	r0, [pc, #96]	; (800189c <MX_TIM4_Init+0xe4>)
 800183c:	f003 f95d 	bl	8004afa <HAL_TIM_PWM_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001846:	f000 f8c1 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001852:	f107 0320 	add.w	r3, r7, #32
 8001856:	4619      	mov	r1, r3
 8001858:	4810      	ldr	r0, [pc, #64]	; (800189c <MX_TIM4_Init+0xe4>)
 800185a:	f003 fe4f 	bl	80054fc <HAL_TIMEx_MasterConfigSynchronization>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001864:	f000 f8b2 	bl	80019cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001868:	2360      	movs	r3, #96	; 0x60
 800186a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2200      	movs	r2, #0
 800187c:	4619      	mov	r1, r3
 800187e:	4807      	ldr	r0, [pc, #28]	; (800189c <MX_TIM4_Init+0xe4>)
 8001880:	f003 f9ae 	bl	8004be0 <HAL_TIM_PWM_ConfigChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800188a:	f000 f89f 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800188e:	4803      	ldr	r0, [pc, #12]	; (800189c <MX_TIM4_Init+0xe4>)
 8001890:	f000 f98a 	bl	8001ba8 <HAL_TIM_MspPostInit>

}
 8001894:	bf00      	nop
 8001896:	3738      	adds	r7, #56	; 0x38
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2000037c 	.word	0x2000037c
 80018a0:	40000800 	.word	0x40000800

080018a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
 80018b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b3f      	ldr	r3, [pc, #252]	; (80019bc <MX_GPIO_Init+0x118>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a3e      	ldr	r2, [pc, #248]	; (80019bc <MX_GPIO_Init+0x118>)
 80018c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b3c      	ldr	r3, [pc, #240]	; (80019bc <MX_GPIO_Init+0x118>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b38      	ldr	r3, [pc, #224]	; (80019bc <MX_GPIO_Init+0x118>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a37      	ldr	r2, [pc, #220]	; (80019bc <MX_GPIO_Init+0x118>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b35      	ldr	r3, [pc, #212]	; (80019bc <MX_GPIO_Init+0x118>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	4b31      	ldr	r3, [pc, #196]	; (80019bc <MX_GPIO_Init+0x118>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a30      	ldr	r2, [pc, #192]	; (80019bc <MX_GPIO_Init+0x118>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b2e      	ldr	r3, [pc, #184]	; (80019bc <MX_GPIO_Init+0x118>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <MX_GPIO_Init+0x118>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a29      	ldr	r2, [pc, #164]	; (80019bc <MX_GPIO_Init+0x118>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <MX_GPIO_Init+0x118>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NCS_ACC_Pin|SPI3_NCS_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	f248 0110 	movw	r1, #32784	; 0x8010
 8001930:	4823      	ldr	r0, [pc, #140]	; (80019c0 <MX_GPIO_Init+0x11c>)
 8001932:	f000 fdb7 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_NCS_GYR_Pin|FLASH_NHOLD_Pin|FLASH_NWP_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	21d0      	movs	r1, #208	; 0xd0
 800193a:	4822      	ldr	r0, [pc, #136]	; (80019c4 <MX_GPIO_Init+0x120>)
 800193c:	f000 fdb2 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 8001940:	230c      	movs	r3, #12
 8001942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <MX_GPIO_Init+0x124>)
 8001946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	481c      	ldr	r0, [pc, #112]	; (80019c4 <MX_GPIO_Init+0x120>)
 8001954:	f000 fc0c 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_NCS_ACC_Pin SPI3_NCS_Pin */
  GPIO_InitStruct.Pin = SPI1_NCS_ACC_Pin|SPI3_NCS_Pin;
 8001958:	f248 0310 	movw	r3, #32784	; 0x8010
 800195c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	4813      	ldr	r0, [pc, #76]	; (80019c0 <MX_GPIO_Init+0x11c>)
 8001972:	f000 fbfd 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_NCS_GYR_Pin FLASH_NHOLD_Pin FLASH_NWP_Pin */
  GPIO_InitStruct.Pin = SPI1_NCS_GYR_Pin|FLASH_NHOLD_Pin|FLASH_NWP_Pin;
 8001976:	23d0      	movs	r3, #208	; 0xd0
 8001978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	480d      	ldr	r0, [pc, #52]	; (80019c4 <MX_GPIO_Init+0x120>)
 800198e:	f000 fbef 	bl	8002170 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2008      	movs	r0, #8
 8001998:	f000 fb91 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800199c:	2008      	movs	r0, #8
 800199e:	f000 fbaa 	bl	80020f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	2009      	movs	r0, #9
 80019a8:	f000 fb89 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80019ac:	2009      	movs	r0, #9
 80019ae:	f000 fba2 	bl	80020f6 <HAL_NVIC_EnableIRQ>

}
 80019b2:	bf00      	nop
 80019b4:	3728      	adds	r7, #40	; 0x28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020000 	.word	0x40020000
 80019c4:	40020800 	.word	0x40020800
 80019c8:	10110000 	.word	0x10110000

080019cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_MspInit+0x4c>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <HAL_MspInit+0x4c>)
 80019ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f0:	6453      	str	r3, [r2, #68]	; 0x44
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_MspInit+0x4c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_MspInit+0x4c>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_MspInit+0x4c>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_MspInit+0x4c>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08c      	sub	sp, #48	; 0x30
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a36      	ldr	r2, [pc, #216]	; (8001b24 <HAL_SPI_MspInit+0xf8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d134      	bne.n	8001ab8 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <HAL_SPI_MspInit+0xfc>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a34      	ldr	r2, [pc, #208]	; (8001b28 <HAL_SPI_MspInit+0xfc>)
 8001a58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b32      	ldr	r3, [pc, #200]	; (8001b28 <HAL_SPI_MspInit+0xfc>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <HAL_SPI_MspInit+0xfc>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a2d      	ldr	r2, [pc, #180]	; (8001b28 <HAL_SPI_MspInit+0xfc>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <HAL_SPI_MspInit+0xfc>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a86:	23e0      	movs	r3, #224	; 0xe0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a96:	2305      	movs	r3, #5
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4822      	ldr	r0, [pc, #136]	; (8001b2c <HAL_SPI_MspInit+0x100>)
 8001aa2:	f000 fb65 	bl	8002170 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2023      	movs	r0, #35	; 0x23
 8001aac:	f000 fb07 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001ab0:	2023      	movs	r0, #35	; 0x23
 8001ab2:	f000 fb20 	bl	80020f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ab6:	e031      	b.n	8001b1c <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI3)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a1c      	ldr	r2, [pc, #112]	; (8001b30 <HAL_SPI_MspInit+0x104>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d12c      	bne.n	8001b1c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_SPI_MspInit+0xfc>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <HAL_SPI_MspInit+0xfc>)
 8001acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <HAL_SPI_MspInit+0xfc>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <HAL_SPI_MspInit+0xfc>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a10      	ldr	r2, [pc, #64]	; (8001b28 <HAL_SPI_MspInit+0xfc>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <HAL_SPI_MspInit+0xfc>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001afa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b0c:	2306      	movs	r3, #6
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4619      	mov	r1, r3
 8001b16:	4807      	ldr	r0, [pc, #28]	; (8001b34 <HAL_SPI_MspInit+0x108>)
 8001b18:	f000 fb2a 	bl	8002170 <HAL_GPIO_Init>
}
 8001b1c:	bf00      	nop
 8001b1e:	3730      	adds	r7, #48	; 0x30
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40013000 	.word	0x40013000
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40003c00 	.word	0x40003c00
 8001b34:	40020800 	.word	0x40020800

08001b38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a15      	ldr	r2, [pc, #84]	; (8001b9c <HAL_TIM_Base_MspInit+0x64>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d10e      	bne.n	8001b68 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <HAL_TIM_Base_MspInit+0x68>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	4a13      	ldr	r2, [pc, #76]	; (8001ba0 <HAL_TIM_Base_MspInit+0x68>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_TIM_Base_MspInit+0x68>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b66:	e012      	b.n	8001b8e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ba4 <HAL_TIM_Base_MspInit+0x6c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d10d      	bne.n	8001b8e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_TIM_Base_MspInit+0x68>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <HAL_TIM_Base_MspInit+0x68>)
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	6413      	str	r3, [r2, #64]	; 0x40
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <HAL_TIM_Base_MspInit+0x68>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
}
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40000400 	.word	0x40000400
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40000800 	.word	0x40000800

08001ba8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a24      	ldr	r2, [pc, #144]	; (8001c58 <HAL_TIM_MspPostInit+0xb0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d11e      	bne.n	8001c08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <HAL_TIM_MspPostInit+0xb4>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a22      	ldr	r2, [pc, #136]	; (8001c5c <HAL_TIM_MspPostInit+0xb4>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_TIM_MspPostInit+0xb4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 8001be6:	2330      	movs	r3, #48	; 0x30
 8001be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4817      	ldr	r0, [pc, #92]	; (8001c60 <HAL_TIM_MspPostInit+0xb8>)
 8001c02:	f000 fab5 	bl	8002170 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c06:	e022      	b.n	8001c4e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a15      	ldr	r2, [pc, #84]	; (8001c64 <HAL_TIM_MspPostInit+0xbc>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d11d      	bne.n	8001c4e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_TIM_MspPostInit+0xb4>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a10      	ldr	r2, [pc, #64]	; (8001c5c <HAL_TIM_MspPostInit+0xb4>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <HAL_TIM_MspPostInit+0xb4>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001c2e:	2340      	movs	r3, #64	; 0x40
 8001c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <HAL_TIM_MspPostInit+0xb8>)
 8001c4a:	f000 fa91 	bl	8002170 <HAL_GPIO_Init>
}
 8001c4e:	bf00      	nop
 8001c50:	3728      	adds	r7, #40	; 0x28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40000400 	.word	0x40000400
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020400 	.word	0x40020400
 8001c64:	40000800 	.word	0x40000800

08001c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <MemManage_Handler+0x4>

08001c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbc:	f000 f8e2 	bl	8001e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001cc8:	2004      	movs	r0, #4
 8001cca:	f000 fc05 	bl	80024d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001cd6:	2008      	movs	r0, #8
 8001cd8:	f000 fbfe 	bl	80024d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <SPI1_IRQHandler+0x10>)
 8001ce6:	f002 fd05 	bl	80046f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000484 	.word	0x20000484

08001cf4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <OTG_FS_IRQHandler+0x10>)
 8001cfa:	f000 fd55 	bl	80027a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200019b0 	.word	0x200019b0

08001d08 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <_sbrk+0x50>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d102      	bne.n	8001d1e <_sbrk+0x16>
		heap_end = &end;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <_sbrk+0x50>)
 8001d1a:	4a10      	ldr	r2, [pc, #64]	; (8001d5c <_sbrk+0x54>)
 8001d1c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <_sbrk+0x50>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <_sbrk+0x50>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	466a      	mov	r2, sp
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d907      	bls.n	8001d42 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d32:	f007 f891 	bl	8008e58 <__errno>
 8001d36:	4602      	mov	r2, r0
 8001d38:	230c      	movs	r3, #12
 8001d3a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d40:	e006      	b.n	8001d50 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <_sbrk+0x50>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	4a03      	ldr	r2, [pc, #12]	; (8001d58 <_sbrk+0x50>)
 8001d4c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	2000036c 	.word	0x2000036c
 8001d5c:	20001dc0 	.word	0x20001dc0

08001d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <SystemInit+0x28>)
 8001d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6a:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <SystemInit+0x28>)
 8001d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <SystemInit+0x28>)
 8001d76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d7a:	609a      	str	r2, [r3, #8]
#endif
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d92:	e003      	b.n	8001d9c <LoopCopyDataInit>

08001d94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d9a:	3104      	adds	r1, #4

08001d9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d9c:	480b      	ldr	r0, [pc, #44]	; (8001dcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001da0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001da2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001da4:	d3f6      	bcc.n	8001d94 <CopyDataInit>
  ldr  r2, =_sbss
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001da8:	e002      	b.n	8001db0 <LoopFillZerobss>

08001daa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001daa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dac:	f842 3b04 	str.w	r3, [r2], #4

08001db0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001db2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001db4:	d3f9      	bcc.n	8001daa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001db6:	f7ff ffd3 	bl	8001d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dba:	f007 f853 	bl	8008e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dbe:	f7ff fb57 	bl	8001470 <main>
  bx  lr    
 8001dc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dc4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001dc8:	0800ac60 	.word	0x0800ac60
  ldr  r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dd0:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 8001dd4:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 8001dd8:	20001dbc 	.word	0x20001dbc

08001ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <ADC_IRQHandler>
	...

08001de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de4:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <HAL_Init+0x40>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <HAL_Init+0x40>)
 8001dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <HAL_Init+0x40>)
 8001df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <HAL_Init+0x40>)
 8001e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e08:	2003      	movs	r0, #3
 8001e0a:	f000 f94d 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f000 f808 	bl	8001e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e14:	f7ff fde2 	bl	80019dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023c00 	.word	0x40023c00

08001e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_InitTick+0x54>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_InitTick+0x58>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4619      	mov	r1, r3
 8001e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f965 	bl	8002112 <HAL_SYSTICK_Config>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00e      	b.n	8001e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b0f      	cmp	r3, #15
 8001e56:	d80a      	bhi.n	8001e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f000 f92d 	bl	80020be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e64:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <HAL_InitTick+0x5c>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e000      	b.n	8001e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000008 	.word	0x20000008
 8001e80:	20000004 	.word	0x20000004

08001e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_IncTick+0x20>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_IncTick+0x24>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <HAL_IncTick+0x24>)
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000008 	.word	0x20000008
 8001ea8:	200004dc 	.word	0x200004dc

08001eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <HAL_GetTick+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	200004dc 	.word	0x200004dc

08001ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ecc:	f7ff ffee 	bl	8001eac <HAL_GetTick>
 8001ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001edc:	d005      	beq.n	8001eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_Delay+0x40>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eea:	bf00      	nop
 8001eec:	f7ff ffde 	bl	8001eac <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d8f7      	bhi.n	8001eec <HAL_Delay+0x28>
  {
  }
}
 8001efc:	bf00      	nop
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000008 	.word	0x20000008

08001f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f24:	4013      	ands	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3a:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	60d3      	str	r3, [r2, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <__NVIC_GetPriorityGrouping+0x18>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f003 0307 	and.w	r3, r3, #7
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db0b      	blt.n	8001f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	f003 021f 	and.w	r2, r3, #31
 8001f84:	4907      	ldr	r1, [pc, #28]	; (8001fa4 <__NVIC_EnableIRQ+0x38>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000e100 	.word	0xe000e100

08001fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	; (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	; (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	; 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002074:	d301      	bcc.n	800207a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002076:	2301      	movs	r3, #1
 8002078:	e00f      	b.n	800209a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <SysTick_Config+0x40>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002082:	210f      	movs	r1, #15
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f7ff ff8e 	bl	8001fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <SysTick_Config+0x40>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <SysTick_Config+0x40>)
 8002094:	2207      	movs	r2, #7
 8002096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e000e010 	.word	0xe000e010

080020a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff29 	bl	8001f08 <__NVIC_SetPriorityGrouping>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d0:	f7ff ff3e 	bl	8001f50 <__NVIC_GetPriorityGrouping>
 80020d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f7ff ff8e 	bl	8001ffc <NVIC_EncodePriority>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff5d 	bl	8001fa8 <__NVIC_SetPriority>
}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff31 	bl	8001f6c <__NVIC_EnableIRQ>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ffa2 	bl	8002064 <SysTick_Config>
 8002120:	4603      	mov	r3, r0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d004      	beq.n	8002148 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2280      	movs	r2, #128	; 0x80
 8002142:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e00c      	b.n	8002162 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2205      	movs	r2, #5
 800214c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0201 	bic.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	; 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	e16b      	b.n	8002464 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800218c:	2201      	movs	r2, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	f040 815a 	bne.w	800245e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d00b      	beq.n	80021ca <HAL_GPIO_Init+0x5a>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d007      	beq.n	80021ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021be:	2b11      	cmp	r3, #17
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b12      	cmp	r3, #18
 80021c8:	d130      	bne.n	800222c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	2203      	movs	r2, #3
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002200:	2201      	movs	r2, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 0201 	and.w	r2, r3, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0xfc>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b12      	cmp	r3, #18
 800226a:	d123      	bne.n	80022b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	08da      	lsrs	r2, r3, #3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3208      	adds	r2, #8
 8002274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	220f      	movs	r2, #15
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	08da      	lsrs	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3208      	adds	r2, #8
 80022ae:	69b9      	ldr	r1, [r7, #24]
 80022b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0203 	and.w	r2, r3, #3
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80b4 	beq.w	800245e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b5f      	ldr	r3, [pc, #380]	; (8002478 <HAL_GPIO_Init+0x308>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	4a5e      	ldr	r2, [pc, #376]	; (8002478 <HAL_GPIO_Init+0x308>)
 8002300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002304:	6453      	str	r3, [r2, #68]	; 0x44
 8002306:	4b5c      	ldr	r3, [pc, #368]	; (8002478 <HAL_GPIO_Init+0x308>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002312:	4a5a      	ldr	r2, [pc, #360]	; (800247c <HAL_GPIO_Init+0x30c>)
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	3302      	adds	r3, #2
 800231a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	220f      	movs	r2, #15
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a51      	ldr	r2, [pc, #324]	; (8002480 <HAL_GPIO_Init+0x310>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d02b      	beq.n	8002396 <HAL_GPIO_Init+0x226>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a50      	ldr	r2, [pc, #320]	; (8002484 <HAL_GPIO_Init+0x314>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d025      	beq.n	8002392 <HAL_GPIO_Init+0x222>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4f      	ldr	r2, [pc, #316]	; (8002488 <HAL_GPIO_Init+0x318>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d01f      	beq.n	800238e <HAL_GPIO_Init+0x21e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4e      	ldr	r2, [pc, #312]	; (800248c <HAL_GPIO_Init+0x31c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d019      	beq.n	800238a <HAL_GPIO_Init+0x21a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4d      	ldr	r2, [pc, #308]	; (8002490 <HAL_GPIO_Init+0x320>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <HAL_GPIO_Init+0x216>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4c      	ldr	r2, [pc, #304]	; (8002494 <HAL_GPIO_Init+0x324>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d00d      	beq.n	8002382 <HAL_GPIO_Init+0x212>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4b      	ldr	r2, [pc, #300]	; (8002498 <HAL_GPIO_Init+0x328>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d007      	beq.n	800237e <HAL_GPIO_Init+0x20e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4a      	ldr	r2, [pc, #296]	; (800249c <HAL_GPIO_Init+0x32c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d101      	bne.n	800237a <HAL_GPIO_Init+0x20a>
 8002376:	2307      	movs	r3, #7
 8002378:	e00e      	b.n	8002398 <HAL_GPIO_Init+0x228>
 800237a:	2308      	movs	r3, #8
 800237c:	e00c      	b.n	8002398 <HAL_GPIO_Init+0x228>
 800237e:	2306      	movs	r3, #6
 8002380:	e00a      	b.n	8002398 <HAL_GPIO_Init+0x228>
 8002382:	2305      	movs	r3, #5
 8002384:	e008      	b.n	8002398 <HAL_GPIO_Init+0x228>
 8002386:	2304      	movs	r3, #4
 8002388:	e006      	b.n	8002398 <HAL_GPIO_Init+0x228>
 800238a:	2303      	movs	r3, #3
 800238c:	e004      	b.n	8002398 <HAL_GPIO_Init+0x228>
 800238e:	2302      	movs	r3, #2
 8002390:	e002      	b.n	8002398 <HAL_GPIO_Init+0x228>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_GPIO_Init+0x228>
 8002396:	2300      	movs	r3, #0
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	f002 0203 	and.w	r2, r2, #3
 800239e:	0092      	lsls	r2, r2, #2
 80023a0:	4093      	lsls	r3, r2
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023a8:	4934      	ldr	r1, [pc, #208]	; (800247c <HAL_GPIO_Init+0x30c>)
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	3302      	adds	r3, #2
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023b6:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <HAL_GPIO_Init+0x330>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023da:	4a31      	ldr	r2, [pc, #196]	; (80024a0 <HAL_GPIO_Init+0x330>)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023e0:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <HAL_GPIO_Init+0x330>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002404:	4a26      	ldr	r2, [pc, #152]	; (80024a0 <HAL_GPIO_Init+0x330>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800240a:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <HAL_GPIO_Init+0x330>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800242e:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <HAL_GPIO_Init+0x330>)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002434:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <HAL_GPIO_Init+0x330>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002458:	4a11      	ldr	r2, [pc, #68]	; (80024a0 <HAL_GPIO_Init+0x330>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3301      	adds	r3, #1
 8002462:	61fb      	str	r3, [r7, #28]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	2b0f      	cmp	r3, #15
 8002468:	f67f ae90 	bls.w	800218c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800246c:	bf00      	nop
 800246e:	3724      	adds	r7, #36	; 0x24
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40023800 	.word	0x40023800
 800247c:	40013800 	.word	0x40013800
 8002480:	40020000 	.word	0x40020000
 8002484:	40020400 	.word	0x40020400
 8002488:	40020800 	.word	0x40020800
 800248c:	40020c00 	.word	0x40020c00
 8002490:	40021000 	.word	0x40021000
 8002494:	40021400 	.word	0x40021400
 8002498:	40021800 	.word	0x40021800
 800249c:	40021c00 	.word	0x40021c00
 80024a0:	40013c00 	.word	0x40013c00

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024c0:	e003      	b.n	80024ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	619a      	str	r2, [r3, #24]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d006      	beq.n	80024fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ee:	4a05      	ldr	r2, [pc, #20]	; (8002504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe ffa2 	bl	8001440 <HAL_GPIO_EXTI_Callback>
  }
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40013c00 	.word	0x40013c00

08002508 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800250a:	b08f      	sub	sp, #60	; 0x3c
 800250c:	af0a      	add	r7, sp, #40	; 0x28
 800250e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e10f      	b.n	800273a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d106      	bne.n	800253a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f006 f993 	bl	8008860 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2203      	movs	r2, #3
 800253e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f003 f960 	bl	800581e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	687e      	ldr	r6, [r7, #4]
 8002566:	466d      	mov	r5, sp
 8002568:	f106 0410 	add.w	r4, r6, #16
 800256c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800256e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002574:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002578:	e885 0003 	stmia.w	r5, {r0, r1}
 800257c:	1d33      	adds	r3, r6, #4
 800257e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002580:	6838      	ldr	r0, [r7, #0]
 8002582:	f003 f837 	bl	80055f4 <USB_CoreInit>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0d0      	b.n	800273a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f003 f94e 	bl	8005840 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
 80025a8:	e04a      	b.n	8002640 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	333d      	adds	r3, #61	; 0x3d
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	1a9b      	subs	r3, r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	333c      	adds	r3, #60	; 0x3c
 80025ce:	7bfa      	ldrb	r2, [r7, #15]
 80025d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025d2:	7bfa      	ldrb	r2, [r7, #15]
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	b298      	uxth	r0, r3
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	3342      	adds	r3, #66	; 0x42
 80025e6:	4602      	mov	r2, r0
 80025e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	333f      	adds	r3, #63	; 0x3f
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025fe:	7bfa      	ldrb	r2, [r7, #15]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	3344      	adds	r3, #68	; 0x44
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002612:	7bfa      	ldrb	r2, [r7, #15]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	3348      	adds	r3, #72	; 0x48
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	3350      	adds	r3, #80	; 0x50
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	3301      	adds	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	d3af      	bcc.n	80025aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800264a:	2300      	movs	r3, #0
 800264c:	73fb      	strb	r3, [r7, #15]
 800264e:	e044      	b.n	80026da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002666:	7bfa      	ldrb	r2, [r7, #15]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800267c:	7bfa      	ldrb	r2, [r7, #15]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	1a9b      	subs	r3, r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026be:	7bfa      	ldrb	r2, [r7, #15]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	3301      	adds	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d3b5      	bcc.n	8002650 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	687e      	ldr	r6, [r7, #4]
 80026ec:	466d      	mov	r5, sp
 80026ee:	f106 0410 	add.w	r4, r6, #16
 80026f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002702:	1d33      	adds	r3, r6, #4
 8002704:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002706:	6838      	ldr	r0, [r7, #0]
 8002708:	f003 f8c4 	bl	8005894 <USB_DevInit>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2202      	movs	r2, #2
 8002716:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e00d      	b.n	800273a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f004 f90c 	bl	8006950 <USB_DevDisconnect>

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002742 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_PCD_Start+0x1c>
 800275a:	2302      	movs	r3, #2
 800275c:	e020      	b.n	80027a0 <HAL_PCD_Start+0x5e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	2b01      	cmp	r3, #1
 800276c:	d109      	bne.n	8002782 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002772:	2b01      	cmp	r3, #1
 8002774:	d005      	beq.n	8002782 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f003 f838 	bl	80057fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f004 f8bc 	bl	800690e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b08d      	sub	sp, #52	; 0x34
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f004 f97a 	bl	8006ab8 <USB_GetMode>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 839d 	bne.w	8002f06 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f004 f8de 	bl	8006992 <USB_ReadInterrupts>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8393 	beq.w	8002f04 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 f8d5 	bl	8006992 <USB_ReadInterrupts>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d107      	bne.n	8002802 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f002 0202 	and.w	r2, r2, #2
 8002800:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f004 f8c3 	bl	8006992 <USB_ReadInterrupts>
 800280c:	4603      	mov	r3, r0
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b10      	cmp	r3, #16
 8002814:	d161      	bne.n	80028da <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0210 	bic.w	r2, r2, #16
 8002824:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	f003 020f 	and.w	r2, r3, #15
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	3304      	adds	r3, #4
 8002844:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	0c5b      	lsrs	r3, r3, #17
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	2b02      	cmp	r3, #2
 8002850:	d124      	bne.n	800289c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d035      	beq.n	80028ca <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002868:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800286c:	b29b      	uxth	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	6a38      	ldr	r0, [r7, #32]
 8002872:	f003 ff29 	bl	80066c8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002882:	441a      	add	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	091b      	lsrs	r3, r3, #4
 8002890:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002894:	441a      	add	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	619a      	str	r2, [r3, #24]
 800289a:	e016      	b.n	80028ca <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	0c5b      	lsrs	r3, r3, #17
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	2b06      	cmp	r3, #6
 80028a6:	d110      	bne.n	80028ca <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028ae:	2208      	movs	r2, #8
 80028b0:	4619      	mov	r1, r3
 80028b2:	6a38      	ldr	r0, [r7, #32]
 80028b4:	f003 ff08 	bl	80066c8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028c4:	441a      	add	r2, r3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699a      	ldr	r2, [r3, #24]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0210 	orr.w	r2, r2, #16
 80028d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f004 f857 	bl	8006992 <USB_ReadInterrupts>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028ee:	d16e      	bne.n	80029ce <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f004 f85d 	bl	80069b8 <USB_ReadDevAllOutEpInterrupt>
 80028fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002900:	e062      	b.n	80029c8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d057      	beq.n	80029bc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	4611      	mov	r1, r2
 8002916:	4618      	mov	r0, r3
 8002918:	f004 f882 	bl	8006a20 <USB_ReadDevOutEPInterrupt>
 800291c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00c      	beq.n	8002942 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	015a      	lsls	r2, r3, #5
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	4413      	add	r3, r2
 8002930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002934:	461a      	mov	r2, r3
 8002936:	2301      	movs	r3, #1
 8002938:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800293a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fdb1 	bl	80034a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00c      	beq.n	8002966 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	4413      	add	r3, r2
 8002954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002958:	461a      	mov	r2, r3
 800295a:	2308      	movs	r3, #8
 800295c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800295e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 feab 	bl	80036bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	4413      	add	r3, r2
 8002978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297c:	461a      	mov	r2, r3
 800297e:	2310      	movs	r3, #16
 8002980:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	4413      	add	r3, r2
 8002994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002998:	461a      	mov	r2, r3
 800299a:	2320      	movs	r3, #32
 800299c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d009      	beq.n	80029bc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b4:	461a      	mov	r2, r3
 80029b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029ba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	3301      	adds	r3, #1
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c4:	085b      	lsrs	r3, r3, #1
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d199      	bne.n	8002902 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f003 ffdd 	bl	8006992 <USB_ReadInterrupts>
 80029d8:	4603      	mov	r3, r0
 80029da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029e2:	f040 80c0 	bne.w	8002b66 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f003 fffe 	bl	80069ec <USB_ReadDevAllInEpInterrupt>
 80029f0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80029f6:	e0b2      	b.n	8002b5e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80a7 	beq.w	8002b52 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f004 f824 	bl	8006a5c <USB_ReadDevInEPInterrupt>
 8002a14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d057      	beq.n	8002ad0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	2201      	movs	r2, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69f9      	ldr	r1, [r7, #28]
 8002a3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a40:	4013      	ands	r3, r2
 8002a42:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a50:	461a      	mov	r2, r3
 8002a52:	2301      	movs	r3, #1
 8002a54:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d132      	bne.n	8002ac4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3348      	adds	r3, #72	; 0x48
 8002a6e:	6819      	ldr	r1, [r3, #0]
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4403      	add	r3, r0
 8002a7e:	3344      	adds	r3, #68	; 0x44
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4419      	add	r1, r3
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4403      	add	r3, r0
 8002a92:	3348      	adds	r3, #72	; 0x48
 8002a94:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d113      	bne.n	8002ac4 <HAL_PCD_IRQHandler+0x31c>
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3350      	adds	r3, #80	; 0x50
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d108      	bne.n	8002ac4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002abc:	461a      	mov	r2, r3
 8002abe:	2101      	movs	r1, #1
 8002ac0:	f004 f82c 	bl	8006b1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	4619      	mov	r1, r3
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f005 ff49 	bl	8008962 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	2308      	movs	r3, #8
 8002aea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b02:	461a      	mov	r2, r3
 8002b04:	2310      	movs	r3, #16
 8002b06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d008      	beq.n	8002b24 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2340      	movs	r3, #64	; 0x40
 8002b22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d008      	beq.n	8002b40 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fc1b 	bl	8003388 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	3301      	adds	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f47f af49 	bne.w	80029f8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f003 ff11 	bl	8006992 <USB_ReadInterrupts>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b7a:	d122      	bne.n	8002bc2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d108      	bne.n	8002bac <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fe27 	bl	80037f8 <HAL_PCDEx_LPM_Callback>
 8002baa:	e002      	b.n	8002bb2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f005 ff4f 	bl	8008a50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f003 fee3 	bl	8006992 <USB_ReadInterrupts>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd6:	d112      	bne.n	8002bfe <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d102      	bne.n	8002bee <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f005 ff0b 	bl	8008a04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002bfc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f003 fec5 	bl	8006992 <USB_ReadInterrupts>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c12:	f040 80c7 	bne.w	8002da4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2110      	movs	r1, #16
 8002c30:	4618      	mov	r0, r3
 8002c32:	f002 ff93 	bl	8005b5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3a:	e056      	b.n	8002cea <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c4e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c60:	0151      	lsls	r1, r2, #5
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	440a      	add	r2, r1
 8002c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c6e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c80:	0151      	lsls	r1, r2, #5
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	440a      	add	r2, r1
 8002c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c8e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ca2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb4:	0151      	lsls	r1, r2, #5
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	440a      	add	r2, r1
 8002cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cc2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd4:	0151      	lsls	r1, r2, #5
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	440a      	add	r2, r1
 8002cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ce2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d3a3      	bcc.n	8002c3c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d02:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d06:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d016      	beq.n	8002d3e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d1a:	69fa      	ldr	r2, [r7, #28]
 8002d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d20:	f043 030b 	orr.w	r3, r3, #11
 8002d24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d36:	f043 030b 	orr.w	r3, r3, #11
 8002d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3c:	e015      	b.n	8002d6a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d50:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d54:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d64:	f043 030b 	orr.w	r3, r3, #11
 8002d68:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d78:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d7c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f003 fec4 	bl	8006b1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f003 fdf2 	bl	8006992 <USB_ReadInterrupts>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db8:	d124      	bne.n	8002e04 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f003 fe88 	bl	8006ad4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f002 ff28 	bl	8005c1e <USB_GetDevSpeed>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681c      	ldr	r4, [r3, #0]
 8002dda:	f001 f945 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 8002dde:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	4620      	mov	r0, r4
 8002dea:	f002 fc65 	bl	80056b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f005 fddf 	bl	80089b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e02:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f003 fdc2 	bl	8006992 <USB_ReadInterrupts>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d10a      	bne.n	8002e2e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f005 fdbc 	bl	8008996 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f002 0208 	and.w	r2, r2, #8
 8002e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f003 fdad 	bl	8006992 <USB_ReadInterrupts>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e42:	d10f      	bne.n	8002e64 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f005 fe1e 	bl	8008a90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f003 fd92 	bl	8006992 <USB_ReadInterrupts>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e78:	d10f      	bne.n	8002e9a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	4619      	mov	r1, r3
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f005 fdf1 	bl	8008a6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f003 fd77 	bl	8006992 <USB_ReadInterrupts>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eae:	d10a      	bne.n	8002ec6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f005 fdff 	bl	8008ab4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695a      	ldr	r2, [r3, #20]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f003 fd61 	bl	8006992 <USB_ReadInterrupts>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d115      	bne.n	8002f06 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f005 fdef 	bl	8008ad0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	e000      	b.n	8002f06 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002f04:	bf00      	nop
    }
  }
}
 8002f06:	3734      	adds	r7, #52	; 0x34
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd90      	pop	{r4, r7, pc}

08002f0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_PCD_SetAddress+0x1a>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e013      	b.n	8002f4e <HAL_PCD_SetAddress+0x42>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f003 fcbf 	bl	80068c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	4608      	mov	r0, r1
 8002f60:	4611      	mov	r1, r2
 8002f62:	461a      	mov	r2, r3
 8002f64:	4603      	mov	r3, r0
 8002f66:	70fb      	strb	r3, [r7, #3]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	803b      	strh	r3, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	da0f      	bge.n	8002f9c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	f003 020f 	and.w	r2, r3, #15
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	3338      	adds	r3, #56	; 0x38
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	3304      	adds	r3, #4
 8002f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	705a      	strb	r2, [r3, #1]
 8002f9a:	e00f      	b.n	8002fbc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	f003 020f 	and.w	r2, r3, #15
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fc8:	883a      	ldrh	r2, [r7, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	78ba      	ldrb	r2, [r7, #2]
 8002fd2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	785b      	ldrb	r3, [r3, #1]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fe6:	78bb      	ldrb	r3, [r7, #2]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d102      	bne.n	8002ff2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_PCD_EP_Open+0xaa>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e00e      	b.n	800301e <HAL_PCD_EP_Open+0xc8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68f9      	ldr	r1, [r7, #12]
 800300e:	4618      	mov	r0, r3
 8003010:	f002 fe2a 	bl	8005c68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800301c:	7afb      	ldrb	r3, [r7, #11]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003036:	2b00      	cmp	r3, #0
 8003038:	da0f      	bge.n	800305a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	f003 020f 	and.w	r2, r3, #15
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	3338      	adds	r3, #56	; 0x38
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	3304      	adds	r3, #4
 8003050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	705a      	strb	r2, [r3, #1]
 8003058:	e00f      	b.n	800307a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	f003 020f 	and.w	r2, r3, #15
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	4413      	add	r3, r2
 8003070:	3304      	adds	r3, #4
 8003072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	b2da      	uxtb	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_PCD_EP_Close+0x6e>
 8003090:	2302      	movs	r3, #2
 8003092:	e00e      	b.n	80030b2 <HAL_PCD_EP_Close+0x8c>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68f9      	ldr	r1, [r7, #12]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f002 fe68 	bl	8005d78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b086      	sub	sp, #24
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	460b      	mov	r3, r1
 80030c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	f003 020f 	and.w	r2, r3, #15
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	3304      	adds	r3, #4
 80030e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2200      	movs	r2, #0
 80030f4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2200      	movs	r2, #0
 80030fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030fc:	7afb      	ldrb	r3, [r7, #11]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	b2da      	uxtb	r2, r3
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d102      	bne.n	8003116 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003116:	7afb      	ldrb	r3, [r7, #11]
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	6979      	ldr	r1, [r7, #20]
 800312e:	f003 f943 	bl	80063b8 <USB_EP0StartXfer>
 8003132:	e008      	b.n	8003146 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	6979      	ldr	r1, [r7, #20]
 8003142:	f002 fef5 	bl	8005f30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	f003 020f 	and.w	r2, r3, #15
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003172:	681b      	ldr	r3, [r3, #0]
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	460b      	mov	r3, r1
 800318e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003190:	7afb      	ldrb	r3, [r7, #11]
 8003192:	f003 020f 	and.w	r2, r3, #15
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	3338      	adds	r3, #56	; 0x38
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	3304      	adds	r3, #4
 80031a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2200      	movs	r2, #0
 80031b8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2201      	movs	r2, #1
 80031be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c0:	7afb      	ldrb	r3, [r7, #11]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d102      	bne.n	80031da <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031da:	7afb      	ldrb	r3, [r7, #11]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d109      	bne.n	80031f8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	6979      	ldr	r1, [r7, #20]
 80031f2:	f003 f8e1 	bl	80063b8 <USB_EP0StartXfer>
 80031f6:	e008      	b.n	800320a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	6979      	ldr	r1, [r7, #20]
 8003206:	f002 fe93 	bl	8005f30 <USB_EPStartXfer>
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	f003 020f 	and.w	r2, r3, #15
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	429a      	cmp	r2, r3
 800322c:	d901      	bls.n	8003232 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e050      	b.n	80032d4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003236:	2b00      	cmp	r3, #0
 8003238:	da0f      	bge.n	800325a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	f003 020f 	and.w	r2, r3, #15
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	3338      	adds	r3, #56	; 0x38
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	3304      	adds	r3, #4
 8003250:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	705a      	strb	r2, [r3, #1]
 8003258:	e00d      	b.n	8003276 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	4413      	add	r3, r2
 800326c:	3304      	adds	r3, #4
 800326e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	b2da      	uxtb	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_PCD_EP_SetStall+0x82>
 8003292:	2302      	movs	r3, #2
 8003294:	e01e      	b.n	80032d4 <HAL_PCD_EP_SetStall+0xc0>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68f9      	ldr	r1, [r7, #12]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f003 fa38 	bl	800671a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10a      	bne.n	80032ca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	b2d9      	uxtb	r1, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032c4:	461a      	mov	r2, r3
 80032c6:	f003 fc29 	bl	8006b1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	f003 020f 	and.w	r2, r3, #15
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d901      	bls.n	80032fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e042      	b.n	8003380 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	da0f      	bge.n	8003322 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	f003 020f 	and.w	r2, r3, #15
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	3338      	adds	r3, #56	; 0x38
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	3304      	adds	r3, #4
 8003318:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	705a      	strb	r2, [r3, #1]
 8003320:	e00f      	b.n	8003342 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	f003 020f 	and.w	r2, r3, #15
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4413      	add	r3, r2
 8003338:	3304      	adds	r3, #4
 800333a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	b2da      	uxtb	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_PCD_EP_ClrStall+0x86>
 800335e:	2302      	movs	r3, #2
 8003360:	e00e      	b.n	8003380 <HAL_PCD_EP_ClrStall+0xa4>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68f9      	ldr	r1, [r7, #12]
 8003370:	4618      	mov	r0, r3
 8003372:	f003 fa40 	bl	80067f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	; 0x28
 800338c:	af02      	add	r7, sp, #8
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	4613      	mov	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	3338      	adds	r3, #56	; 0x38
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	4413      	add	r3, r2
 80033ac:	3304      	adds	r3, #4
 80033ae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d901      	bls.n	80033c0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e06c      	b.n	800349a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d902      	bls.n	80033dc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	3303      	adds	r3, #3
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033e4:	e02b      	b.n	800343e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d902      	bls.n	8003402 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3303      	adds	r3, #3
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	68d9      	ldr	r1, [r3, #12]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	b2da      	uxtb	r2, r3
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800341a:	b2db      	uxtb	r3, r3
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	4603      	mov	r3, r0
 8003420:	6978      	ldr	r0, [r7, #20]
 8003422:	f003 f91c 	bl	800665e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	441a      	add	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	441a      	add	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	b29b      	uxth	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	429a      	cmp	r2, r3
 8003452:	d809      	bhi.n	8003468 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	699a      	ldr	r2, [r3, #24]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800345c:	429a      	cmp	r2, r3
 800345e:	d203      	bcs.n	8003468 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1be      	bne.n	80033e6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	429a      	cmp	r2, r3
 8003472:	d811      	bhi.n	8003498 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	2201      	movs	r2, #1
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	43db      	mvns	r3, r3
 800348e:	6939      	ldr	r1, [r7, #16]
 8003490:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003494:	4013      	ands	r3, r2
 8003496:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	333c      	adds	r3, #60	; 0x3c
 80034bc:	3304      	adds	r3, #4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	f040 80a0 	bne.w	800361c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d015      	beq.n	8003512 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4a72      	ldr	r2, [pc, #456]	; (80036b4 <PCD_EP_OutXfrComplete_int+0x210>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	f240 80dd 	bls.w	80036aa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 80d7 	beq.w	80036aa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003508:	461a      	mov	r2, r3
 800350a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800350e:	6093      	str	r3, [r2, #8]
 8003510:	e0cb      	b.n	80036aa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d009      	beq.n	8003530 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003528:	461a      	mov	r2, r3
 800352a:	2320      	movs	r3, #32
 800352c:	6093      	str	r3, [r2, #8]
 800352e:	e0bc      	b.n	80036aa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003536:	2b00      	cmp	r3, #0
 8003538:	f040 80b7 	bne.w	80036aa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4a5d      	ldr	r2, [pc, #372]	; (80036b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d90f      	bls.n	8003564 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4413      	add	r3, r2
 8003556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355a:	461a      	mov	r2, r3
 800355c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003560:	6093      	str	r3, [r2, #8]
 8003562:	e0a2      	b.n	80036aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003576:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	0159      	lsls	r1, r3, #5
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	440b      	add	r3, r1
 8003580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800358a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4403      	add	r3, r0
 800359a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800359e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035b2:	6819      	ldr	r1, [r3, #0]
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	4613      	mov	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4403      	add	r3, r0
 80035c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4419      	add	r1, r3
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4403      	add	r3, r0
 80035d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035dc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d114      	bne.n	800360e <PCD_EP_OutXfrComplete_int+0x16a>
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d108      	bne.n	800360e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003606:	461a      	mov	r2, r3
 8003608:	2101      	movs	r1, #1
 800360a:	f003 fa87 	bl	8006b1c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	4619      	mov	r1, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f005 f989 	bl	800892c <HAL_PCD_DataOutStageCallback>
 800361a:	e046      	b.n	80036aa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4a26      	ldr	r2, [pc, #152]	; (80036b8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d124      	bne.n	800366e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363a:	461a      	mov	r2, r3
 800363c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003640:	6093      	str	r3, [r2, #8]
 8003642:	e032      	b.n	80036aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365a:	461a      	mov	r2, r3
 800365c:	2320      	movs	r3, #32
 800365e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	4619      	mov	r1, r3
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f005 f960 	bl	800892c <HAL_PCD_DataOutStageCallback>
 800366c:	e01d      	b.n	80036aa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d114      	bne.n	800369e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d108      	bne.n	800369e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003696:	461a      	mov	r2, r3
 8003698:	2100      	movs	r1, #0
 800369a:	f003 fa3f 	bl	8006b1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	4619      	mov	r1, r3
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f005 f941 	bl	800892c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	4f54300a 	.word	0x4f54300a
 80036b8:	4f54310a 	.word	0x4f54310a

080036bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	333c      	adds	r3, #60	; 0x3c
 80036d4:	3304      	adds	r3, #4
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4a15      	ldr	r2, [pc, #84]	; (8003744 <PCD_EP_OutSetupPacket_int+0x88>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d90e      	bls.n	8003710 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d009      	beq.n	8003710 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003708:	461a      	mov	r2, r3
 800370a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800370e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f005 f8f9 	bl	8008908 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <PCD_EP_OutSetupPacket_int+0x88>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d90c      	bls.n	8003738 <PCD_EP_OutSetupPacket_int+0x7c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d108      	bne.n	8003738 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003730:	461a      	mov	r2, r3
 8003732:	2101      	movs	r1, #1
 8003734:	f003 f9f2 	bl	8006b1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	4f54300a 	.word	0x4f54300a

08003748 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	70fb      	strb	r3, [r7, #3]
 8003754:	4613      	mov	r3, r2
 8003756:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d107      	bne.n	8003776 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003766:	883b      	ldrh	r3, [r7, #0]
 8003768:	0419      	lsls	r1, r3, #16
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	430a      	orrs	r2, r1
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
 8003774:	e028      	b.n	80037c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	0c1b      	lsrs	r3, r3, #16
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	4413      	add	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003784:	2300      	movs	r3, #0
 8003786:	73fb      	strb	r3, [r7, #15]
 8003788:	e00d      	b.n	80037a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	3340      	adds	r3, #64	; 0x40
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	0c1b      	lsrs	r3, r3, #16
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	4413      	add	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	3301      	adds	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
 80037a6:	7bfa      	ldrb	r2, [r7, #15]
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d3ec      	bcc.n	800378a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037b0:	883b      	ldrh	r3, [r7, #0]
 80037b2:	0418      	lsls	r0, r3, #16
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6819      	ldr	r1, [r3, #0]
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	4302      	orrs	r2, r0
 80037c0:	3340      	adds	r3, #64	; 0x40
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	460b      	mov	r3, r1
 80037e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	887a      	ldrh	r2, [r7, #2]
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e25b      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d075      	beq.n	800391a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800382e:	4ba3      	ldr	r3, [pc, #652]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b04      	cmp	r3, #4
 8003838:	d00c      	beq.n	8003854 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800383a:	4ba0      	ldr	r3, [pc, #640]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003842:	2b08      	cmp	r3, #8
 8003844:	d112      	bne.n	800386c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003846:	4b9d      	ldr	r3, [pc, #628]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003852:	d10b      	bne.n	800386c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003854:	4b99      	ldr	r3, [pc, #612]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d05b      	beq.n	8003918 <HAL_RCC_OscConfig+0x108>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d157      	bne.n	8003918 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e236      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003874:	d106      	bne.n	8003884 <HAL_RCC_OscConfig+0x74>
 8003876:	4b91      	ldr	r3, [pc, #580]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a90      	ldr	r2, [pc, #576]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e01d      	b.n	80038c0 <HAL_RCC_OscConfig+0xb0>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800388c:	d10c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x98>
 800388e:	4b8b      	ldr	r3, [pc, #556]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a8a      	ldr	r2, [pc, #552]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4b88      	ldr	r3, [pc, #544]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a87      	ldr	r2, [pc, #540]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e00b      	b.n	80038c0 <HAL_RCC_OscConfig+0xb0>
 80038a8:	4b84      	ldr	r3, [pc, #528]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a83      	ldr	r2, [pc, #524]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	4b81      	ldr	r3, [pc, #516]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a80      	ldr	r2, [pc, #512]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d013      	beq.n	80038f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7fe faf0 	bl	8001eac <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d0:	f7fe faec 	bl	8001eac <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	; 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e1fb      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e2:	4b76      	ldr	r3, [pc, #472]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0xc0>
 80038ee:	e014      	b.n	800391a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe fadc 	bl	8001eac <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fe fad8 	bl	8001eac <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	; 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e1e7      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390a:	4b6c      	ldr	r3, [pc, #432]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0xe8>
 8003916:	e000      	b.n	800391a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d063      	beq.n	80039ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003926:	4b65      	ldr	r3, [pc, #404]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003932:	4b62      	ldr	r3, [pc, #392]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800393a:	2b08      	cmp	r3, #8
 800393c:	d11c      	bne.n	8003978 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800393e:	4b5f      	ldr	r3, [pc, #380]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d116      	bne.n	8003978 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394a:	4b5c      	ldr	r3, [pc, #368]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_RCC_OscConfig+0x152>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d001      	beq.n	8003962 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e1bb      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003962:	4b56      	ldr	r3, [pc, #344]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4952      	ldr	r1, [pc, #328]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003976:	e03a      	b.n	80039ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d020      	beq.n	80039c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003980:	4b4f      	ldr	r3, [pc, #316]	; (8003ac0 <HAL_RCC_OscConfig+0x2b0>)
 8003982:	2201      	movs	r2, #1
 8003984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fe fa91 	bl	8001eac <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800398e:	f7fe fa8d 	bl	8001eac <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e19c      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a0:	4b46      	ldr	r3, [pc, #280]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f0      	beq.n	800398e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ac:	4b43      	ldr	r3, [pc, #268]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4940      	ldr	r1, [pc, #256]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	600b      	str	r3, [r1, #0]
 80039c0:	e015      	b.n	80039ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c2:	4b3f      	ldr	r3, [pc, #252]	; (8003ac0 <HAL_RCC_OscConfig+0x2b0>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fe fa70 	bl	8001eac <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d0:	f7fe fa6c 	bl	8001eac <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e17b      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e2:	4b36      	ldr	r3, [pc, #216]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d030      	beq.n	8003a5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d016      	beq.n	8003a30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a02:	4b30      	ldr	r3, [pc, #192]	; (8003ac4 <HAL_RCC_OscConfig+0x2b4>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a08:	f7fe fa50 	bl	8001eac <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a10:	f7fe fa4c 	bl	8001eac <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e15b      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a22:	4b26      	ldr	r3, [pc, #152]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x200>
 8003a2e:	e015      	b.n	8003a5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a30:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <HAL_RCC_OscConfig+0x2b4>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a36:	f7fe fa39 	bl	8001eac <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a3e:	f7fe fa35 	bl	8001eac <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e144      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f0      	bne.n	8003a3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80a0 	beq.w	8003baa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6e:	4b13      	ldr	r3, [pc, #76]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10f      	bne.n	8003a9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a88:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8a:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a96:	2301      	movs	r3, #1
 8003a98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_OscConfig+0x2b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d121      	bne.n	8003aea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <HAL_RCC_OscConfig+0x2b8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a07      	ldr	r2, [pc, #28]	; (8003ac8 <HAL_RCC_OscConfig+0x2b8>)
 8003aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab2:	f7fe f9fb 	bl	8001eac <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab8:	e011      	b.n	8003ade <HAL_RCC_OscConfig+0x2ce>
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	42470000 	.word	0x42470000
 8003ac4:	42470e80 	.word	0x42470e80
 8003ac8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003acc:	f7fe f9ee 	bl	8001eac <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0fd      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ade:	4b81      	ldr	r3, [pc, #516]	; (8003ce4 <HAL_RCC_OscConfig+0x4d4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d106      	bne.n	8003b00 <HAL_RCC_OscConfig+0x2f0>
 8003af2:	4b7d      	ldr	r3, [pc, #500]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	4a7c      	ldr	r2, [pc, #496]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	6713      	str	r3, [r2, #112]	; 0x70
 8003afe:	e01c      	b.n	8003b3a <HAL_RCC_OscConfig+0x32a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d10c      	bne.n	8003b22 <HAL_RCC_OscConfig+0x312>
 8003b08:	4b77      	ldr	r3, [pc, #476]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4a76      	ldr	r2, [pc, #472]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b0e:	f043 0304 	orr.w	r3, r3, #4
 8003b12:	6713      	str	r3, [r2, #112]	; 0x70
 8003b14:	4b74      	ldr	r3, [pc, #464]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	4a73      	ldr	r2, [pc, #460]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b20:	e00b      	b.n	8003b3a <HAL_RCC_OscConfig+0x32a>
 8003b22:	4b71      	ldr	r3, [pc, #452]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a70      	ldr	r2, [pc, #448]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2e:	4b6e      	ldr	r3, [pc, #440]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	4a6d      	ldr	r2, [pc, #436]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b34:	f023 0304 	bic.w	r3, r3, #4
 8003b38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d015      	beq.n	8003b6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b42:	f7fe f9b3 	bl	8001eac <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fe f9af 	bl	8001eac <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e0bc      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b60:	4b61      	ldr	r3, [pc, #388]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ee      	beq.n	8003b4a <HAL_RCC_OscConfig+0x33a>
 8003b6c:	e014      	b.n	8003b98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6e:	f7fe f99d 	bl	8001eac <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fe f999 	bl	8001eac <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e0a6      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8c:	4b56      	ldr	r3, [pc, #344]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1ee      	bne.n	8003b76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d105      	bne.n	8003baa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9e:	4b52      	ldr	r3, [pc, #328]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	4a51      	ldr	r2, [pc, #324]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 8092 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bb4:	4b4c      	ldr	r3, [pc, #304]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d05c      	beq.n	8003c7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d141      	bne.n	8003c4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc8:	4b48      	ldr	r3, [pc, #288]	; (8003cec <HAL_RCC_OscConfig+0x4dc>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bce:	f7fe f96d 	bl	8001eac <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd6:	f7fe f969 	bl	8001eac <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e078      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be8:	4b3f      	ldr	r3, [pc, #252]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f0      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	019b      	lsls	r3, r3, #6
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	041b      	lsls	r3, r3, #16
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	061b      	lsls	r3, r3, #24
 8003c18:	4933      	ldr	r1, [pc, #204]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c1e:	4b33      	ldr	r3, [pc, #204]	; (8003cec <HAL_RCC_OscConfig+0x4dc>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c24:	f7fe f942 	bl	8001eac <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c2c:	f7fe f93e 	bl	8001eac <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e04d      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x41c>
 8003c4a:	e045      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4c:	4b27      	ldr	r3, [pc, #156]	; (8003cec <HAL_RCC_OscConfig+0x4dc>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c52:	f7fe f92b 	bl	8001eac <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fe f927 	bl	8001eac <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e036      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f0      	bne.n	8003c5a <HAL_RCC_OscConfig+0x44a>
 8003c78:	e02e      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e029      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c86:	4b18      	ldr	r3, [pc, #96]	; (8003ce8 <HAL_RCC_OscConfig+0x4d8>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d11c      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d115      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cae:	4013      	ands	r3, r2
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d10d      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d106      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40007000 	.word	0x40007000
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	42470060 	.word	0x42470060

08003cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0cc      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d04:	4b68      	ldr	r3, [pc, #416]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d90c      	bls.n	8003d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d12:	4b65      	ldr	r3, [pc, #404]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1a:	4b63      	ldr	r3, [pc, #396]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0b8      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d020      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d44:	4b59      	ldr	r3, [pc, #356]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4a58      	ldr	r2, [pc, #352]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d5c:	4b53      	ldr	r3, [pc, #332]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	4a52      	ldr	r2, [pc, #328]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d68:	4b50      	ldr	r3, [pc, #320]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	494d      	ldr	r1, [pc, #308]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d044      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	4b47      	ldr	r3, [pc, #284]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d119      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e07f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d107      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dae:	4b3f      	ldr	r3, [pc, #252]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e06f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbe:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e067      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dce:	4b37      	ldr	r3, [pc, #220]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f023 0203 	bic.w	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	4934      	ldr	r1, [pc, #208]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de0:	f7fe f864 	bl	8001eac <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de8:	f7fe f860 	bl	8001eac <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e04f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfe:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 020c 	and.w	r2, r3, #12
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d1eb      	bne.n	8003de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e10:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d20c      	bcs.n	8003e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e032      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4916      	ldr	r1, [pc, #88]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	490e      	ldr	r1, [pc, #56]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e76:	f000 f821 	bl	8003ebc <HAL_RCC_GetSysClockFreq>
 8003e7a:	4601      	mov	r1, r0
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	4a0a      	ldr	r2, [pc, #40]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e88:	5cd3      	ldrb	r3, [r2, r3]
 8003e8a:	fa21 f303 	lsr.w	r3, r1, r3
 8003e8e:	4a09      	ldr	r2, [pc, #36]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd ffc4 	bl	8001e24 <HAL_InitTick>

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023c00 	.word	0x40023c00
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	0800aa18 	.word	0x0800aa18
 8003eb4:	20000000 	.word	0x20000000
 8003eb8:	20000004 	.word	0x20000004

08003ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	607b      	str	r3, [r7, #4]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ed2:	4b63      	ldr	r3, [pc, #396]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d007      	beq.n	8003eee <HAL_RCC_GetSysClockFreq+0x32>
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d008      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x38>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f040 80b4 	bne.w	8004050 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ee8:	4b5e      	ldr	r3, [pc, #376]	; (8004064 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003eea:	60bb      	str	r3, [r7, #8]
       break;
 8003eec:	e0b3      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eee:	4b5d      	ldr	r3, [pc, #372]	; (8004064 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003ef0:	60bb      	str	r3, [r7, #8]
      break;
 8003ef2:	e0b0      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef4:	4b5a      	ldr	r3, [pc, #360]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003efc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003efe:	4b58      	ldr	r3, [pc, #352]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d04a      	beq.n	8003fa0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f0a:	4b55      	ldr	r3, [pc, #340]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	099b      	lsrs	r3, r3, #6
 8003f10:	f04f 0400 	mov.w	r4, #0
 8003f14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	ea03 0501 	and.w	r5, r3, r1
 8003f20:	ea04 0602 	and.w	r6, r4, r2
 8003f24:	4629      	mov	r1, r5
 8003f26:	4632      	mov	r2, r6
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	f04f 0400 	mov.w	r4, #0
 8003f30:	0154      	lsls	r4, r2, #5
 8003f32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f36:	014b      	lsls	r3, r1, #5
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	1b49      	subs	r1, r1, r5
 8003f3e:	eb62 0206 	sbc.w	r2, r2, r6
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	f04f 0400 	mov.w	r4, #0
 8003f4a:	0194      	lsls	r4, r2, #6
 8003f4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f50:	018b      	lsls	r3, r1, #6
 8003f52:	1a5b      	subs	r3, r3, r1
 8003f54:	eb64 0402 	sbc.w	r4, r4, r2
 8003f58:	f04f 0100 	mov.w	r1, #0
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	00e2      	lsls	r2, r4, #3
 8003f62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f66:	00d9      	lsls	r1, r3, #3
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4614      	mov	r4, r2
 8003f6c:	195b      	adds	r3, r3, r5
 8003f6e:	eb44 0406 	adc.w	r4, r4, r6
 8003f72:	f04f 0100 	mov.w	r1, #0
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	02a2      	lsls	r2, r4, #10
 8003f7c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f80:	0299      	lsls	r1, r3, #10
 8003f82:	460b      	mov	r3, r1
 8003f84:	4614      	mov	r4, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	4621      	mov	r1, r4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f04f 0400 	mov.w	r4, #0
 8003f90:	461a      	mov	r2, r3
 8003f92:	4623      	mov	r3, r4
 8003f94:	f7fc fdb4 	bl	8000b00 <__aeabi_uldivmod>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	e049      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fa0:	4b2f      	ldr	r3, [pc, #188]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	099b      	lsrs	r3, r3, #6
 8003fa6:	f04f 0400 	mov.w	r4, #0
 8003faa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	ea03 0501 	and.w	r5, r3, r1
 8003fb6:	ea04 0602 	and.w	r6, r4, r2
 8003fba:	4629      	mov	r1, r5
 8003fbc:	4632      	mov	r2, r6
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	f04f 0400 	mov.w	r4, #0
 8003fc6:	0154      	lsls	r4, r2, #5
 8003fc8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fcc:	014b      	lsls	r3, r1, #5
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4622      	mov	r2, r4
 8003fd2:	1b49      	subs	r1, r1, r5
 8003fd4:	eb62 0206 	sbc.w	r2, r2, r6
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	f04f 0400 	mov.w	r4, #0
 8003fe0:	0194      	lsls	r4, r2, #6
 8003fe2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fe6:	018b      	lsls	r3, r1, #6
 8003fe8:	1a5b      	subs	r3, r3, r1
 8003fea:	eb64 0402 	sbc.w	r4, r4, r2
 8003fee:	f04f 0100 	mov.w	r1, #0
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	00e2      	lsls	r2, r4, #3
 8003ff8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ffc:	00d9      	lsls	r1, r3, #3
 8003ffe:	460b      	mov	r3, r1
 8004000:	4614      	mov	r4, r2
 8004002:	195b      	adds	r3, r3, r5
 8004004:	eb44 0406 	adc.w	r4, r4, r6
 8004008:	f04f 0100 	mov.w	r1, #0
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	02a2      	lsls	r2, r4, #10
 8004012:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004016:	0299      	lsls	r1, r3, #10
 8004018:	460b      	mov	r3, r1
 800401a:	4614      	mov	r4, r2
 800401c:	4618      	mov	r0, r3
 800401e:	4621      	mov	r1, r4
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f04f 0400 	mov.w	r4, #0
 8004026:	461a      	mov	r2, r3
 8004028:	4623      	mov	r3, r4
 800402a:	f7fc fd69 	bl	8000b00 <__aeabi_uldivmod>
 800402e:	4603      	mov	r3, r0
 8004030:	460c      	mov	r4, r1
 8004032:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004034:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	0c1b      	lsrs	r3, r3, #16
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	3301      	adds	r3, #1
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	60bb      	str	r3, [r7, #8]
      break;
 800404e:	e002      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004050:	4b04      	ldr	r3, [pc, #16]	; (8004064 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004052:	60bb      	str	r3, [r7, #8]
      break;
 8004054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004056:	68bb      	ldr	r3, [r7, #8]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004060:	40023800 	.word	0x40023800
 8004064:	00f42400 	.word	0x00f42400

08004068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800406c:	4b03      	ldr	r3, [pc, #12]	; (800407c <HAL_RCC_GetHCLKFreq+0x14>)
 800406e:	681b      	ldr	r3, [r3, #0]
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	20000000 	.word	0x20000000

08004080 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e056      	b.n	8004140 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d106      	bne.n	80040b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7fd fcbd 	bl	8001a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2202      	movs	r2, #2
 80040b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	ea42 0103 	orr.w	r1, r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	0c1b      	lsrs	r3, r3, #16
 8004110:	f003 0104 	and.w	r1, r3, #4
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800412e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_SPI_Transmit+0x22>
 8004166:	2302      	movs	r3, #2
 8004168:	e11e      	b.n	80043a8 <HAL_SPI_Transmit+0x260>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004172:	f7fd fe9b 	bl	8001eac <HAL_GetTick>
 8004176:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b01      	cmp	r3, #1
 8004186:	d002      	beq.n	800418e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004188:	2302      	movs	r3, #2
 800418a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800418c:	e103      	b.n	8004396 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_SPI_Transmit+0x52>
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800419e:	e0fa      	b.n	8004396 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2203      	movs	r2, #3
 80041a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	88fa      	ldrh	r2, [r7, #6]
 80041b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	88fa      	ldrh	r2, [r7, #6]
 80041be:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041e6:	d107      	bne.n	80041f8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b40      	cmp	r3, #64	; 0x40
 8004204:	d007      	beq.n	8004216 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004214:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800421e:	d14b      	bne.n	80042b8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <HAL_SPI_Transmit+0xe6>
 8004228:	8afb      	ldrh	r3, [r7, #22]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d13e      	bne.n	80042ac <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	881a      	ldrh	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	1c9a      	adds	r2, r3, #2
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004252:	e02b      	b.n	80042ac <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b02      	cmp	r3, #2
 8004260:	d112      	bne.n	8004288 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	881a      	ldrh	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	1c9a      	adds	r2, r3, #2
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	86da      	strh	r2, [r3, #54]	; 0x36
 8004286:	e011      	b.n	80042ac <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004288:	f7fd fe10 	bl	8001eac <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d803      	bhi.n	80042a0 <HAL_SPI_Transmit+0x158>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429e:	d102      	bne.n	80042a6 <HAL_SPI_Transmit+0x15e>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d102      	bne.n	80042ac <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042aa:	e074      	b.n	8004396 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1ce      	bne.n	8004254 <HAL_SPI_Transmit+0x10c>
 80042b6:	e04c      	b.n	8004352 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_SPI_Transmit+0x17e>
 80042c0:	8afb      	ldrh	r3, [r7, #22]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d140      	bne.n	8004348 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	330c      	adds	r3, #12
 80042d0:	7812      	ldrb	r2, [r2, #0]
 80042d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042ec:	e02c      	b.n	8004348 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d113      	bne.n	8004324 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	330c      	adds	r3, #12
 8004306:	7812      	ldrb	r2, [r2, #0]
 8004308:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	86da      	strh	r2, [r3, #54]	; 0x36
 8004322:	e011      	b.n	8004348 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004324:	f7fd fdc2 	bl	8001eac <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d803      	bhi.n	800433c <HAL_SPI_Transmit+0x1f4>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433a:	d102      	bne.n	8004342 <HAL_SPI_Transmit+0x1fa>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d102      	bne.n	8004348 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004346:	e026      	b.n	8004396 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1cd      	bne.n	80042ee <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	6839      	ldr	r1, [r7, #0]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 fb62 	bl	8004a20 <SPI_EndRxTxTransaction>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004370:	2300      	movs	r3, #0
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	77fb      	strb	r3, [r7, #31]
 8004392:	e000      	b.n	8004396 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004394:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08c      	sub	sp, #48	; 0x30
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043be:	2301      	movs	r3, #1
 80043c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_SPI_TransmitReceive+0x26>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e18a      	b.n	80046ec <HAL_SPI_TransmitReceive+0x33c>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043de:	f7fd fd65 	bl	8001eac <HAL_GetTick>
 80043e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80043f4:	887b      	ldrh	r3, [r7, #2]
 80043f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d00f      	beq.n	8004420 <HAL_SPI_TransmitReceive+0x70>
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004406:	d107      	bne.n	8004418 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d103      	bne.n	8004418 <HAL_SPI_TransmitReceive+0x68>
 8004410:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004414:	2b04      	cmp	r3, #4
 8004416:	d003      	beq.n	8004420 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004418:	2302      	movs	r3, #2
 800441a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800441e:	e15b      	b.n	80046d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <HAL_SPI_TransmitReceive+0x82>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_SPI_TransmitReceive+0x82>
 800442c:	887b      	ldrh	r3, [r7, #2]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d103      	bne.n	800443a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004438:	e14e      	b.n	80046d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b04      	cmp	r3, #4
 8004444:	d003      	beq.n	800444e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2205      	movs	r2, #5
 800444a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	887a      	ldrh	r2, [r7, #2]
 800445e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	887a      	ldrh	r2, [r7, #2]
 8004464:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	887a      	ldrh	r2, [r7, #2]
 8004470:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	887a      	ldrh	r2, [r7, #2]
 8004476:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448e:	2b40      	cmp	r3, #64	; 0x40
 8004490:	d007      	beq.n	80044a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044aa:	d178      	bne.n	800459e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <HAL_SPI_TransmitReceive+0x10a>
 80044b4:	8b7b      	ldrh	r3, [r7, #26]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d166      	bne.n	8004588 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	881a      	ldrh	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	1c9a      	adds	r2, r3, #2
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044de:	e053      	b.n	8004588 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d11b      	bne.n	8004526 <HAL_SPI_TransmitReceive+0x176>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d016      	beq.n	8004526 <HAL_SPI_TransmitReceive+0x176>
 80044f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d113      	bne.n	8004526 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	881a      	ldrh	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	1c9a      	adds	r2, r3, #2
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	d119      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x1b8>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004538:	b29b      	uxth	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d014      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	b292      	uxth	r2, r2
 800454a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	1c9a      	adds	r2, r3, #2
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004564:	2301      	movs	r3, #1
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004568:	f7fd fca0 	bl	8001eac <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004574:	429a      	cmp	r2, r3
 8004576:	d807      	bhi.n	8004588 <HAL_SPI_TransmitReceive+0x1d8>
 8004578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457e:	d003      	beq.n	8004588 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004586:	e0a7      	b.n	80046d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1a6      	bne.n	80044e0 <HAL_SPI_TransmitReceive+0x130>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1a1      	bne.n	80044e0 <HAL_SPI_TransmitReceive+0x130>
 800459c:	e07c      	b.n	8004698 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_SPI_TransmitReceive+0x1fc>
 80045a6:	8b7b      	ldrh	r3, [r7, #26]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d16b      	bne.n	8004684 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	330c      	adds	r3, #12
 80045b6:	7812      	ldrb	r2, [r2, #0]
 80045b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045d2:	e057      	b.n	8004684 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d11c      	bne.n	800461c <HAL_SPI_TransmitReceive+0x26c>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d017      	beq.n	800461c <HAL_SPI_TransmitReceive+0x26c>
 80045ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d114      	bne.n	800461c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	330c      	adds	r3, #12
 80045fc:	7812      	ldrb	r2, [r2, #0]
 80045fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b01      	cmp	r3, #1
 8004628:	d119      	bne.n	800465e <HAL_SPI_TransmitReceive+0x2ae>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d014      	beq.n	800465e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800465a:	2301      	movs	r3, #1
 800465c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800465e:	f7fd fc25 	bl	8001eac <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800466a:	429a      	cmp	r2, r3
 800466c:	d803      	bhi.n	8004676 <HAL_SPI_TransmitReceive+0x2c6>
 800466e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004674:	d102      	bne.n	800467c <HAL_SPI_TransmitReceive+0x2cc>
 8004676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004678:	2b00      	cmp	r3, #0
 800467a:	d103      	bne.n	8004684 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004682:	e029      	b.n	80046d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1a2      	bne.n	80045d4 <HAL_SPI_TransmitReceive+0x224>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d19d      	bne.n	80045d4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f9bf 	bl	8004a20 <SPI_EndRxTxTransaction>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d006      	beq.n	80046b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2220      	movs	r2, #32
 80046b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80046b4:	e010      	b.n	80046d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10b      	bne.n	80046d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	e000      	b.n	80046d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80046d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3730      	adds	r7, #48	; 0x30
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	099b      	lsrs	r3, r3, #6
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10f      	bne.n	8004738 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	099b      	lsrs	r3, r3, #6
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d004      	beq.n	8004738 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
    return;
 8004736:	e0d8      	b.n	80048ea <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	085b      	lsrs	r3, r3, #1
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <HAL_SPI_IRQHandler+0x66>
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	09db      	lsrs	r3, r3, #7
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d004      	beq.n	800475a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	4798      	blx	r3
    return;
 8004758:	e0c7      	b.n	80048ea <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10c      	bne.n	8004780 <HAL_SPI_IRQHandler+0x8c>
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	099b      	lsrs	r3, r3, #6
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	0a1b      	lsrs	r3, r3, #8
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80b5 	beq.w	80048ea <HAL_SPI_IRQHandler+0x1f6>
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 80ae 	beq.w	80048ea <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	099b      	lsrs	r3, r3, #6
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d023      	beq.n	80047e2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d011      	beq.n	80047ca <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047aa:	f043 0204 	orr.w	r2, r3, #4
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	e00b      	b.n	80047e2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047ca:	2300      	movs	r3, #0
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	693b      	ldr	r3, [r7, #16]
        return;
 80047e0:	e083      	b.n	80048ea <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d014      	beq.n	8004818 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f2:	f043 0201 	orr.w	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	0a1b      	lsrs	r3, r3, #8
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00c      	beq.n	800483e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004828:	f043 0208 	orr.w	r2, r3, #8
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004830:	2300      	movs	r3, #0
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	2b00      	cmp	r3, #0
 8004844:	d050      	beq.n	80048e8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004854:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d104      	bne.n	8004872 <HAL_SPI_IRQHandler+0x17e>
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d034      	beq.n	80048dc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0203 	bic.w	r2, r2, #3
 8004880:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d011      	beq.n	80048ae <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488e:	4a18      	ldr	r2, [pc, #96]	; (80048f0 <HAL_SPI_IRQHandler+0x1fc>)
 8004890:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004896:	4618      	mov	r0, r3
 8004898:	f7fd fc47 	bl	800212a <HAL_DMA_Abort_IT>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d016      	beq.n	80048e4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ba:	4a0d      	ldr	r2, [pc, #52]	; (80048f0 <HAL_SPI_IRQHandler+0x1fc>)
 80048bc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fd fc31 	bl	800212a <HAL_DMA_Abort_IT>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80048da:	e003      	b.n	80048e4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f809 	bl	80048f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80048e2:	e000      	b.n	80048e6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80048e4:	bf00      	nop
    return;
 80048e6:	bf00      	nop
 80048e8:	bf00      	nop
  }
}
 80048ea:	3720      	adds	r7, #32
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	08004925 	.word	0x08004925

080048f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004916:	b2db      	uxtb	r3, r3
}
 8004918:	4618      	mov	r0, r3
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff ffd8 	bl	80048f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	4613      	mov	r3, r2
 800495a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800495c:	e04c      	b.n	80049f8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004964:	d048      	beq.n	80049f8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004966:	f7fd faa1 	bl	8001eac <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d902      	bls.n	800497c <SPI_WaitFlagStateUntilTimeout+0x30>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d13d      	bne.n	80049f8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800498a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004994:	d111      	bne.n	80049ba <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499e:	d004      	beq.n	80049aa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a8:	d107      	bne.n	80049ba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c2:	d10f      	bne.n	80049e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e00f      	b.n	8004a18 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4013      	ands	r3, r2
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	bf0c      	ite	eq
 8004a08:	2301      	moveq	r3, #1
 8004a0a:	2300      	movne	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	461a      	mov	r2, r3
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d1a3      	bne.n	800495e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <SPI_EndRxTxTransaction+0x7c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1b      	ldr	r2, [pc, #108]	; (8004aa0 <SPI_EndRxTxTransaction+0x80>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	0d5b      	lsrs	r3, r3, #21
 8004a38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a3c:	fb02 f303 	mul.w	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a4a:	d112      	bne.n	8004a72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2200      	movs	r2, #0
 8004a54:	2180      	movs	r1, #128	; 0x80
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff ff78 	bl	800494c <SPI_WaitFlagStateUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d016      	beq.n	8004a90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e00f      	b.n	8004a92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a88:	2b80      	cmp	r3, #128	; 0x80
 8004a8a:	d0f2      	beq.n	8004a72 <SPI_EndRxTxTransaction+0x52>
 8004a8c:	e000      	b.n	8004a90 <SPI_EndRxTxTransaction+0x70>
        break;
 8004a8e:	bf00      	nop
  }

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000000 	.word	0x20000000
 8004aa0:	165e9f81 	.word	0x165e9f81

08004aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e01d      	b.n	8004af2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fd f834 	bl	8001b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	f000 f9fa 	bl	8004edc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e01d      	b.n	8004b48 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d106      	bne.n	8004b26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f815 	bl	8004b50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3304      	adds	r3, #4
 8004b36:	4619      	mov	r1, r3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	f000 f9cf 	bl	8004edc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2201      	movs	r2, #1
 8004b74:	6839      	ldr	r1, [r7, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fc9a 	bl	80054b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <HAL_TIM_PWM_Start+0x74>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d004      	beq.n	8004b90 <HAL_TIM_PWM_Start+0x2c>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a14      	ldr	r2, [pc, #80]	; (8004bdc <HAL_TIM_PWM_Start+0x78>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d101      	bne.n	8004b94 <HAL_TIM_PWM_Start+0x30>
 8004b90:	2301      	movs	r3, #1
 8004b92:	e000      	b.n	8004b96 <HAL_TIM_PWM_Start+0x32>
 8004b94:	2300      	movs	r3, #0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d007      	beq.n	8004baa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ba8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b06      	cmp	r3, #6
 8004bba:	d007      	beq.n	8004bcc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40010000 	.word	0x40010000
 8004bdc:	40010400 	.word	0x40010400

08004be0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e0b4      	b.n	8004d64 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2202      	movs	r2, #2
 8004c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b0c      	cmp	r3, #12
 8004c0e:	f200 809f 	bhi.w	8004d50 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004c12:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c18:	08004c4d 	.word	0x08004c4d
 8004c1c:	08004d51 	.word	0x08004d51
 8004c20:	08004d51 	.word	0x08004d51
 8004c24:	08004d51 	.word	0x08004d51
 8004c28:	08004c8d 	.word	0x08004c8d
 8004c2c:	08004d51 	.word	0x08004d51
 8004c30:	08004d51 	.word	0x08004d51
 8004c34:	08004d51 	.word	0x08004d51
 8004c38:	08004ccf 	.word	0x08004ccf
 8004c3c:	08004d51 	.word	0x08004d51
 8004c40:	08004d51 	.word	0x08004d51
 8004c44:	08004d51 	.word	0x08004d51
 8004c48:	08004d0f 	.word	0x08004d0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f9e2 	bl	800501c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0208 	orr.w	r2, r2, #8
 8004c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0204 	bic.w	r2, r2, #4
 8004c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6999      	ldr	r1, [r3, #24]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	619a      	str	r2, [r3, #24]
      break;
 8004c8a:	e062      	b.n	8004d52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fa32 	bl	80050fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699a      	ldr	r2, [r3, #24]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6999      	ldr	r1, [r3, #24]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	021a      	lsls	r2, r3, #8
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	619a      	str	r2, [r3, #24]
      break;
 8004ccc:	e041      	b.n	8004d52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fa87 	bl	80051e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0208 	orr.w	r2, r2, #8
 8004ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0204 	bic.w	r2, r2, #4
 8004cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69d9      	ldr	r1, [r3, #28]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	61da      	str	r2, [r3, #28]
      break;
 8004d0c:	e021      	b.n	8004d52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 fadb 	bl	80052d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69d9      	ldr	r1, [r3, #28]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	021a      	lsls	r2, r3, #8
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	61da      	str	r2, [r3, #28]
      break;
 8004d4e:	e000      	b.n	8004d52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004d50:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_TIM_ConfigClockSource+0x18>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e0a6      	b.n	8004ed2 <HAL_TIM_ConfigClockSource+0x166>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004da2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004daa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b40      	cmp	r3, #64	; 0x40
 8004dba:	d067      	beq.n	8004e8c <HAL_TIM_ConfigClockSource+0x120>
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	d80b      	bhi.n	8004dd8 <HAL_TIM_ConfigClockSource+0x6c>
 8004dc0:	2b10      	cmp	r3, #16
 8004dc2:	d073      	beq.n	8004eac <HAL_TIM_ConfigClockSource+0x140>
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d802      	bhi.n	8004dce <HAL_TIM_ConfigClockSource+0x62>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d06f      	beq.n	8004eac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004dcc:	e078      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d06c      	beq.n	8004eac <HAL_TIM_ConfigClockSource+0x140>
 8004dd2:	2b30      	cmp	r3, #48	; 0x30
 8004dd4:	d06a      	beq.n	8004eac <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004dd6:	e073      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004dd8:	2b70      	cmp	r3, #112	; 0x70
 8004dda:	d00d      	beq.n	8004df8 <HAL_TIM_ConfigClockSource+0x8c>
 8004ddc:	2b70      	cmp	r3, #112	; 0x70
 8004dde:	d804      	bhi.n	8004dea <HAL_TIM_ConfigClockSource+0x7e>
 8004de0:	2b50      	cmp	r3, #80	; 0x50
 8004de2:	d033      	beq.n	8004e4c <HAL_TIM_ConfigClockSource+0xe0>
 8004de4:	2b60      	cmp	r3, #96	; 0x60
 8004de6:	d041      	beq.n	8004e6c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004de8:	e06a      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dee:	d066      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x152>
 8004df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df4:	d017      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004df6:	e063      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	6899      	ldr	r1, [r3, #8]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f000 fb32 	bl	8005470 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e1a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	609a      	str	r2, [r3, #8]
      break;
 8004e24:	e04c      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	6899      	ldr	r1, [r3, #8]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f000 fb1b 	bl	8005470 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e48:	609a      	str	r2, [r3, #8]
      break;
 8004e4a:	e039      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	6859      	ldr	r1, [r3, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	f000 fa8f 	bl	800537c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2150      	movs	r1, #80	; 0x50
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 fae8 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 8004e6a:	e029      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	6859      	ldr	r1, [r3, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	f000 faae 	bl	80053da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2160      	movs	r1, #96	; 0x60
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fad8 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 8004e8a:	e019      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	6859      	ldr	r1, [r3, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	f000 fa6f 	bl	800537c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2140      	movs	r1, #64	; 0x40
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fac8 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 8004eaa:	e009      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	f000 fabf 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 8004ebc:	e000      	b.n	8004ec0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a40      	ldr	r2, [pc, #256]	; (8004ff0 <TIM_Base_SetConfig+0x114>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d013      	beq.n	8004f1c <TIM_Base_SetConfig+0x40>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efa:	d00f      	beq.n	8004f1c <TIM_Base_SetConfig+0x40>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a3d      	ldr	r2, [pc, #244]	; (8004ff4 <TIM_Base_SetConfig+0x118>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00b      	beq.n	8004f1c <TIM_Base_SetConfig+0x40>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a3c      	ldr	r2, [pc, #240]	; (8004ff8 <TIM_Base_SetConfig+0x11c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d007      	beq.n	8004f1c <TIM_Base_SetConfig+0x40>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a3b      	ldr	r2, [pc, #236]	; (8004ffc <TIM_Base_SetConfig+0x120>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_Base_SetConfig+0x40>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a3a      	ldr	r2, [pc, #232]	; (8005000 <TIM_Base_SetConfig+0x124>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d108      	bne.n	8004f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a2f      	ldr	r2, [pc, #188]	; (8004ff0 <TIM_Base_SetConfig+0x114>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d02b      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3c:	d027      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a2c      	ldr	r2, [pc, #176]	; (8004ff4 <TIM_Base_SetConfig+0x118>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d023      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a2b      	ldr	r2, [pc, #172]	; (8004ff8 <TIM_Base_SetConfig+0x11c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d01f      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a2a      	ldr	r2, [pc, #168]	; (8004ffc <TIM_Base_SetConfig+0x120>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d01b      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a29      	ldr	r2, [pc, #164]	; (8005000 <TIM_Base_SetConfig+0x124>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d017      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a28      	ldr	r2, [pc, #160]	; (8005004 <TIM_Base_SetConfig+0x128>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d013      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a27      	ldr	r2, [pc, #156]	; (8005008 <TIM_Base_SetConfig+0x12c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00f      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a26      	ldr	r2, [pc, #152]	; (800500c <TIM_Base_SetConfig+0x130>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00b      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a25      	ldr	r2, [pc, #148]	; (8005010 <TIM_Base_SetConfig+0x134>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d007      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a24      	ldr	r2, [pc, #144]	; (8005014 <TIM_Base_SetConfig+0x138>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d003      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a23      	ldr	r2, [pc, #140]	; (8005018 <TIM_Base_SetConfig+0x13c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d108      	bne.n	8004fa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a0a      	ldr	r2, [pc, #40]	; (8004ff0 <TIM_Base_SetConfig+0x114>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d003      	beq.n	8004fd4 <TIM_Base_SetConfig+0xf8>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a0c      	ldr	r2, [pc, #48]	; (8005000 <TIM_Base_SetConfig+0x124>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d103      	bne.n	8004fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	615a      	str	r2, [r3, #20]
}
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	40000400 	.word	0x40000400
 8004ff8:	40000800 	.word	0x40000800
 8004ffc:	40000c00 	.word	0x40000c00
 8005000:	40010400 	.word	0x40010400
 8005004:	40014000 	.word	0x40014000
 8005008:	40014400 	.word	0x40014400
 800500c:	40014800 	.word	0x40014800
 8005010:	40001800 	.word	0x40001800
 8005014:	40001c00 	.word	0x40001c00
 8005018:	40002000 	.word	0x40002000

0800501c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f023 0201 	bic.w	r2, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0303 	bic.w	r3, r3, #3
 8005052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f023 0302 	bic.w	r3, r3, #2
 8005064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a20      	ldr	r2, [pc, #128]	; (80050f4 <TIM_OC1_SetConfig+0xd8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_OC1_SetConfig+0x64>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a1f      	ldr	r2, [pc, #124]	; (80050f8 <TIM_OC1_SetConfig+0xdc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d10c      	bne.n	800509a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f023 0308 	bic.w	r3, r3, #8
 8005086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f023 0304 	bic.w	r3, r3, #4
 8005098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a15      	ldr	r2, [pc, #84]	; (80050f4 <TIM_OC1_SetConfig+0xd8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d003      	beq.n	80050aa <TIM_OC1_SetConfig+0x8e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a14      	ldr	r2, [pc, #80]	; (80050f8 <TIM_OC1_SetConfig+0xdc>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d111      	bne.n	80050ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	621a      	str	r2, [r3, #32]
}
 80050e8:	bf00      	nop
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	40010000 	.word	0x40010000
 80050f8:	40010400 	.word	0x40010400

080050fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f023 0210 	bic.w	r2, r3, #16
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f023 0320 	bic.w	r3, r3, #32
 8005146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a22      	ldr	r2, [pc, #136]	; (80051e0 <TIM_OC2_SetConfig+0xe4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d003      	beq.n	8005164 <TIM_OC2_SetConfig+0x68>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a21      	ldr	r2, [pc, #132]	; (80051e4 <TIM_OC2_SetConfig+0xe8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d10d      	bne.n	8005180 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800517e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a17      	ldr	r2, [pc, #92]	; (80051e0 <TIM_OC2_SetConfig+0xe4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d003      	beq.n	8005190 <TIM_OC2_SetConfig+0x94>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a16      	ldr	r2, [pc, #88]	; (80051e4 <TIM_OC2_SetConfig+0xe8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d113      	bne.n	80051b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800519e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	621a      	str	r2, [r3, #32]
}
 80051d2:	bf00      	nop
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40010400 	.word	0x40010400

080051e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0303 	bic.w	r3, r3, #3
 800521e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	021b      	lsls	r3, r3, #8
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a21      	ldr	r2, [pc, #132]	; (80052c8 <TIM_OC3_SetConfig+0xe0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d003      	beq.n	800524e <TIM_OC3_SetConfig+0x66>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a20      	ldr	r2, [pc, #128]	; (80052cc <TIM_OC3_SetConfig+0xe4>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d10d      	bne.n	800526a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005254:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	021b      	lsls	r3, r3, #8
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a16      	ldr	r2, [pc, #88]	; (80052c8 <TIM_OC3_SetConfig+0xe0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d003      	beq.n	800527a <TIM_OC3_SetConfig+0x92>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a15      	ldr	r2, [pc, #84]	; (80052cc <TIM_OC3_SetConfig+0xe4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d113      	bne.n	80052a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	621a      	str	r2, [r3, #32]
}
 80052bc:	bf00      	nop
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40010400 	.word	0x40010400

080052d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800531a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	031b      	lsls	r3, r3, #12
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a12      	ldr	r2, [pc, #72]	; (8005374 <TIM_OC4_SetConfig+0xa4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d003      	beq.n	8005338 <TIM_OC4_SetConfig+0x68>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a11      	ldr	r2, [pc, #68]	; (8005378 <TIM_OC4_SetConfig+0xa8>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d109      	bne.n	800534c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800533e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	019b      	lsls	r3, r3, #6
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	621a      	str	r2, [r3, #32]
}
 8005366:	bf00      	nop
 8005368:	371c      	adds	r7, #28
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40010000 	.word	0x40010000
 8005378:	40010400 	.word	0x40010400

0800537c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f023 0201 	bic.w	r2, r3, #1
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f023 030a 	bic.w	r3, r3, #10
 80053b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053da:	b480      	push	{r7}
 80053dc:	b087      	sub	sp, #28
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f023 0210 	bic.w	r2, r3, #16
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005404:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	031b      	lsls	r3, r3, #12
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4313      	orrs	r3, r2
 800540e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005416:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800543a:	b480      	push	{r7}
 800543c:	b085      	sub	sp, #20
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	f043 0307 	orr.w	r3, r3, #7
 800545c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	609a      	str	r2, [r3, #8]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800548a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	021a      	lsls	r2, r3, #8
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	431a      	orrs	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4313      	orrs	r3, r2
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	609a      	str	r2, [r3, #8]
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f003 031f 	and.w	r3, r3, #31
 80054c2:	2201      	movs	r2, #1
 80054c4:	fa02 f303 	lsl.w	r3, r2, r3
 80054c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a1a      	ldr	r2, [r3, #32]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	43db      	mvns	r3, r3
 80054d2:	401a      	ands	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1a      	ldr	r2, [r3, #32]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	fa01 f303 	lsl.w	r3, r1, r3
 80054e8:	431a      	orrs	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	621a      	str	r2, [r3, #32]
}
 80054ee:	bf00      	nop
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
	...

080054fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005510:	2302      	movs	r3, #2
 8005512:	e05a      	b.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a21      	ldr	r2, [pc, #132]	; (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d022      	beq.n	800559e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005560:	d01d      	beq.n	800559e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a1d      	ldr	r2, [pc, #116]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d018      	beq.n	800559e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a1b      	ldr	r2, [pc, #108]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d013      	beq.n	800559e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1a      	ldr	r2, [pc, #104]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00e      	beq.n	800559e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a18      	ldr	r2, [pc, #96]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d009      	beq.n	800559e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a17      	ldr	r2, [pc, #92]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d004      	beq.n	800559e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a15      	ldr	r2, [pc, #84]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d10c      	bne.n	80055b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	40010000 	.word	0x40010000
 80055dc:	40000400 	.word	0x40000400
 80055e0:	40000800 	.word	0x40000800
 80055e4:	40000c00 	.word	0x40000c00
 80055e8:	40010400 	.word	0x40010400
 80055ec:	40014000 	.word	0x40014000
 80055f0:	40001800 	.word	0x40001800

080055f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055f4:	b084      	sub	sp, #16
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	f107 001c 	add.w	r0, r7, #28
 8005602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	2b01      	cmp	r3, #1
 800560a:	d122      	bne.n	8005652 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005610:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005636:	2b01      	cmp	r3, #1
 8005638:	d105      	bne.n	8005646 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f001 fac6 	bl	8006bd8 <USB_CoreReset>
 800564c:	4603      	mov	r3, r0
 800564e:	73fb      	strb	r3, [r7, #15]
 8005650:	e01a      	b.n	8005688 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f001 faba 	bl	8006bd8 <USB_CoreReset>
 8005664:	4603      	mov	r3, r0
 8005666:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	639a      	str	r2, [r3, #56]	; 0x38
 800567a:	e005      	b.n	8005688 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	2b01      	cmp	r3, #1
 800568c:	d10b      	bne.n	80056a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f043 0206 	orr.w	r2, r3, #6
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f043 0220 	orr.w	r2, r3, #32
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056b2:	b004      	add	sp, #16
 80056b4:	4770      	bx	lr
	...

080056b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	4613      	mov	r3, r2
 80056c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d165      	bne.n	8005798 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4a41      	ldr	r2, [pc, #260]	; (80057d4 <USB_SetTurnaroundTime+0x11c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d906      	bls.n	80056e2 <USB_SetTurnaroundTime+0x2a>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4a40      	ldr	r2, [pc, #256]	; (80057d8 <USB_SetTurnaroundTime+0x120>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d802      	bhi.n	80056e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80056dc:	230f      	movs	r3, #15
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	e062      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4a3c      	ldr	r2, [pc, #240]	; (80057d8 <USB_SetTurnaroundTime+0x120>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d906      	bls.n	80056f8 <USB_SetTurnaroundTime+0x40>
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4a3b      	ldr	r2, [pc, #236]	; (80057dc <USB_SetTurnaroundTime+0x124>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d802      	bhi.n	80056f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80056f2:	230e      	movs	r3, #14
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	e057      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4a38      	ldr	r2, [pc, #224]	; (80057dc <USB_SetTurnaroundTime+0x124>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d906      	bls.n	800570e <USB_SetTurnaroundTime+0x56>
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	4a37      	ldr	r2, [pc, #220]	; (80057e0 <USB_SetTurnaroundTime+0x128>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d802      	bhi.n	800570e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005708:	230d      	movs	r3, #13
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e04c      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	4a33      	ldr	r2, [pc, #204]	; (80057e0 <USB_SetTurnaroundTime+0x128>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d906      	bls.n	8005724 <USB_SetTurnaroundTime+0x6c>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4a32      	ldr	r2, [pc, #200]	; (80057e4 <USB_SetTurnaroundTime+0x12c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d802      	bhi.n	8005724 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800571e:	230c      	movs	r3, #12
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	e041      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4a2f      	ldr	r2, [pc, #188]	; (80057e4 <USB_SetTurnaroundTime+0x12c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d906      	bls.n	800573a <USB_SetTurnaroundTime+0x82>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4a2e      	ldr	r2, [pc, #184]	; (80057e8 <USB_SetTurnaroundTime+0x130>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d802      	bhi.n	800573a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005734:	230b      	movs	r3, #11
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	e036      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4a2a      	ldr	r2, [pc, #168]	; (80057e8 <USB_SetTurnaroundTime+0x130>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d906      	bls.n	8005750 <USB_SetTurnaroundTime+0x98>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	4a29      	ldr	r2, [pc, #164]	; (80057ec <USB_SetTurnaroundTime+0x134>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d802      	bhi.n	8005750 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800574a:	230a      	movs	r3, #10
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	e02b      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4a26      	ldr	r2, [pc, #152]	; (80057ec <USB_SetTurnaroundTime+0x134>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d906      	bls.n	8005766 <USB_SetTurnaroundTime+0xae>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4a25      	ldr	r2, [pc, #148]	; (80057f0 <USB_SetTurnaroundTime+0x138>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d802      	bhi.n	8005766 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005760:	2309      	movs	r3, #9
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	e020      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	4a21      	ldr	r2, [pc, #132]	; (80057f0 <USB_SetTurnaroundTime+0x138>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d906      	bls.n	800577c <USB_SetTurnaroundTime+0xc4>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4a20      	ldr	r2, [pc, #128]	; (80057f4 <USB_SetTurnaroundTime+0x13c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d802      	bhi.n	800577c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005776:	2308      	movs	r3, #8
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	e015      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4a1d      	ldr	r2, [pc, #116]	; (80057f4 <USB_SetTurnaroundTime+0x13c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d906      	bls.n	8005792 <USB_SetTurnaroundTime+0xda>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4a1c      	ldr	r2, [pc, #112]	; (80057f8 <USB_SetTurnaroundTime+0x140>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d802      	bhi.n	8005792 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800578c:	2307      	movs	r3, #7
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	e00a      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005792:	2306      	movs	r3, #6
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e007      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d102      	bne.n	80057a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800579e:	2309      	movs	r3, #9
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	e001      	b.n	80057a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80057a4:	2309      	movs	r3, #9
 80057a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	029b      	lsls	r3, r3, #10
 80057bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80057c0:	431a      	orrs	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	371c      	adds	r7, #28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	00d8acbf 	.word	0x00d8acbf
 80057d8:	00e4e1bf 	.word	0x00e4e1bf
 80057dc:	00f423ff 	.word	0x00f423ff
 80057e0:	0106737f 	.word	0x0106737f
 80057e4:	011a499f 	.word	0x011a499f
 80057e8:	01312cff 	.word	0x01312cff
 80057ec:	014ca43f 	.word	0x014ca43f
 80057f0:	016e35ff 	.word	0x016e35ff
 80057f4:	01a6ab1f 	.word	0x01a6ab1f
 80057f8:	01e847ff 	.word	0x01e847ff

080057fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f043 0201 	orr.w	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f023 0201 	bic.w	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d106      	bne.n	800586c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	60da      	str	r2, [r3, #12]
 800586a:	e00b      	b.n	8005884 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	60da      	str	r2, [r3, #12]
 800587e:	e001      	b.n	8005884 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e003      	b.n	800588c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005884:	2032      	movs	r0, #50	; 0x32
 8005886:	f7fc fb1d 	bl	8001ec4 <HAL_Delay>

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005894:	b084      	sub	sp, #16
 8005896:	b580      	push	{r7, lr}
 8005898:	b086      	sub	sp, #24
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058ae:	2300      	movs	r3, #0
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	e009      	b.n	80058c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	3340      	adds	r3, #64	; 0x40
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	2200      	movs	r2, #0
 80058c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	3301      	adds	r3, #1
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	2b0e      	cmp	r3, #14
 80058cc:	d9f2      	bls.n	80058b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d11c      	bne.n	800590e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e2:	f043 0302 	orr.w	r3, r3, #2
 80058e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	639a      	str	r2, [r3, #56]	; 0x38
 800590c:	e00b      	b.n	8005926 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800592c:	461a      	mov	r2, r3
 800592e:	2300      	movs	r3, #0
 8005930:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005938:	4619      	mov	r1, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005940:	461a      	mov	r2, r3
 8005942:	680b      	ldr	r3, [r1, #0]
 8005944:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005948:	2b01      	cmp	r3, #1
 800594a:	d10c      	bne.n	8005966 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005952:	2100      	movs	r1, #0
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f949 	bl	8005bec <USB_SetDevSpeed>
 800595a:	e008      	b.n	800596e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800595c:	2101      	movs	r1, #1
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f944 	bl	8005bec <USB_SetDevSpeed>
 8005964:	e003      	b.n	800596e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005966:	2103      	movs	r1, #3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f93f 	bl	8005bec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800596e:	2110      	movs	r1, #16
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f8f3 	bl	8005b5c <USB_FlushTxFifo>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f911 	bl	8005ba8 <USB_FlushRxFifo>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005996:	461a      	mov	r2, r3
 8005998:	2300      	movs	r3, #0
 800599a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a2:	461a      	mov	r2, r3
 80059a4:	2300      	movs	r3, #0
 80059a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ae:	461a      	mov	r2, r3
 80059b0:	2300      	movs	r3, #0
 80059b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059b4:	2300      	movs	r3, #0
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	e043      	b.n	8005a42 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059d0:	d118      	bne.n	8005a04 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10a      	bne.n	80059ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e4:	461a      	mov	r2, r3
 80059e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059ea:	6013      	str	r3, [r2, #0]
 80059ec:	e013      	b.n	8005a16 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fa:	461a      	mov	r2, r3
 80059fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	e008      	b.n	8005a16 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a10:	461a      	mov	r2, r3
 8005a12:	2300      	movs	r3, #0
 8005a14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a22:	461a      	mov	r2, r3
 8005a24:	2300      	movs	r3, #0
 8005a26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	461a      	mov	r2, r3
 8005a36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d3b7      	bcc.n	80059ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	e043      	b.n	8005ad8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a66:	d118      	bne.n	8005a9a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10a      	bne.n	8005a84 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	e013      	b.n	8005aac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a90:	461a      	mov	r2, r3
 8005a92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	e008      	b.n	8005aac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab8:	461a      	mov	r2, r3
 8005aba:	2300      	movs	r3, #0
 8005abc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aca:	461a      	mov	r2, r3
 8005acc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ad0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	613b      	str	r3, [r7, #16]
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d3b7      	bcc.n	8005a50 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005af2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d105      	bne.n	8005b14 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	f043 0210 	orr.w	r2, r3, #16
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699a      	ldr	r2, [r3, #24]
 8005b18:	4b0f      	ldr	r3, [pc, #60]	; (8005b58 <USB_DevInit+0x2c4>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d005      	beq.n	8005b32 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	f043 0208 	orr.w	r2, r3, #8
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d107      	bne.n	8005b48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b40:	f043 0304 	orr.w	r3, r3, #4
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b54:	b004      	add	sp, #16
 8005b56:	4770      	bx	lr
 8005b58:	803c3800 	.word	0x803c3800

08005b5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	019b      	lsls	r3, r3, #6
 8005b6e:	f043 0220 	orr.w	r2, r3, #32
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <USB_FlushTxFifo+0x48>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d901      	bls.n	8005b88 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e006      	b.n	8005b96 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f003 0320 	and.w	r3, r3, #32
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d0f0      	beq.n	8005b76 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	00030d40 	.word	0x00030d40

08005ba8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2210      	movs	r2, #16
 8005bb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4a09      	ldr	r2, [pc, #36]	; (8005be8 <USB_FlushRxFifo+0x40>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d901      	bls.n	8005bcc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e006      	b.n	8005bda <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f003 0310 	and.w	r3, r3, #16
 8005bd4:	2b10      	cmp	r3, #16
 8005bd6:	d0f0      	beq.n	8005bba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	00030d40 	.word	0x00030d40

08005bec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b087      	sub	sp, #28
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0306 	and.w	r3, r3, #6
 8005c36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d102      	bne.n	8005c44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	75fb      	strb	r3, [r7, #23]
 8005c42:	e00a      	b.n	8005c5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d002      	beq.n	8005c50 <USB_GetDevSpeed+0x32>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b06      	cmp	r3, #6
 8005c4e:	d102      	bne.n	8005c56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c50:	2302      	movs	r3, #2
 8005c52:	75fb      	strb	r3, [r7, #23]
 8005c54:	e001      	b.n	8005c5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c56:	230f      	movs	r3, #15
 8005c58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	371c      	adds	r7, #28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	785b      	ldrb	r3, [r3, #1]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d13a      	bne.n	8005cfa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	2101      	movs	r1, #1
 8005c96:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	68f9      	ldr	r1, [r7, #12]
 8005c9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d155      	bne.n	8005d68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	78db      	ldrb	r3, [r3, #3]
 8005cd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	059b      	lsls	r3, r3, #22
 8005cde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	e036      	b.n	8005d68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d00:	69da      	ldr	r2, [r3, #28]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d10:	041b      	lsls	r3, r3, #16
 8005d12:	68f9      	ldr	r1, [r7, #12]
 8005d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d11a      	bne.n	8005d68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	78db      	ldrb	r3, [r3, #3]
 8005d4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d4e:	430b      	orrs	r3, r1
 8005d50:	4313      	orrs	r3, r2
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	0151      	lsls	r1, r2, #5
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	440a      	add	r2, r1
 8005d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
	...

08005d78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	785b      	ldrb	r3, [r3, #1]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d161      	bne.n	8005e58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005daa:	d11f      	bne.n	8005dec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	0151      	lsls	r1, r2, #5
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	440a      	add	r2, r1
 8005de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	43db      	mvns	r3, r3
 8005e06:	68f9      	ldr	r1, [r7, #12]
 8005e08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	f003 030f 	and.w	r3, r3, #15
 8005e20:	2101      	movs	r1, #1
 8005e22:	fa01 f303 	lsl.w	r3, r1, r3
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	68f9      	ldr	r1, [r7, #12]
 8005e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e30:	4013      	ands	r3, r2
 8005e32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	0159      	lsls	r1, r3, #5
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	440b      	add	r3, r1
 8005e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4b35      	ldr	r3, [pc, #212]	; (8005f28 <USB_DeactivateEndpoint+0x1b0>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	600b      	str	r3, [r1, #0]
 8005e56:	e060      	b.n	8005f1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e6e:	d11f      	bne.n	8005eb0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	0151      	lsls	r1, r2, #5
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	440a      	add	r2, r1
 8005e86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec6:	041b      	lsls	r3, r3, #16
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	68f9      	ldr	r1, [r7, #12]
 8005ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eda:	69da      	ldr	r2, [r3, #28]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eea:	041b      	lsls	r3, r3, #16
 8005eec:	43db      	mvns	r3, r3
 8005eee:	68f9      	ldr	r1, [r7, #12]
 8005ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	0159      	lsls	r1, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	440b      	add	r3, r1
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f12:	4619      	mov	r1, r3
 8005f14:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <USB_DeactivateEndpoint+0x1b4>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	ec337800 	.word	0xec337800
 8005f2c:	eff37800 	.word	0xeff37800

08005f30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	; 0x28
 8005f34:	af02      	add	r7, sp, #8
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	785b      	ldrb	r3, [r3, #1]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	f040 815c 	bne.w	800620a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d132      	bne.n	8005fc0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	0151      	lsls	r1, r2, #5
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	440a      	add	r2, r1
 8005f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	0151      	lsls	r1, r2, #5
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	440a      	add	r2, r1
 8005fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb8:	0cdb      	lsrs	r3, r3, #19
 8005fba:	04db      	lsls	r3, r3, #19
 8005fbc:	6113      	str	r3, [r2, #16]
 8005fbe:	e074      	b.n	80060aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	0151      	lsls	r1, r2, #5
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fda:	0cdb      	lsrs	r3, r3, #19
 8005fdc:	04db      	lsls	r3, r3, #19
 8005fde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ffe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006002:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006010:	691a      	ldr	r2, [r3, #16]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	6959      	ldr	r1, [r3, #20]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	440b      	add	r3, r1
 800601c:	1e59      	subs	r1, r3, #1
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	fbb1 f3f3 	udiv	r3, r1, r3
 8006026:	04d9      	lsls	r1, r3, #19
 8006028:	4b9d      	ldr	r3, [pc, #628]	; (80062a0 <USB_EPStartXfer+0x370>)
 800602a:	400b      	ands	r3, r1
 800602c:	69b9      	ldr	r1, [r7, #24]
 800602e:	0148      	lsls	r0, r1, #5
 8006030:	69f9      	ldr	r1, [r7, #28]
 8006032:	4401      	add	r1, r0
 8006034:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006038:	4313      	orrs	r3, r2
 800603a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006048:	691a      	ldr	r2, [r3, #16]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006052:	69b9      	ldr	r1, [r7, #24]
 8006054:	0148      	lsls	r0, r1, #5
 8006056:	69f9      	ldr	r1, [r7, #28]
 8006058:	4401      	add	r1, r0
 800605a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800605e:	4313      	orrs	r3, r2
 8006060:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	78db      	ldrb	r3, [r3, #3]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d11f      	bne.n	80060aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	0151      	lsls	r1, r2, #5
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	440a      	add	r2, r1
 8006080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006084:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006088:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	0151      	lsls	r1, r2, #5
 800609c:	69fa      	ldr	r2, [r7, #28]
 800609e:	440a      	add	r2, r1
 80060a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80060aa:	79fb      	ldrb	r3, [r7, #7]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d14b      	bne.n	8006148 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d009      	beq.n	80060cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c4:	461a      	mov	r2, r3
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	78db      	ldrb	r3, [r3, #3]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d128      	bne.n	8006126 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d110      	bne.n	8006106 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	69fa      	ldr	r2, [r7, #28]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	e00f      	b.n	8006126 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	0151      	lsls	r1, r2, #5
 8006118:	69fa      	ldr	r2, [r7, #28]
 800611a:	440a      	add	r2, r1
 800611c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006124:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	0151      	lsls	r1, r2, #5
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	440a      	add	r2, r1
 800613c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006140:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	e12f      	b.n	80063a8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	69fa      	ldr	r2, [r7, #28]
 800615c:	440a      	add	r2, r1
 800615e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006162:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006166:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	78db      	ldrb	r3, [r3, #3]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d015      	beq.n	800619c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8117 	beq.w	80063a8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	2101      	movs	r1, #1
 800618c:	fa01 f303 	lsl.w	r3, r1, r3
 8006190:	69f9      	ldr	r1, [r7, #28]
 8006192:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006196:	4313      	orrs	r3, r2
 8006198:	634b      	str	r3, [r1, #52]	; 0x34
 800619a:	e105      	b.n	80063a8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d110      	bne.n	80061ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	0151      	lsls	r1, r2, #5
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	440a      	add	r2, r1
 80061c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	e00f      	b.n	80061ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	68d9      	ldr	r1, [r3, #12]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	781a      	ldrb	r2, [r3, #0]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	b298      	uxth	r0, r3
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	4603      	mov	r3, r0
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 fa2b 	bl	800665e <USB_WritePacket>
 8006208:	e0ce      	b.n	80063a8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006224:	0cdb      	lsrs	r3, r3, #19
 8006226:	04db      	lsls	r3, r3, #19
 8006228:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006244:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006248:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800624c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d126      	bne.n	80062a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800626c:	69b9      	ldr	r1, [r7, #24]
 800626e:	0148      	lsls	r0, r1, #5
 8006270:	69f9      	ldr	r1, [r7, #28]
 8006272:	4401      	add	r1, r0
 8006274:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006278:	4313      	orrs	r3, r2
 800627a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	0151      	lsls	r1, r2, #5
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	440a      	add	r2, r1
 8006292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800629a:	6113      	str	r3, [r2, #16]
 800629c:	e036      	b.n	800630c <USB_EPStartXfer+0x3dc>
 800629e:	bf00      	nop
 80062a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	695a      	ldr	r2, [r3, #20]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	4413      	add	r3, r2
 80062ae:	1e5a      	subs	r2, r3, #1
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	8afb      	ldrh	r3, [r7, #22]
 80062ca:	04d9      	lsls	r1, r3, #19
 80062cc:	4b39      	ldr	r3, [pc, #228]	; (80063b4 <USB_EPStartXfer+0x484>)
 80062ce:	400b      	ands	r3, r1
 80062d0:	69b9      	ldr	r1, [r7, #24]
 80062d2:	0148      	lsls	r0, r1, #5
 80062d4:	69f9      	ldr	r1, [r7, #28]
 80062d6:	4401      	add	r1, r0
 80062d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062dc:	4313      	orrs	r3, r2
 80062de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ec:	691a      	ldr	r2, [r3, #16]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	8af9      	ldrh	r1, [r7, #22]
 80062f4:	fb01 f303 	mul.w	r3, r1, r3
 80062f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062fc:	69b9      	ldr	r1, [r7, #24]
 80062fe:	0148      	lsls	r0, r1, #5
 8006300:	69f9      	ldr	r1, [r7, #28]
 8006302:	4401      	add	r1, r0
 8006304:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006308:	4313      	orrs	r3, r2
 800630a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800630c:	79fb      	ldrb	r3, [r7, #7]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d10d      	bne.n	800632e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	68d9      	ldr	r1, [r3, #12]
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632a:	460a      	mov	r2, r1
 800632c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	78db      	ldrb	r3, [r3, #3]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d128      	bne.n	8006388 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006342:	2b00      	cmp	r3, #0
 8006344:	d110      	bne.n	8006368 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	0151      	lsls	r1, r2, #5
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	440a      	add	r2, r1
 800635c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006360:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e00f      	b.n	8006388 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	0151      	lsls	r1, r2, #5
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	440a      	add	r2, r1
 800637e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006386:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	440a      	add	r2, r1
 800639e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3720      	adds	r7, #32
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	1ff80000 	.word	0x1ff80000

080063b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	4613      	mov	r3, r2
 80063c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	f040 80cd 	bne.w	8006574 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d132      	bne.n	8006448 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	0151      	lsls	r1, r2, #5
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	440a      	add	r2, r1
 80063f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006400:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006404:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	0151      	lsls	r1, r2, #5
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	440a      	add	r2, r1
 800641c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006424:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	0151      	lsls	r1, r2, #5
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	440a      	add	r2, r1
 800643c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006440:	0cdb      	lsrs	r3, r3, #19
 8006442:	04db      	lsls	r3, r3, #19
 8006444:	6113      	str	r3, [r2, #16]
 8006446:	e04e      	b.n	80064e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	0151      	lsls	r1, r2, #5
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	440a      	add	r2, r1
 800645e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006462:	0cdb      	lsrs	r3, r3, #19
 8006464:	04db      	lsls	r3, r3, #19
 8006466:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	0151      	lsls	r1, r2, #5
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	440a      	add	r2, r1
 800647e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006482:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006486:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800648a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	695a      	ldr	r2, [r3, #20]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	429a      	cmp	r2, r3
 8006496:	d903      	bls.n	80064a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064cc:	691a      	ldr	r2, [r3, #16]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064d6:	6939      	ldr	r1, [r7, #16]
 80064d8:	0148      	lsls	r0, r1, #5
 80064da:	6979      	ldr	r1, [r7, #20]
 80064dc:	4401      	add	r1, r0
 80064de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064e2:	4313      	orrs	r3, r2
 80064e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d11e      	bne.n	800652a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d009      	beq.n	8006508 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006500:	461a      	mov	r2, r3
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	440a      	add	r2, r1
 800651e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006522:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	e092      	b.n	8006650 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	0151      	lsls	r1, r2, #5
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	440a      	add	r2, r1
 8006540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006544:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006548:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d07e      	beq.n	8006650 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	2101      	movs	r1, #1
 8006564:	fa01 f303 	lsl.w	r3, r1, r3
 8006568:	6979      	ldr	r1, [r7, #20]
 800656a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800656e:	4313      	orrs	r3, r2
 8006570:	634b      	str	r3, [r1, #52]	; 0x34
 8006572:	e06d      	b.n	8006650 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	440a      	add	r2, r1
 800658a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800658e:	0cdb      	lsrs	r3, r3, #19
 8006590:	04db      	lsls	r3, r3, #19
 8006592:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065b6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	0151      	lsls	r1, r2, #5
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	440a      	add	r2, r1
 80065de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f4:	691a      	ldr	r2, [r3, #16]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065fe:	6939      	ldr	r1, [r7, #16]
 8006600:	0148      	lsls	r0, r1, #5
 8006602:	6979      	ldr	r1, [r7, #20]
 8006604:	4401      	add	r1, r0
 8006606:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800660a:	4313      	orrs	r3, r2
 800660c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d10d      	bne.n	8006630 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d009      	beq.n	8006630 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	68d9      	ldr	r1, [r3, #12]
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662c:	460a      	mov	r2, r1
 800662e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	0151      	lsls	r1, r2, #5
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	440a      	add	r2, r1
 8006646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800664a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800664e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800665e:	b480      	push	{r7}
 8006660:	b089      	sub	sp, #36	; 0x24
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	4611      	mov	r1, r2
 800666a:	461a      	mov	r2, r3
 800666c:	460b      	mov	r3, r1
 800666e:	71fb      	strb	r3, [r7, #7]
 8006670:	4613      	mov	r3, r2
 8006672:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800667c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006680:	2b00      	cmp	r3, #0
 8006682:	d11a      	bne.n	80066ba <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006684:	88bb      	ldrh	r3, [r7, #4]
 8006686:	3303      	adds	r3, #3
 8006688:	089b      	lsrs	r3, r3, #2
 800668a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800668c:	2300      	movs	r3, #0
 800668e:	61bb      	str	r3, [r7, #24]
 8006690:	e00f      	b.n	80066b2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006692:	79fb      	ldrb	r3, [r7, #7]
 8006694:	031a      	lsls	r2, r3, #12
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	4413      	add	r3, r2
 800669a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800669e:	461a      	mov	r2, r3
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	3304      	adds	r3, #4
 80066aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	3301      	adds	r3, #1
 80066b0:	61bb      	str	r3, [r7, #24]
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d3eb      	bcc.n	8006692 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3724      	adds	r7, #36	; 0x24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b089      	sub	sp, #36	; 0x24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	4613      	mov	r3, r2
 80066d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80066de:	88fb      	ldrh	r3, [r7, #6]
 80066e0:	3303      	adds	r3, #3
 80066e2:	089b      	lsrs	r3, r3, #2
 80066e4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80066e6:	2300      	movs	r3, #0
 80066e8:	61bb      	str	r3, [r7, #24]
 80066ea:	e00b      	b.n	8006704 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	3304      	adds	r3, #4
 80066fc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	3301      	adds	r3, #1
 8006702:	61bb      	str	r3, [r7, #24]
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	429a      	cmp	r2, r3
 800670a:	d3ef      	bcc.n	80066ec <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800670c:	69fb      	ldr	r3, [r7, #28]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3724      	adds	r7, #36	; 0x24
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800671a:	b480      	push	{r7}
 800671c:	b085      	sub	sp, #20
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d12c      	bne.n	8006790 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	db12      	blt.n	800676e <USB_EPSetStall+0x54>
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00f      	beq.n	800676e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	0151      	lsls	r1, r2, #5
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	440a      	add	r2, r1
 8006764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006768:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800676c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	0151      	lsls	r1, r2, #5
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	440a      	add	r2, r1
 8006784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006788:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	e02b      	b.n	80067e8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	db12      	blt.n	80067c8 <USB_EPSetStall+0xae>
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00f      	beq.n	80067c8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067c6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	0151      	lsls	r1, r2, #5
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	440a      	add	r2, r1
 80067de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b085      	sub	sp, #20
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	785b      	ldrb	r3, [r3, #1]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d128      	bne.n	8006864 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	0151      	lsls	r1, r2, #5
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	440a      	add	r2, r1
 8006828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800682c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006830:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	78db      	ldrb	r3, [r3, #3]
 8006836:	2b03      	cmp	r3, #3
 8006838:	d003      	beq.n	8006842 <USB_EPClearStall+0x4c>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	78db      	ldrb	r3, [r3, #3]
 800683e:	2b02      	cmp	r3, #2
 8006840:	d138      	bne.n	80068b4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	0151      	lsls	r1, r2, #5
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	440a      	add	r2, r1
 8006858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800685c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	e027      	b.n	80068b4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	0151      	lsls	r1, r2, #5
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	440a      	add	r2, r1
 800687a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800687e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006882:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	78db      	ldrb	r3, [r3, #3]
 8006888:	2b03      	cmp	r3, #3
 800688a:	d003      	beq.n	8006894 <USB_EPClearStall+0x9e>
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	78db      	ldrb	r3, [r3, #3]
 8006890:	2b02      	cmp	r3, #2
 8006892:	d10f      	bne.n	80068b4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	0151      	lsls	r1, r2, #5
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	440a      	add	r2, r1
 80068aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b085      	sub	sp, #20
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	460b      	mov	r3, r1
 80068cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80068e4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	78fb      	ldrb	r3, [r7, #3]
 80068f0:	011b      	lsls	r3, r3, #4
 80068f2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80068f6:	68f9      	ldr	r1, [r7, #12]
 80068f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068fc:	4313      	orrs	r3, r2
 80068fe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800690e:	b480      	push	{r7}
 8006910:	b085      	sub	sp, #20
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006928:	f023 0303 	bic.w	r3, r3, #3
 800692c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800693c:	f023 0302 	bic.w	r3, r3, #2
 8006940:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800696a:	f023 0303 	bic.w	r3, r3, #3
 800696e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800697e:	f043 0302 	orr.w	r3, r3, #2
 8006982:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006992:	b480      	push	{r7}
 8006994:	b085      	sub	sp, #20
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	4013      	ands	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80069aa:	68fb      	ldr	r3, [r7, #12]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	4013      	ands	r3, r2
 80069da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	0c1b      	lsrs	r3, r3, #16
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	b29b      	uxth	r3, r3
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	f003 030f 	and.w	r3, r3, #15
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	fa22 f303 	lsr.w	r3, r2, r3
 8006a8c:	01db      	lsls	r3, r3, #7
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	371c      	adds	r7, #28
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006af2:	f023 0307 	bic.w	r3, r3, #7
 8006af6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
	...

08006b1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	460b      	mov	r3, r1
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	333c      	adds	r3, #60	; 0x3c
 8006b32:	3304      	adds	r3, #4
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	4a26      	ldr	r2, [pc, #152]	; (8006bd4 <USB_EP0_OutStart+0xb8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d90a      	bls.n	8006b56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b50:	d101      	bne.n	8006b56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	e037      	b.n	8006bc6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	2300      	movs	r3, #0
 8006b60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b84:	f043 0318 	orr.w	r3, r3, #24
 8006b88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b98:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006b9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006b9e:	7afb      	ldrb	r3, [r7, #11]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d10f      	bne.n	8006bc4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006baa:	461a      	mov	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bbe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006bc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	4f54300a 	.word	0x4f54300a

08006bd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	3301      	adds	r3, #1
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4a13      	ldr	r2, [pc, #76]	; (8006c3c <USB_CoreReset+0x64>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d901      	bls.n	8006bf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e01b      	b.n	8006c2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	daf2      	bge.n	8006be4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	f043 0201 	orr.w	r2, r3, #1
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3301      	adds	r3, #1
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4a09      	ldr	r2, [pc, #36]	; (8006c3c <USB_CoreReset+0x64>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d901      	bls.n	8006c20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e006      	b.n	8006c2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d0f0      	beq.n	8006c0e <USB_CoreReset+0x36>

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	00030d40 	.word	0x00030d40

08006c40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c50:	f002 f92c 	bl	8008eac <malloc>
 8006c54:	4603      	mov	r3, r0
 8006c56:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d105      	bne.n	8006c6a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006c66:	2302      	movs	r3, #2
 8006c68:	e066      	b.n	8006d38 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	7c1b      	ldrb	r3, [r3, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d119      	bne.n	8006cae <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c7e:	2202      	movs	r2, #2
 8006c80:	2181      	movs	r1, #129	; 0x81
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 ff99 	bl	8008bba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c92:	2202      	movs	r2, #2
 8006c94:	2101      	movs	r1, #1
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f001 ff8f 	bl	8008bba <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2210      	movs	r2, #16
 8006ca8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006cac:	e016      	b.n	8006cdc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006cae:	2340      	movs	r3, #64	; 0x40
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	2181      	movs	r1, #129	; 0x81
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 ff80 	bl	8008bba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006cc0:	2340      	movs	r3, #64	; 0x40
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 ff77 	bl	8008bba <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2210      	movs	r2, #16
 8006cd8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006cdc:	2308      	movs	r3, #8
 8006cde:	2203      	movs	r2, #3
 8006ce0:	2182      	movs	r1, #130	; 0x82
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 ff69 	bl	8008bba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	7c1b      	ldrb	r3, [r3, #16]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d109      	bne.n	8006d26 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f002 f83a 	bl	8008d98 <USBD_LL_PrepareReceive>
 8006d24:	e007      	b.n	8006d36 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d2c:	2340      	movs	r3, #64	; 0x40
 8006d2e:	2101      	movs	r1, #1
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f002 f831 	bl	8008d98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d50:	2181      	movs	r1, #129	; 0x81
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 ff57 	bl	8008c06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d5e:	2101      	movs	r1, #1
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 ff50 	bl	8008c06 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d6e:	2182      	movs	r1, #130	; 0x82
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 ff48 	bl	8008c06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00e      	beq.n	8006dae <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006da0:	4618      	mov	r0, r3
 8006da2:	f002 f88b 	bl	8008ebc <free>
    pdev->pClassData = NULL;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dc8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d03a      	beq.n	8006e58 <USBD_CDC_Setup+0xa0>
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	f040 8097 	bne.w	8006f16 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	88db      	ldrh	r3, [r3, #6]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d029      	beq.n	8006e44 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	b25b      	sxtb	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	da11      	bge.n	8006e1e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006e06:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	88d2      	ldrh	r2, [r2, #6]
 8006e0c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006e0e:	6939      	ldr	r1, [r7, #16]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	88db      	ldrh	r3, [r3, #6]
 8006e14:	461a      	mov	r2, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 fa9d 	bl	8008356 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006e1c:	e082      	b.n	8006f24 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	785a      	ldrb	r2, [r3, #1]
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	88db      	ldrh	r3, [r3, #6]
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006e34:	6939      	ldr	r1, [r7, #16]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	88db      	ldrh	r3, [r3, #6]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 fab6 	bl	80083ae <USBD_CtlPrepareRx>
    break;
 8006e42:	e06f      	b.n	8006f24 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	7850      	ldrb	r0, [r2, #1]
 8006e50:	2200      	movs	r2, #0
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	4798      	blx	r3
    break;
 8006e56:	e065      	b.n	8006f24 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	785b      	ldrb	r3, [r3, #1]
 8006e5c:	2b0b      	cmp	r3, #11
 8006e5e:	d84f      	bhi.n	8006f00 <USBD_CDC_Setup+0x148>
 8006e60:	a201      	add	r2, pc, #4	; (adr r2, 8006e68 <USBD_CDC_Setup+0xb0>)
 8006e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e66:	bf00      	nop
 8006e68:	08006e99 	.word	0x08006e99
 8006e6c:	08006f0f 	.word	0x08006f0f
 8006e70:	08006f01 	.word	0x08006f01
 8006e74:	08006f01 	.word	0x08006f01
 8006e78:	08006f01 	.word	0x08006f01
 8006e7c:	08006f01 	.word	0x08006f01
 8006e80:	08006f01 	.word	0x08006f01
 8006e84:	08006f01 	.word	0x08006f01
 8006e88:	08006f01 	.word	0x08006f01
 8006e8c:	08006f01 	.word	0x08006f01
 8006e90:	08006ec1 	.word	0x08006ec1
 8006e94:	08006ee9 	.word	0x08006ee9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d107      	bne.n	8006eb2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ea2:	f107 030c 	add.w	r3, r7, #12
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 fa53 	bl	8008356 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006eb0:	e030      	b.n	8006f14 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f001 f9dd 	bl	8008274 <USBD_CtlError>
        ret = USBD_FAIL;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ebe:	e029      	b.n	8006f14 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d107      	bne.n	8006eda <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006eca:	f107 030f 	add.w	r3, r7, #15
 8006ece:	2201      	movs	r2, #1
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 fa3f 	bl	8008356 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006ed8:	e01c      	b.n	8006f14 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 f9c9 	bl	8008274 <USBD_CtlError>
        ret = USBD_FAIL;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee6:	e015      	b.n	8006f14 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	d00f      	beq.n	8006f12 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 f9bd 	bl	8008274 <USBD_CtlError>
        ret = USBD_FAIL;
 8006efa:	2303      	movs	r3, #3
 8006efc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006efe:	e008      	b.n	8006f12 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f001 f9b6 	bl	8008274 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f0c:	e002      	b.n	8006f14 <USBD_CDC_Setup+0x15c>
      break;
 8006f0e:	bf00      	nop
 8006f10:	e008      	b.n	8006f24 <USBD_CDC_Setup+0x16c>
      break;
 8006f12:	bf00      	nop
    }
    break;
 8006f14:	e006      	b.n	8006f24 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f001 f9ab 	bl	8008274 <USBD_CtlError>
    ret = USBD_FAIL;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	75fb      	strb	r3, [r7, #23]
    break;
 8006f22:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop

08006f30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e049      	b.n	8006fe6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f5a:	78fa      	ldrb	r2, [r7, #3]
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	3318      	adds	r3, #24
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d029      	beq.n	8006fc4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f70:	78fa      	ldrb	r2, [r7, #3]
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	4613      	mov	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	3318      	adds	r3, #24
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	78f9      	ldrb	r1, [r7, #3]
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	460b      	mov	r3, r1
 8006f88:	00db      	lsls	r3, r3, #3
 8006f8a:	1a5b      	subs	r3, r3, r1
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4403      	add	r3, r0
 8006f90:	3344      	adds	r3, #68	; 0x44
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f98:	fb03 f301 	mul.w	r3, r3, r1
 8006f9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d110      	bne.n	8006fc4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006fa2:	78fa      	ldrb	r2, [r7, #3]
 8006fa4:	6879      	ldr	r1, [r7, #4]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	440b      	add	r3, r1
 8006fb0:	3318      	adds	r3, #24
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006fb6:	78f9      	ldrb	r1, [r7, #3]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	2200      	movs	r2, #0
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 feca 	bl	8008d56 <USBD_LL_Transmit>
 8006fc2:	e00f      	b.n	8006fe4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006fe0:	78fa      	ldrb	r2, [r7, #3]
 8006fe2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007000:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800700c:	2303      	movs	r3, #3
 800700e:	e015      	b.n	800703c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 fee0 	bl	8008dda <USBD_LL_GetRxDataSize>
 800701a:	4602      	mov	r2, r0
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007036:	4611      	mov	r1, r2
 8007038:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007052:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d015      	beq.n	800708a <USBD_CDC_EP0_RxReady+0x46>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007064:	2bff      	cmp	r3, #255	; 0xff
 8007066:	d010      	beq.n	800708a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007076:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800707e:	b292      	uxth	r2, r2
 8007080:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	22ff      	movs	r2, #255	; 0xff
 8007086:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2243      	movs	r2, #67	; 0x43
 80070a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80070a2:	4b03      	ldr	r3, [pc, #12]	; (80070b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	20000094 	.word	0x20000094

080070b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2243      	movs	r2, #67	; 0x43
 80070c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80070c2:	4b03      	ldr	r3, [pc, #12]	; (80070d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	20000050 	.word	0x20000050

080070d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2243      	movs	r2, #67	; 0x43
 80070e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80070e2:	4b03      	ldr	r3, [pc, #12]	; (80070f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	200000d8 	.word	0x200000d8

080070f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	220a      	movs	r2, #10
 8007100:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007102:	4b03      	ldr	r3, [pc, #12]	; (8007110 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007104:	4618      	mov	r0, r3
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	2000000c 	.word	0x2000000c

08007114 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007124:	2303      	movs	r3, #3
 8007126:	e004      	b.n	8007132 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800713e:	b480      	push	{r7}
 8007140:	b087      	sub	sp, #28
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007150:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	371c      	adds	r7, #28
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007180:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3714      	adds	r7, #20
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071a6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80071a8:	2301      	movs	r3, #1
 80071aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e01a      	b.n	80071f0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d114      	bne.n	80071ee <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80071e2:	2181      	movs	r1, #129	; 0x81
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f001 fdb6 	bl	8008d56 <USBD_LL_Transmit>

    ret = USBD_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007206:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007212:	2303      	movs	r3, #3
 8007214:	e016      	b.n	8007244 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	7c1b      	ldrb	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d109      	bne.n	8007232 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007228:	2101      	movs	r1, #1
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 fdb4 	bl	8008d98 <USBD_LL_PrepareReceive>
 8007230:	e007      	b.n	8007242 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007238:	2340      	movs	r3, #64	; 0x40
 800723a:	2101      	movs	r1, #1
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 fdab 	bl	8008d98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007260:	2303      	movs	r3, #3
 8007262:	e025      	b.n	80072b0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	79fa      	ldrb	r2, [r7, #7]
 80072a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f001 fc21 	bl	8008aec <USBD_LL_Init>
 80072aa:	4603      	mov	r3, r0
 80072ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e010      	b.n	80072f2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e0:	f107 020e 	add.w	r2, r7, #14
 80072e4:	4610      	mov	r0, r2
 80072e6:	4798      	blx	r3
 80072e8:	4602      	mov	r2, r0
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f001 fc3e 	bl	8008b84 <USBD_LL_Start>
 8007308:	4603      	mov	r3, r0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007312:	b480      	push	{r7}
 8007314:	b083      	sub	sp, #12
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007334:	2303      	movs	r3, #3
 8007336:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800733e:	2b00      	cmp	r3, #0
 8007340:	d009      	beq.n	8007356 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	78fa      	ldrb	r2, [r7, #3]
 800734c:	4611      	mov	r1, r2
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	4798      	blx	r3
 8007352:	4603      	mov	r3, r0
 8007354:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007356:	7bfb      	ldrb	r3, [r7, #15]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007372:	2b00      	cmp	r3, #0
 8007374:	d007      	beq.n	8007386 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	78fa      	ldrb	r2, [r7, #3]
 8007380:	4611      	mov	r1, r2
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	4798      	blx	r3
  }

  return USBD_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 ff2c 	bl	8008200 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80073b6:	461a      	mov	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073c4:	f003 031f 	and.w	r3, r3, #31
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d00e      	beq.n	80073ea <USBD_LL_SetupStage+0x5a>
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d302      	bcc.n	80073d6 <USBD_LL_SetupStage+0x46>
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d014      	beq.n	80073fe <USBD_LL_SetupStage+0x6e>
 80073d4:	e01d      	b.n	8007412 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fa18 	bl	8007814 <USBD_StdDevReq>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73fb      	strb	r3, [r7, #15]
      break;
 80073e8:	e020      	b.n	800742c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fa7c 	bl	80078f0 <USBD_StdItfReq>
 80073f8:	4603      	mov	r3, r0
 80073fa:	73fb      	strb	r3, [r7, #15]
      break;
 80073fc:	e016      	b.n	800742c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007404:	4619      	mov	r1, r3
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fab8 	bl	800797c <USBD_StdEPReq>
 800740c:	4603      	mov	r3, r0
 800740e:	73fb      	strb	r3, [r7, #15]
      break;
 8007410:	e00c      	b.n	800742c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007418:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800741c:	b2db      	uxtb	r3, r3
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f001 fc0f 	bl	8008c44 <USBD_LL_StallEP>
 8007426:	4603      	mov	r3, r0
 8007428:	73fb      	strb	r3, [r7, #15]
      break;
 800742a:	bf00      	nop
  }

  return ret;
 800742c:	7bfb      	ldrb	r3, [r7, #15]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b086      	sub	sp, #24
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	460b      	mov	r3, r1
 8007440:	607a      	str	r2, [r7, #4]
 8007442:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007444:	7afb      	ldrb	r3, [r7, #11]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d137      	bne.n	80074ba <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007450:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007458:	2b03      	cmp	r3, #3
 800745a:	d14a      	bne.n	80074f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	429a      	cmp	r2, r3
 8007466:	d913      	bls.n	8007490 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	1ad2      	subs	r2, r2, r3
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	4293      	cmp	r3, r2
 8007480:	bf28      	it	cs
 8007482:	4613      	movcs	r3, r2
 8007484:	461a      	mov	r2, r3
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 ffad 	bl	80083e8 <USBD_CtlContinueRx>
 800748e:	e030      	b.n	80074f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00a      	beq.n	80074b2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d105      	bne.n	80074b2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 ffa9 	bl	800840a <USBD_CtlSendStatus>
 80074b8:	e01b      	b.n	80074f2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d013      	beq.n	80074ee <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d10e      	bne.n	80074ee <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	7afa      	ldrb	r2, [r7, #11]
 80074da:	4611      	mov	r1, r2
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	4798      	blx	r3
 80074e0:	4603      	mov	r3, r0
 80074e2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
 80074ec:	e002      	b.n	80074f4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e000      	b.n	80074f4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	460b      	mov	r3, r1
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800750a:	7afb      	ldrb	r3, [r7, #11]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d16a      	bne.n	80075e6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3314      	adds	r3, #20
 8007514:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800751c:	2b02      	cmp	r3, #2
 800751e:	d155      	bne.n	80075cc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	429a      	cmp	r2, r3
 800752a:	d914      	bls.n	8007556 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	1ad2      	subs	r2, r2, r3
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	461a      	mov	r2, r3
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 ff22 	bl	800838c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007548:	2300      	movs	r3, #0
 800754a:	2200      	movs	r2, #0
 800754c:	2100      	movs	r1, #0
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f001 fc22 	bl	8008d98 <USBD_LL_PrepareReceive>
 8007554:	e03a      	b.n	80075cc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	429a      	cmp	r2, r3
 8007560:	d11c      	bne.n	800759c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800756a:	429a      	cmp	r2, r3
 800756c:	d316      	bcc.n	800759c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007578:	429a      	cmp	r2, r3
 800757a:	d20f      	bcs.n	800759c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800757c:	2200      	movs	r2, #0
 800757e:	2100      	movs	r1, #0
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 ff03 	bl	800838c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800758e:	2300      	movs	r3, #0
 8007590:	2200      	movs	r2, #0
 8007592:	2100      	movs	r1, #0
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f001 fbff 	bl	8008d98 <USBD_LL_PrepareReceive>
 800759a:	e017      	b.n	80075cc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00a      	beq.n	80075be <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d105      	bne.n	80075be <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80075be:	2180      	movs	r1, #128	; 0x80
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f001 fb3f 	bl	8008c44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 ff32 	bl	8008430 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d123      	bne.n	800761e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f7ff fe9b 	bl	8007312 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075e4:	e01b      	b.n	800761e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d013      	beq.n	800761a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d10e      	bne.n	800761a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	7afa      	ldrb	r2, [r7, #11]
 8007606:	4611      	mov	r1, r2
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	4798      	blx	r3
 800760c:	4603      	mov	r3, r0
 800760e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	e002      	b.n	8007620 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800761a:	2303      	movs	r3, #3
 800761c:	e000      	b.n	8007620 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007654:	2b00      	cmp	r3, #0
 8007656:	d009      	beq.n	800766c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	6852      	ldr	r2, [r2, #4]
 8007664:	b2d2      	uxtb	r2, r2
 8007666:	4611      	mov	r1, r2
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800766c:	2340      	movs	r3, #64	; 0x40
 800766e:	2200      	movs	r2, #0
 8007670:	2100      	movs	r1, #0
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 faa1 	bl	8008bba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2240      	movs	r2, #64	; 0x40
 8007684:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007688:	2340      	movs	r3, #64	; 0x40
 800768a:	2200      	movs	r2, #0
 800768c:	2180      	movs	r1, #128	; 0x80
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 fa93 	bl	8008bba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2240      	movs	r2, #64	; 0x40
 800769e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	460b      	mov	r3, r1
 80076b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	78fa      	ldrb	r2, [r7, #3]
 80076ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2204      	movs	r2, #4
 80076e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007702:	2b04      	cmp	r3, #4
 8007704:	d105      	bne.n	8007712 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800772e:	2b03      	cmp	r3, #3
 8007730:	d10b      	bne.n	800774a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d005      	beq.n	800774a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b082      	sub	sp, #8
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d009      	beq.n	80077cc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	6852      	ldr	r2, [r2, #4]
 80077c4:	b2d2      	uxtb	r2, r2
 80077c6:	4611      	mov	r1, r2
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	4798      	blx	r3
  }

  return USBD_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b087      	sub	sp, #28
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	3301      	adds	r3, #1
 80077ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077f4:	8a3b      	ldrh	r3, [r7, #16]
 80077f6:	021b      	lsls	r3, r3, #8
 80077f8:	b21a      	sxth	r2, r3
 80077fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077fe:	4313      	orrs	r3, r2
 8007800:	b21b      	sxth	r3, r3
 8007802:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007804:	89fb      	ldrh	r3, [r7, #14]
}
 8007806:	4618      	mov	r0, r3
 8007808:	371c      	adds	r7, #28
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
	...

08007814 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800782a:	2b20      	cmp	r3, #32
 800782c:	d004      	beq.n	8007838 <USBD_StdDevReq+0x24>
 800782e:	2b40      	cmp	r3, #64	; 0x40
 8007830:	d002      	beq.n	8007838 <USBD_StdDevReq+0x24>
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00a      	beq.n	800784c <USBD_StdDevReq+0x38>
 8007836:	e050      	b.n	80078da <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	4798      	blx	r3
 8007846:	4603      	mov	r3, r0
 8007848:	73fb      	strb	r3, [r7, #15]
    break;
 800784a:	e04b      	b.n	80078e4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	785b      	ldrb	r3, [r3, #1]
 8007850:	2b09      	cmp	r3, #9
 8007852:	d83c      	bhi.n	80078ce <USBD_StdDevReq+0xba>
 8007854:	a201      	add	r2, pc, #4	; (adr r2, 800785c <USBD_StdDevReq+0x48>)
 8007856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785a:	bf00      	nop
 800785c:	080078b1 	.word	0x080078b1
 8007860:	080078c5 	.word	0x080078c5
 8007864:	080078cf 	.word	0x080078cf
 8007868:	080078bb 	.word	0x080078bb
 800786c:	080078cf 	.word	0x080078cf
 8007870:	0800788f 	.word	0x0800788f
 8007874:	08007885 	.word	0x08007885
 8007878:	080078cf 	.word	0x080078cf
 800787c:	080078a7 	.word	0x080078a7
 8007880:	08007899 	.word	0x08007899
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f9ce 	bl	8007c28 <USBD_GetDescriptor>
      break;
 800788c:	e024      	b.n	80078d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fb33 	bl	8007efc <USBD_SetAddress>
      break;
 8007896:	e01f      	b.n	80078d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fb70 	bl	8007f80 <USBD_SetConfig>
 80078a0:	4603      	mov	r3, r0
 80078a2:	73fb      	strb	r3, [r7, #15]
      break;
 80078a4:	e018      	b.n	80078d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fc0d 	bl	80080c8 <USBD_GetConfig>
      break;
 80078ae:	e013      	b.n	80078d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fc3c 	bl	8008130 <USBD_GetStatus>
      break;
 80078b8:	e00e      	b.n	80078d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fc6a 	bl	8008196 <USBD_SetFeature>
      break;
 80078c2:	e009      	b.n	80078d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fc79 	bl	80081be <USBD_ClrFeature>
      break;
 80078cc:	e004      	b.n	80078d8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fccf 	bl	8008274 <USBD_CtlError>
      break;
 80078d6:	bf00      	nop
    }
    break;
 80078d8:	e004      	b.n	80078e4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fcc9 	bl	8008274 <USBD_CtlError>
    break;
 80078e2:	bf00      	nop
  }

  return ret;
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop

080078f0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007906:	2b20      	cmp	r3, #32
 8007908:	d003      	beq.n	8007912 <USBD_StdItfReq+0x22>
 800790a:	2b40      	cmp	r3, #64	; 0x40
 800790c:	d001      	beq.n	8007912 <USBD_StdItfReq+0x22>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d12a      	bne.n	8007968 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007918:	3b01      	subs	r3, #1
 800791a:	2b02      	cmp	r3, #2
 800791c:	d81d      	bhi.n	800795a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	889b      	ldrh	r3, [r3, #4]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b01      	cmp	r3, #1
 8007926:	d813      	bhi.n	8007950 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
 8007936:	4603      	mov	r3, r0
 8007938:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	88db      	ldrh	r3, [r3, #6]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d110      	bne.n	8007964 <USBD_StdItfReq+0x74>
 8007942:	7bfb      	ldrb	r3, [r7, #15]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10d      	bne.n	8007964 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fd5e 	bl	800840a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800794e:	e009      	b.n	8007964 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fc8e 	bl	8008274 <USBD_CtlError>
      break;
 8007958:	e004      	b.n	8007964 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fc89 	bl	8008274 <USBD_CtlError>
      break;
 8007962:	e000      	b.n	8007966 <USBD_StdItfReq+0x76>
      break;
 8007964:	bf00      	nop
    }
    break;
 8007966:	e004      	b.n	8007972 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fc82 	bl	8008274 <USBD_CtlError>
    break;
 8007970:	bf00      	nop
  }

  return ret;
 8007972:	7bfb      	ldrb	r3, [r7, #15]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	889b      	ldrh	r3, [r3, #4]
 800798e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007998:	2b20      	cmp	r3, #32
 800799a:	d004      	beq.n	80079a6 <USBD_StdEPReq+0x2a>
 800799c:	2b40      	cmp	r3, #64	; 0x40
 800799e:	d002      	beq.n	80079a6 <USBD_StdEPReq+0x2a>
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00a      	beq.n	80079ba <USBD_StdEPReq+0x3e>
 80079a4:	e135      	b.n	8007c12 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	6839      	ldr	r1, [r7, #0]
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	4798      	blx	r3
 80079b4:	4603      	mov	r3, r0
 80079b6:	73fb      	strb	r3, [r7, #15]
    break;
 80079b8:	e130      	b.n	8007c1c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	785b      	ldrb	r3, [r3, #1]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d03e      	beq.n	8007a40 <USBD_StdEPReq+0xc4>
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d002      	beq.n	80079cc <USBD_StdEPReq+0x50>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d077      	beq.n	8007aba <USBD_StdEPReq+0x13e>
 80079ca:	e11c      	b.n	8007c06 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d002      	beq.n	80079dc <USBD_StdEPReq+0x60>
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d015      	beq.n	8007a06 <USBD_StdEPReq+0x8a>
 80079da:	e02b      	b.n	8007a34 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00c      	beq.n	80079fc <USBD_StdEPReq+0x80>
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	2b80      	cmp	r3, #128	; 0x80
 80079e6:	d009      	beq.n	80079fc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 f929 	bl	8008c44 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079f2:	2180      	movs	r1, #128	; 0x80
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f001 f925 	bl	8008c44 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80079fa:	e020      	b.n	8007a3e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fc38 	bl	8008274 <USBD_CtlError>
        break;
 8007a04:	e01b      	b.n	8007a3e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	885b      	ldrh	r3, [r3, #2]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10e      	bne.n	8007a2c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00b      	beq.n	8007a2c <USBD_StdEPReq+0xb0>
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
 8007a16:	2b80      	cmp	r3, #128	; 0x80
 8007a18:	d008      	beq.n	8007a2c <USBD_StdEPReq+0xb0>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	88db      	ldrh	r3, [r3, #6]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d104      	bne.n	8007a2c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 f90c 	bl	8008c44 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fcec 	bl	800840a <USBD_CtlSendStatus>

        break;
 8007a32:	e004      	b.n	8007a3e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fc1c 	bl	8008274 <USBD_CtlError>
        break;
 8007a3c:	bf00      	nop
      }
      break;
 8007a3e:	e0e7      	b.n	8007c10 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d002      	beq.n	8007a50 <USBD_StdEPReq+0xd4>
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d015      	beq.n	8007a7a <USBD_StdEPReq+0xfe>
 8007a4e:	e02d      	b.n	8007aac <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00c      	beq.n	8007a70 <USBD_StdEPReq+0xf4>
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	2b80      	cmp	r3, #128	; 0x80
 8007a5a:	d009      	beq.n	8007a70 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 f8ef 	bl	8008c44 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a66:	2180      	movs	r1, #128	; 0x80
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 f8eb 	bl	8008c44 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007a6e:	e023      	b.n	8007ab8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fbfe 	bl	8008274 <USBD_CtlError>
        break;
 8007a78:	e01e      	b.n	8007ab8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	885b      	ldrh	r3, [r3, #2]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d119      	bne.n	8007ab6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d004      	beq.n	8007a96 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 f8f6 	bl	8008c82 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fcb7 	bl	800840a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	4798      	blx	r3
        }
        break;
 8007aaa:	e004      	b.n	8007ab6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fbe0 	bl	8008274 <USBD_CtlError>
        break;
 8007ab4:	e000      	b.n	8007ab8 <USBD_StdEPReq+0x13c>
        break;
 8007ab6:	bf00      	nop
      }
      break;
 8007ab8:	e0aa      	b.n	8007c10 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d002      	beq.n	8007aca <USBD_StdEPReq+0x14e>
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d032      	beq.n	8007b2e <USBD_StdEPReq+0x1b2>
 8007ac8:	e097      	b.n	8007bfa <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d007      	beq.n	8007ae0 <USBD_StdEPReq+0x164>
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	2b80      	cmp	r3, #128	; 0x80
 8007ad4:	d004      	beq.n	8007ae0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fbcb 	bl	8008274 <USBD_CtlError>
          break;
 8007ade:	e091      	b.n	8007c04 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	da0b      	bge.n	8007b00 <USBD_StdEPReq+0x184>
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aee:	4613      	mov	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4413      	add	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	3310      	adds	r3, #16
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	4413      	add	r3, r2
 8007afc:	3304      	adds	r3, #4
 8007afe:	e00b      	b.n	8007b18 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	4413      	add	r3, r2
 8007b16:	3304      	adds	r3, #4
 8007b18:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2202      	movs	r2, #2
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fc15 	bl	8008356 <USBD_CtlSendData>
        break;
 8007b2c:	e06a      	b.n	8007c04 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007b2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	da11      	bge.n	8007b5a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	f003 020f 	and.w	r2, r3, #15
 8007b3c:	6879      	ldr	r1, [r7, #4]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	440b      	add	r3, r1
 8007b48:	3324      	adds	r3, #36	; 0x24
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d117      	bne.n	8007b80 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fb8e 	bl	8008274 <USBD_CtlError>
            break;
 8007b58:	e054      	b.n	8007c04 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	f003 020f 	and.w	r2, r3, #15
 8007b60:	6879      	ldr	r1, [r7, #4]
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	440b      	add	r3, r1
 8007b6c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d104      	bne.n	8007b80 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fb7b 	bl	8008274 <USBD_CtlError>
            break;
 8007b7e:	e041      	b.n	8007c04 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	da0b      	bge.n	8007ba0 <USBD_StdEPReq+0x224>
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b8e:	4613      	mov	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	3310      	adds	r3, #16
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	e00b      	b.n	8007bb8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <USBD_StdEPReq+0x24a>
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
 8007bc2:	2b80      	cmp	r3, #128	; 0x80
 8007bc4:	d103      	bne.n	8007bce <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	e00e      	b.n	8007bec <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007bce:	7bbb      	ldrb	r3, [r7, #14]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f001 f874 	bl	8008cc0 <USBD_LL_IsStallEP>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2201      	movs	r2, #1
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	e002      	b.n	8007bec <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fbaf 	bl	8008356 <USBD_CtlSendData>
          break;
 8007bf8:	e004      	b.n	8007c04 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fb39 	bl	8008274 <USBD_CtlError>
        break;
 8007c02:	bf00      	nop
      }
      break;
 8007c04:	e004      	b.n	8007c10 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fb33 	bl	8008274 <USBD_CtlError>
      break;
 8007c0e:	bf00      	nop
    }
    break;
 8007c10:	e004      	b.n	8007c1c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fb2d 	bl	8008274 <USBD_CtlError>
    break;
 8007c1a:	bf00      	nop
  }

  return ret;
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c32:	2300      	movs	r3, #0
 8007c34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	885b      	ldrh	r3, [r3, #2]
 8007c42:	0a1b      	lsrs	r3, r3, #8
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	3b01      	subs	r3, #1
 8007c48:	2b06      	cmp	r3, #6
 8007c4a:	f200 8128 	bhi.w	8007e9e <USBD_GetDescriptor+0x276>
 8007c4e:	a201      	add	r2, pc, #4	; (adr r2, 8007c54 <USBD_GetDescriptor+0x2c>)
 8007c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c54:	08007c71 	.word	0x08007c71
 8007c58:	08007c89 	.word	0x08007c89
 8007c5c:	08007cc9 	.word	0x08007cc9
 8007c60:	08007e9f 	.word	0x08007e9f
 8007c64:	08007e9f 	.word	0x08007e9f
 8007c68:	08007e3f 	.word	0x08007e3f
 8007c6c:	08007e6b 	.word	0x08007e6b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	7c12      	ldrb	r2, [r2, #16]
 8007c7c:	f107 0108 	add.w	r1, r7, #8
 8007c80:	4610      	mov	r0, r2
 8007c82:	4798      	blx	r3
 8007c84:	60f8      	str	r0, [r7, #12]
    break;
 8007c86:	e112      	b.n	8007eae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	7c1b      	ldrb	r3, [r3, #16]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10d      	bne.n	8007cac <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c98:	f107 0208 	add.w	r2, r7, #8
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
 8007ca0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007caa:	e100      	b.n	8007eae <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	f107 0208 	add.w	r2, r7, #8
 8007cb8:	4610      	mov	r0, r2
 8007cba:	4798      	blx	r3
 8007cbc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	701a      	strb	r2, [r3, #0]
    break;
 8007cc6:	e0f2      	b.n	8007eae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	885b      	ldrh	r3, [r3, #2]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b05      	cmp	r3, #5
 8007cd0:	f200 80ac 	bhi.w	8007e2c <USBD_GetDescriptor+0x204>
 8007cd4:	a201      	add	r2, pc, #4	; (adr r2, 8007cdc <USBD_GetDescriptor+0xb4>)
 8007cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cda:	bf00      	nop
 8007cdc:	08007cf5 	.word	0x08007cf5
 8007ce0:	08007d29 	.word	0x08007d29
 8007ce4:	08007d5d 	.word	0x08007d5d
 8007ce8:	08007d91 	.word	0x08007d91
 8007cec:	08007dc5 	.word	0x08007dc5
 8007cf0:	08007df9 	.word	0x08007df9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7c12      	ldrb	r2, [r2, #16]
 8007d0c:	f107 0108 	add.w	r1, r7, #8
 8007d10:	4610      	mov	r0, r2
 8007d12:	4798      	blx	r3
 8007d14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d16:	e091      	b.n	8007e3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 faaa 	bl	8008274 <USBD_CtlError>
        err++;
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	3301      	adds	r3, #1
 8007d24:	72fb      	strb	r3, [r7, #11]
      break;
 8007d26:	e089      	b.n	8007e3c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00b      	beq.n	8007d4c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	7c12      	ldrb	r2, [r2, #16]
 8007d40:	f107 0108 	add.w	r1, r7, #8
 8007d44:	4610      	mov	r0, r2
 8007d46:	4798      	blx	r3
 8007d48:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d4a:	e077      	b.n	8007e3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fa90 	bl	8008274 <USBD_CtlError>
        err++;
 8007d54:	7afb      	ldrb	r3, [r7, #11]
 8007d56:	3301      	adds	r3, #1
 8007d58:	72fb      	strb	r3, [r7, #11]
      break;
 8007d5a:	e06f      	b.n	8007e3c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00b      	beq.n	8007d80 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	7c12      	ldrb	r2, [r2, #16]
 8007d74:	f107 0108 	add.w	r1, r7, #8
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d7e:	e05d      	b.n	8007e3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fa76 	bl	8008274 <USBD_CtlError>
        err++;
 8007d88:	7afb      	ldrb	r3, [r7, #11]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d8e:	e055      	b.n	8007e3c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00b      	beq.n	8007db4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	7c12      	ldrb	r2, [r2, #16]
 8007da8:	f107 0108 	add.w	r1, r7, #8
 8007dac:	4610      	mov	r0, r2
 8007dae:	4798      	blx	r3
 8007db0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007db2:	e043      	b.n	8007e3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fa5c 	bl	8008274 <USBD_CtlError>
        err++;
 8007dbc:	7afb      	ldrb	r3, [r7, #11]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	72fb      	strb	r3, [r7, #11]
      break;
 8007dc2:	e03b      	b.n	8007e3c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00b      	beq.n	8007de8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	7c12      	ldrb	r2, [r2, #16]
 8007ddc:	f107 0108 	add.w	r1, r7, #8
 8007de0:	4610      	mov	r0, r2
 8007de2:	4798      	blx	r3
 8007de4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007de6:	e029      	b.n	8007e3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa42 	bl	8008274 <USBD_CtlError>
        err++;
 8007df0:	7afb      	ldrb	r3, [r7, #11]
 8007df2:	3301      	adds	r3, #1
 8007df4:	72fb      	strb	r3, [r7, #11]
      break;
 8007df6:	e021      	b.n	8007e3c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00b      	beq.n	8007e1c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	7c12      	ldrb	r2, [r2, #16]
 8007e10:	f107 0108 	add.w	r1, r7, #8
 8007e14:	4610      	mov	r0, r2
 8007e16:	4798      	blx	r3
 8007e18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e1a:	e00f      	b.n	8007e3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fa28 	bl	8008274 <USBD_CtlError>
        err++;
 8007e24:	7afb      	ldrb	r3, [r7, #11]
 8007e26:	3301      	adds	r3, #1
 8007e28:	72fb      	strb	r3, [r7, #11]
      break;
 8007e2a:	e007      	b.n	8007e3c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fa20 	bl	8008274 <USBD_CtlError>
      err++;
 8007e34:	7afb      	ldrb	r3, [r7, #11]
 8007e36:	3301      	adds	r3, #1
 8007e38:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007e3a:	bf00      	nop
    }
    break;
 8007e3c:	e037      	b.n	8007eae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	7c1b      	ldrb	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d109      	bne.n	8007e5a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4e:	f107 0208 	add.w	r2, r7, #8
 8007e52:	4610      	mov	r0, r2
 8007e54:	4798      	blx	r3
 8007e56:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007e58:	e029      	b.n	8007eae <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fa09 	bl	8008274 <USBD_CtlError>
      err++;
 8007e62:	7afb      	ldrb	r3, [r7, #11]
 8007e64:	3301      	adds	r3, #1
 8007e66:	72fb      	strb	r3, [r7, #11]
    break;
 8007e68:	e021      	b.n	8007eae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	7c1b      	ldrb	r3, [r3, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10d      	bne.n	8007e8e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7a:	f107 0208 	add.w	r2, r7, #8
 8007e7e:	4610      	mov	r0, r2
 8007e80:	4798      	blx	r3
 8007e82:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3301      	adds	r3, #1
 8007e88:	2207      	movs	r2, #7
 8007e8a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007e8c:	e00f      	b.n	8007eae <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f9ef 	bl	8008274 <USBD_CtlError>
      err++;
 8007e96:	7afb      	ldrb	r3, [r7, #11]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	72fb      	strb	r3, [r7, #11]
    break;
 8007e9c:	e007      	b.n	8007eae <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f9e7 	bl	8008274 <USBD_CtlError>
    err++;
 8007ea6:	7afb      	ldrb	r3, [r7, #11]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	72fb      	strb	r3, [r7, #11]
    break;
 8007eac:	bf00      	nop
  }

  if (err != 0U)
 8007eae:	7afb      	ldrb	r3, [r7, #11]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d11e      	bne.n	8007ef2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	88db      	ldrh	r3, [r3, #6]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d016      	beq.n	8007eea <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007ebc:	893b      	ldrh	r3, [r7, #8]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00e      	beq.n	8007ee0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	88da      	ldrh	r2, [r3, #6]
 8007ec6:	893b      	ldrh	r3, [r7, #8]
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	bf28      	it	cs
 8007ecc:	4613      	movcs	r3, r2
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ed2:	893b      	ldrh	r3, [r7, #8]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	68f9      	ldr	r1, [r7, #12]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fa3c 	bl	8008356 <USBD_CtlSendData>
 8007ede:	e009      	b.n	8007ef4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f9c6 	bl	8008274 <USBD_CtlError>
 8007ee8:	e004      	b.n	8007ef4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fa8d 	bl	800840a <USBD_CtlSendStatus>
 8007ef0:	e000      	b.n	8007ef4 <USBD_GetDescriptor+0x2cc>
    return;
 8007ef2:	bf00      	nop
    }
  }
}
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop

08007efc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	889b      	ldrh	r3, [r3, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d130      	bne.n	8007f70 <USBD_SetAddress+0x74>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	88db      	ldrh	r3, [r3, #6]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d12c      	bne.n	8007f70 <USBD_SetAddress+0x74>
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	885b      	ldrh	r3, [r3, #2]
 8007f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8007f1c:	d828      	bhi.n	8007f70 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	885b      	ldrh	r3, [r3, #2]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f30:	2b03      	cmp	r3, #3
 8007f32:	d104      	bne.n	8007f3e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f99c 	bl	8008274 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3c:	e01c      	b.n	8007f78 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	7bfa      	ldrb	r2, [r7, #15]
 8007f42:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fee4 	bl	8008d18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fa5a 	bl	800840a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d004      	beq.n	8007f66 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f64:	e008      	b.n	8007f78 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f6e:	e003      	b.n	8007f78 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f97e 	bl	8008274 <USBD_CtlError>
  }
}
 8007f78:	bf00      	nop
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	885b      	ldrh	r3, [r3, #2]
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	4b4b      	ldr	r3, [pc, #300]	; (80080c4 <USBD_SetConfig+0x144>)
 8007f96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f98:	4b4a      	ldr	r3, [pc, #296]	; (80080c4 <USBD_SetConfig+0x144>)
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d905      	bls.n	8007fac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f966 	bl	8008274 <USBD_CtlError>
    return USBD_FAIL;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e087      	b.n	80080bc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d002      	beq.n	8007fbc <USBD_SetConfig+0x3c>
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d025      	beq.n	8008006 <USBD_SetConfig+0x86>
 8007fba:	e071      	b.n	80080a0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007fbc:	4b41      	ldr	r3, [pc, #260]	; (80080c4 <USBD_SetConfig+0x144>)
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01c      	beq.n	8007ffe <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007fc4:	4b3f      	ldr	r3, [pc, #252]	; (80080c4 <USBD_SetConfig+0x144>)
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fce:	4b3d      	ldr	r3, [pc, #244]	; (80080c4 <USBD_SetConfig+0x144>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7ff f9a7 	bl	8007328 <USBD_SetClassConfig>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d004      	beq.n	8007fee <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f944 	bl	8008274 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007fec:	e065      	b.n	80080ba <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fa0b 	bl	800840a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2203      	movs	r2, #3
 8007ff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007ffc:	e05d      	b.n	80080ba <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fa03 	bl	800840a <USBD_CtlSendStatus>
    break;
 8008004:	e059      	b.n	80080ba <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008006:	4b2f      	ldr	r3, [pc, #188]	; (80080c4 <USBD_SetConfig+0x144>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d112      	bne.n	8008034 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2202      	movs	r2, #2
 8008012:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008016:	4b2b      	ldr	r3, [pc, #172]	; (80080c4 <USBD_SetConfig+0x144>)
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008020:	4b28      	ldr	r3, [pc, #160]	; (80080c4 <USBD_SetConfig+0x144>)
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff f99a 	bl	8007360 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f9ec 	bl	800840a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008032:	e042      	b.n	80080ba <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008034:	4b23      	ldr	r3, [pc, #140]	; (80080c4 <USBD_SetConfig+0x144>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	461a      	mov	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	429a      	cmp	r2, r3
 8008040:	d02a      	beq.n	8008098 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	b2db      	uxtb	r3, r3
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7ff f988 	bl	8007360 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008050:	4b1c      	ldr	r3, [pc, #112]	; (80080c4 <USBD_SetConfig+0x144>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	461a      	mov	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800805a:	4b1a      	ldr	r3, [pc, #104]	; (80080c4 <USBD_SetConfig+0x144>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7ff f961 	bl	8007328 <USBD_SetClassConfig>
 8008066:	4603      	mov	r3, r0
 8008068:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800806a:	7bfb      	ldrb	r3, [r7, #15]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00f      	beq.n	8008090 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f8fe 	bl	8008274 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	b2db      	uxtb	r3, r3
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff f96d 	bl	8007360 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2202      	movs	r2, #2
 800808a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800808e:	e014      	b.n	80080ba <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f9ba 	bl	800840a <USBD_CtlSendStatus>
    break;
 8008096:	e010      	b.n	80080ba <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f9b6 	bl	800840a <USBD_CtlSendStatus>
    break;
 800809e:	e00c      	b.n	80080ba <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f8e6 	bl	8008274 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080a8:	4b06      	ldr	r3, [pc, #24]	; (80080c4 <USBD_SetConfig+0x144>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff f956 	bl	8007360 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80080b4:	2303      	movs	r3, #3
 80080b6:	73fb      	strb	r3, [r7, #15]
    break;
 80080b8:	bf00      	nop
  }

  return ret;
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20000370 	.word	0x20000370

080080c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	88db      	ldrh	r3, [r3, #6]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d004      	beq.n	80080e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f8c9 	bl	8008274 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80080e2:	e021      	b.n	8008128 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	db17      	blt.n	800811e <USBD_GetConfig+0x56>
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	dd02      	ble.n	80080f8 <USBD_GetConfig+0x30>
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d00b      	beq.n	800810e <USBD_GetConfig+0x46>
 80080f6:	e012      	b.n	800811e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3308      	adds	r3, #8
 8008102:	2201      	movs	r2, #1
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f925 	bl	8008356 <USBD_CtlSendData>
      break;
 800810c:	e00c      	b.n	8008128 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	3304      	adds	r3, #4
 8008112:	2201      	movs	r2, #1
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f91d 	bl	8008356 <USBD_CtlSendData>
      break;
 800811c:	e004      	b.n	8008128 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f8a7 	bl	8008274 <USBD_CtlError>
      break;
 8008126:	bf00      	nop
}
 8008128:	bf00      	nop
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008140:	3b01      	subs	r3, #1
 8008142:	2b02      	cmp	r3, #2
 8008144:	d81e      	bhi.n	8008184 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	88db      	ldrh	r3, [r3, #6]
 800814a:	2b02      	cmp	r3, #2
 800814c:	d004      	beq.n	8008158 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f88f 	bl	8008274 <USBD_CtlError>
      break;
 8008156:	e01a      	b.n	800818e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f043 0202 	orr.w	r2, r3, #2
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	330c      	adds	r3, #12
 8008178:	2202      	movs	r2, #2
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f8ea 	bl	8008356 <USBD_CtlSendData>
    break;
 8008182:	e004      	b.n	800818e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f874 	bl	8008274 <USBD_CtlError>
    break;
 800818c:	bf00      	nop
  }
}
 800818e:	bf00      	nop
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b082      	sub	sp, #8
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	885b      	ldrh	r3, [r3, #2]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d106      	bne.n	80081b6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f92a 	bl	800840a <USBD_CtlSendStatus>
  }
}
 80081b6:	bf00      	nop
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ce:	3b01      	subs	r3, #1
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d80b      	bhi.n	80081ec <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	885b      	ldrh	r3, [r3, #2]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d10c      	bne.n	80081f6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f910 	bl	800840a <USBD_CtlSendStatus>
      }
      break;
 80081ea:	e004      	b.n	80081f6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f840 	bl	8008274 <USBD_CtlError>
      break;
 80081f4:	e000      	b.n	80081f8 <USBD_ClrFeature+0x3a>
      break;
 80081f6:	bf00      	nop
  }
}
 80081f8:	bf00      	nop
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	781a      	ldrb	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3301      	adds	r3, #1
 800821a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	781a      	ldrb	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	3301      	adds	r3, #1
 8008228:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f7ff fad3 	bl	80077d6 <SWAPBYTE>
 8008230:	4603      	mov	r3, r0
 8008232:	461a      	mov	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3301      	adds	r3, #1
 800823c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3301      	adds	r3, #1
 8008242:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7ff fac6 	bl	80077d6 <SWAPBYTE>
 800824a:	4603      	mov	r3, r0
 800824c:	461a      	mov	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3301      	adds	r3, #1
 8008256:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3301      	adds	r3, #1
 800825c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f7ff fab9 	bl	80077d6 <SWAPBYTE>
 8008264:	4603      	mov	r3, r0
 8008266:	461a      	mov	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	80da      	strh	r2, [r3, #6]
}
 800826c:	bf00      	nop
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800827e:	2180      	movs	r1, #128	; 0x80
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fcdf 	bl	8008c44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008286:	2100      	movs	r1, #0
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fcdb 	bl	8008c44 <USBD_LL_StallEP>
}
 800828e:	bf00      	nop
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b086      	sub	sp, #24
 800829a:	af00      	add	r7, sp, #0
 800829c:	60f8      	str	r0, [r7, #12]
 800829e:	60b9      	str	r1, [r7, #8]
 80082a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d036      	beq.n	800831a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80082b0:	6938      	ldr	r0, [r7, #16]
 80082b2:	f000 f836 	bl	8008322 <USBD_GetLen>
 80082b6:	4603      	mov	r3, r0
 80082b8:	3301      	adds	r3, #1
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	005b      	lsls	r3, r3, #1
 80082be:	b29a      	uxth	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80082c4:	7dfb      	ldrb	r3, [r7, #23]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	4413      	add	r3, r2
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	7812      	ldrb	r2, [r2, #0]
 80082ce:	701a      	strb	r2, [r3, #0]
  idx++;
 80082d0:	7dfb      	ldrb	r3, [r7, #23]
 80082d2:	3301      	adds	r3, #1
 80082d4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	4413      	add	r3, r2
 80082dc:	2203      	movs	r2, #3
 80082de:	701a      	strb	r2, [r3, #0]
  idx++;
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
 80082e2:	3301      	adds	r3, #1
 80082e4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082e6:	e013      	b.n	8008310 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082e8:	7dfb      	ldrb	r3, [r7, #23]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	4413      	add	r3, r2
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	7812      	ldrb	r2, [r2, #0]
 80082f2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	3301      	adds	r3, #1
 80082f8:	613b      	str	r3, [r7, #16]
    idx++;
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
 80082fc:	3301      	adds	r3, #1
 80082fe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008300:	7dfb      	ldrb	r3, [r7, #23]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	4413      	add	r3, r2
 8008306:	2200      	movs	r2, #0
 8008308:	701a      	strb	r2, [r3, #0]
    idx++;
 800830a:	7dfb      	ldrb	r3, [r7, #23]
 800830c:	3301      	adds	r3, #1
 800830e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1e7      	bne.n	80082e8 <USBD_GetString+0x52>
 8008318:	e000      	b.n	800831c <USBD_GetString+0x86>
    return;
 800831a:	bf00      	nop
  }
}
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008322:	b480      	push	{r7}
 8008324:	b085      	sub	sp, #20
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008332:	e005      	b.n	8008340 <USBD_GetLen+0x1e>
  {
    len++;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	3301      	adds	r3, #1
 8008338:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	3301      	adds	r3, #1
 800833e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1f5      	bne.n	8008334 <USBD_GetLen+0x12>
  }

  return len;
 8008348:	7bfb      	ldrb	r3, [r7, #15]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b084      	sub	sp, #16
 800835a:	af00      	add	r7, sp, #0
 800835c:	60f8      	str	r0, [r7, #12]
 800835e:	60b9      	str	r1, [r7, #8]
 8008360:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2202      	movs	r2, #2
 8008366:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	2100      	movs	r1, #0
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 fcea 	bl	8008d56 <USBD_LL_Transmit>

  return USBD_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	2100      	movs	r1, #0
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f000 fcd9 	bl	8008d56 <USBD_LL_Transmit>

  return USBD_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	60b9      	str	r1, [r7, #8]
 80083b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2203      	movs	r2, #3
 80083be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	2100      	movs	r1, #0
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 fcdd 	bl	8008d98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	2100      	movs	r1, #0
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f000 fccc 	bl	8008d98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b082      	sub	sp, #8
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2204      	movs	r2, #4
 8008416:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800841a:	2300      	movs	r3, #0
 800841c:	2200      	movs	r2, #0
 800841e:	2100      	movs	r1, #0
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fc98 	bl	8008d56 <USBD_LL_Transmit>

  return USBD_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2205      	movs	r2, #5
 800843c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008440:	2300      	movs	r3, #0
 8008442:	2200      	movs	r2, #0
 8008444:	2100      	movs	r1, #0
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fca6 	bl	8008d98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800845c:	2200      	movs	r2, #0
 800845e:	4912      	ldr	r1, [pc, #72]	; (80084a8 <MX_USB_DEVICE_Init+0x50>)
 8008460:	4812      	ldr	r0, [pc, #72]	; (80084ac <MX_USB_DEVICE_Init+0x54>)
 8008462:	f7fe fef3 	bl	800724c <USBD_Init>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800846c:	f7f9 faae 	bl	80019cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008470:	490f      	ldr	r1, [pc, #60]	; (80084b0 <MX_USB_DEVICE_Init+0x58>)
 8008472:	480e      	ldr	r0, [pc, #56]	; (80084ac <MX_USB_DEVICE_Init+0x54>)
 8008474:	f7fe ff20 	bl	80072b8 <USBD_RegisterClass>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800847e:	f7f9 faa5 	bl	80019cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008482:	490c      	ldr	r1, [pc, #48]	; (80084b4 <MX_USB_DEVICE_Init+0x5c>)
 8008484:	4809      	ldr	r0, [pc, #36]	; (80084ac <MX_USB_DEVICE_Init+0x54>)
 8008486:	f7fe fe45 	bl	8007114 <USBD_CDC_RegisterInterface>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008490:	f7f9 fa9c 	bl	80019cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008494:	4805      	ldr	r0, [pc, #20]	; (80084ac <MX_USB_DEVICE_Init+0x54>)
 8008496:	f7fe ff30 	bl	80072fa <USBD_Start>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80084a0:	f7f9 fa94 	bl	80019cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084a4:	bf00      	nop
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	20000130 	.word	0x20000130
 80084ac:	200004e0 	.word	0x200004e0
 80084b0:	20000018 	.word	0x20000018
 80084b4:	2000011c 	.word	0x2000011c

080084b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80084bc:	2200      	movs	r2, #0
 80084be:	4905      	ldr	r1, [pc, #20]	; (80084d4 <CDC_Init_FS+0x1c>)
 80084c0:	4805      	ldr	r0, [pc, #20]	; (80084d8 <CDC_Init_FS+0x20>)
 80084c2:	f7fe fe3c 	bl	800713e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80084c6:	4905      	ldr	r1, [pc, #20]	; (80084dc <CDC_Init_FS+0x24>)
 80084c8:	4803      	ldr	r0, [pc, #12]	; (80084d8 <CDC_Init_FS+0x20>)
 80084ca:	f7fe fe51 	bl	8007170 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	20000fb0 	.word	0x20000fb0
 80084d8:	200004e0 	.word	0x200004e0
 80084dc:	200007b0 	.word	0x200007b0

080084e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084e0:	b480      	push	{r7}
 80084e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	6039      	str	r1, [r7, #0]
 80084fa:	71fb      	strb	r3, [r7, #7]
 80084fc:	4613      	mov	r3, r2
 80084fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008500:	79fb      	ldrb	r3, [r7, #7]
 8008502:	2b23      	cmp	r3, #35	; 0x23
 8008504:	d84a      	bhi.n	800859c <CDC_Control_FS+0xac>
 8008506:	a201      	add	r2, pc, #4	; (adr r2, 800850c <CDC_Control_FS+0x1c>)
 8008508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850c:	0800859d 	.word	0x0800859d
 8008510:	0800859d 	.word	0x0800859d
 8008514:	0800859d 	.word	0x0800859d
 8008518:	0800859d 	.word	0x0800859d
 800851c:	0800859d 	.word	0x0800859d
 8008520:	0800859d 	.word	0x0800859d
 8008524:	0800859d 	.word	0x0800859d
 8008528:	0800859d 	.word	0x0800859d
 800852c:	0800859d 	.word	0x0800859d
 8008530:	0800859d 	.word	0x0800859d
 8008534:	0800859d 	.word	0x0800859d
 8008538:	0800859d 	.word	0x0800859d
 800853c:	0800859d 	.word	0x0800859d
 8008540:	0800859d 	.word	0x0800859d
 8008544:	0800859d 	.word	0x0800859d
 8008548:	0800859d 	.word	0x0800859d
 800854c:	0800859d 	.word	0x0800859d
 8008550:	0800859d 	.word	0x0800859d
 8008554:	0800859d 	.word	0x0800859d
 8008558:	0800859d 	.word	0x0800859d
 800855c:	0800859d 	.word	0x0800859d
 8008560:	0800859d 	.word	0x0800859d
 8008564:	0800859d 	.word	0x0800859d
 8008568:	0800859d 	.word	0x0800859d
 800856c:	0800859d 	.word	0x0800859d
 8008570:	0800859d 	.word	0x0800859d
 8008574:	0800859d 	.word	0x0800859d
 8008578:	0800859d 	.word	0x0800859d
 800857c:	0800859d 	.word	0x0800859d
 8008580:	0800859d 	.word	0x0800859d
 8008584:	0800859d 	.word	0x0800859d
 8008588:	0800859d 	.word	0x0800859d
 800858c:	0800859d 	.word	0x0800859d
 8008590:	0800859d 	.word	0x0800859d
 8008594:	0800859d 	.word	0x0800859d
 8008598:	0800859d 	.word	0x0800859d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800859c:	bf00      	nop
  }

  return (USBD_OK);
 800859e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	4805      	ldr	r0, [pc, #20]	; (80085d0 <CDC_Receive_FS+0x24>)
 80085ba:	f7fe fdd9 	bl	8007170 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085be:	4804      	ldr	r0, [pc, #16]	; (80085d0 <CDC_Receive_FS+0x24>)
 80085c0:	f7fe fe1a 	bl	80071f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80085c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	200004e0 	.word	0x200004e0

080085d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085e4:	4b0d      	ldr	r3, [pc, #52]	; (800861c <CDC_Transmit_FS+0x48>)
 80085e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e00b      	b.n	8008612 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085fa:	887b      	ldrh	r3, [r7, #2]
 80085fc:	461a      	mov	r2, r3
 80085fe:	6879      	ldr	r1, [r7, #4]
 8008600:	4806      	ldr	r0, [pc, #24]	; (800861c <CDC_Transmit_FS+0x48>)
 8008602:	f7fe fd9c 	bl	800713e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008606:	4805      	ldr	r0, [pc, #20]	; (800861c <CDC_Transmit_FS+0x48>)
 8008608:	f7fe fdc6 	bl	8007198 <USBD_CDC_TransmitPacket>
 800860c:	4603      	mov	r3, r0
 800860e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008610:	7bfb      	ldrb	r3, [r7, #15]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	200004e0 	.word	0x200004e0

08008620 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	4613      	mov	r3, r2
 800862c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008632:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008636:	4618      	mov	r0, r3
 8008638:	371c      	adds	r7, #28
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
	...

08008644 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	6039      	str	r1, [r7, #0]
 800864e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2212      	movs	r2, #18
 8008654:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008656:	4b03      	ldr	r3, [pc, #12]	; (8008664 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008658:	4618      	mov	r0, r3
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	2000014c 	.word	0x2000014c

08008668 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	4603      	mov	r3, r0
 8008670:	6039      	str	r1, [r7, #0]
 8008672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2204      	movs	r2, #4
 8008678:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800867a:	4b03      	ldr	r3, [pc, #12]	; (8008688 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800867c:	4618      	mov	r0, r3
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	20000160 	.word	0x20000160

0800868c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	6039      	str	r1, [r7, #0]
 8008696:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d105      	bne.n	80086aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	4907      	ldr	r1, [pc, #28]	; (80086c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80086a2:	4808      	ldr	r0, [pc, #32]	; (80086c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80086a4:	f7ff fdf7 	bl	8008296 <USBD_GetString>
 80086a8:	e004      	b.n	80086b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4904      	ldr	r1, [pc, #16]	; (80086c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80086ae:	4805      	ldr	r0, [pc, #20]	; (80086c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80086b0:	f7ff fdf1 	bl	8008296 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086b4:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	200017b0 	.word	0x200017b0
 80086c4:	0800a9d0 	.word	0x0800a9d0

080086c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	6039      	str	r1, [r7, #0]
 80086d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	4904      	ldr	r1, [pc, #16]	; (80086e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086d8:	4804      	ldr	r0, [pc, #16]	; (80086ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086da:	f7ff fddc 	bl	8008296 <USBD_GetString>
  return USBD_StrDesc;
 80086de:	4b02      	ldr	r3, [pc, #8]	; (80086e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	200017b0 	.word	0x200017b0
 80086ec:	0800a9e8 	.word	0x0800a9e8

080086f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	4603      	mov	r3, r0
 80086f8:	6039      	str	r1, [r7, #0]
 80086fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	221a      	movs	r2, #26
 8008700:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008702:	f000 f843 	bl	800878c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008706:	4b02      	ldr	r3, [pc, #8]	; (8008710 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008708:	4618      	mov	r0, r3
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20000164 	.word	0x20000164

08008714 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	4603      	mov	r3, r0
 800871c:	6039      	str	r1, [r7, #0]
 800871e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008720:	79fb      	ldrb	r3, [r7, #7]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d105      	bne.n	8008732 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008726:	683a      	ldr	r2, [r7, #0]
 8008728:	4907      	ldr	r1, [pc, #28]	; (8008748 <USBD_FS_ConfigStrDescriptor+0x34>)
 800872a:	4808      	ldr	r0, [pc, #32]	; (800874c <USBD_FS_ConfigStrDescriptor+0x38>)
 800872c:	f7ff fdb3 	bl	8008296 <USBD_GetString>
 8008730:	e004      	b.n	800873c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	4904      	ldr	r1, [pc, #16]	; (8008748 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008736:	4805      	ldr	r0, [pc, #20]	; (800874c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008738:	f7ff fdad 	bl	8008296 <USBD_GetString>
  }
  return USBD_StrDesc;
 800873c:	4b02      	ldr	r3, [pc, #8]	; (8008748 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800873e:	4618      	mov	r0, r3
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	200017b0 	.word	0x200017b0
 800874c:	0800a9fc 	.word	0x0800a9fc

08008750 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	4603      	mov	r3, r0
 8008758:	6039      	str	r1, [r7, #0]
 800875a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800875c:	79fb      	ldrb	r3, [r7, #7]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d105      	bne.n	800876e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	4907      	ldr	r1, [pc, #28]	; (8008784 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008766:	4808      	ldr	r0, [pc, #32]	; (8008788 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008768:	f7ff fd95 	bl	8008296 <USBD_GetString>
 800876c:	e004      	b.n	8008778 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	4904      	ldr	r1, [pc, #16]	; (8008784 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008772:	4805      	ldr	r0, [pc, #20]	; (8008788 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008774:	f7ff fd8f 	bl	8008296 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008778:	4b02      	ldr	r3, [pc, #8]	; (8008784 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800877a:	4618      	mov	r0, r3
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	200017b0 	.word	0x200017b0
 8008788:	0800aa08 	.word	0x0800aa08

0800878c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008792:	4b0f      	ldr	r3, [pc, #60]	; (80087d0 <Get_SerialNum+0x44>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008798:	4b0e      	ldr	r3, [pc, #56]	; (80087d4 <Get_SerialNum+0x48>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800879e:	4b0e      	ldr	r3, [pc, #56]	; (80087d8 <Get_SerialNum+0x4c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4413      	add	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d009      	beq.n	80087c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80087b2:	2208      	movs	r2, #8
 80087b4:	4909      	ldr	r1, [pc, #36]	; (80087dc <Get_SerialNum+0x50>)
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 f814 	bl	80087e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087bc:	2204      	movs	r2, #4
 80087be:	4908      	ldr	r1, [pc, #32]	; (80087e0 <Get_SerialNum+0x54>)
 80087c0:	68b8      	ldr	r0, [r7, #8]
 80087c2:	f000 f80f 	bl	80087e4 <IntToUnicode>
  }
}
 80087c6:	bf00      	nop
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	1fff7a10 	.word	0x1fff7a10
 80087d4:	1fff7a14 	.word	0x1fff7a14
 80087d8:	1fff7a18 	.word	0x1fff7a18
 80087dc:	20000166 	.word	0x20000166
 80087e0:	20000176 	.word	0x20000176

080087e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b087      	sub	sp, #28
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	4613      	mov	r3, r2
 80087f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087f6:	2300      	movs	r3, #0
 80087f8:	75fb      	strb	r3, [r7, #23]
 80087fa:	e027      	b.n	800884c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	0f1b      	lsrs	r3, r3, #28
 8008800:	2b09      	cmp	r3, #9
 8008802:	d80b      	bhi.n	800881c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	0f1b      	lsrs	r3, r3, #28
 8008808:	b2da      	uxtb	r2, r3
 800880a:	7dfb      	ldrb	r3, [r7, #23]
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	4619      	mov	r1, r3
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	440b      	add	r3, r1
 8008814:	3230      	adds	r2, #48	; 0x30
 8008816:	b2d2      	uxtb	r2, r2
 8008818:	701a      	strb	r2, [r3, #0]
 800881a:	e00a      	b.n	8008832 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	0f1b      	lsrs	r3, r3, #28
 8008820:	b2da      	uxtb	r2, r3
 8008822:	7dfb      	ldrb	r3, [r7, #23]
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	4619      	mov	r1, r3
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	440b      	add	r3, r1
 800882c:	3237      	adds	r2, #55	; 0x37
 800882e:	b2d2      	uxtb	r2, r2
 8008830:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	011b      	lsls	r3, r3, #4
 8008836:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	3301      	adds	r3, #1
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	4413      	add	r3, r2
 8008842:	2200      	movs	r2, #0
 8008844:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008846:	7dfb      	ldrb	r3, [r7, #23]
 8008848:	3301      	adds	r3, #1
 800884a:	75fb      	strb	r3, [r7, #23]
 800884c:	7dfa      	ldrb	r2, [r7, #23]
 800884e:	79fb      	ldrb	r3, [r7, #7]
 8008850:	429a      	cmp	r2, r3
 8008852:	d3d3      	bcc.n	80087fc <IntToUnicode+0x18>
  }
}
 8008854:	bf00      	nop
 8008856:	371c      	adds	r7, #28
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b08a      	sub	sp, #40	; 0x28
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008868:	f107 0314 	add.w	r3, r7, #20
 800886c:	2200      	movs	r2, #0
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	605a      	str	r2, [r3, #4]
 8008872:	609a      	str	r2, [r3, #8]
 8008874:	60da      	str	r2, [r3, #12]
 8008876:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008880:	d13a      	bne.n	80088f8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008882:	2300      	movs	r3, #0
 8008884:	613b      	str	r3, [r7, #16]
 8008886:	4b1e      	ldr	r3, [pc, #120]	; (8008900 <HAL_PCD_MspInit+0xa0>)
 8008888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888a:	4a1d      	ldr	r2, [pc, #116]	; (8008900 <HAL_PCD_MspInit+0xa0>)
 800888c:	f043 0301 	orr.w	r3, r3, #1
 8008890:	6313      	str	r3, [r2, #48]	; 0x30
 8008892:	4b1b      	ldr	r3, [pc, #108]	; (8008900 <HAL_PCD_MspInit+0xa0>)
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	613b      	str	r3, [r7, #16]
 800889c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800889e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80088a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088a4:	2302      	movs	r3, #2
 80088a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088a8:	2300      	movs	r3, #0
 80088aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088ac:	2303      	movs	r3, #3
 80088ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088b0:	230a      	movs	r3, #10
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088b4:	f107 0314 	add.w	r3, r7, #20
 80088b8:	4619      	mov	r1, r3
 80088ba:	4812      	ldr	r0, [pc, #72]	; (8008904 <HAL_PCD_MspInit+0xa4>)
 80088bc:	f7f9 fc58 	bl	8002170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088c0:	4b0f      	ldr	r3, [pc, #60]	; (8008900 <HAL_PCD_MspInit+0xa0>)
 80088c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c4:	4a0e      	ldr	r2, [pc, #56]	; (8008900 <HAL_PCD_MspInit+0xa0>)
 80088c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ca:	6353      	str	r3, [r2, #52]	; 0x34
 80088cc:	2300      	movs	r3, #0
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	4b0b      	ldr	r3, [pc, #44]	; (8008900 <HAL_PCD_MspInit+0xa0>)
 80088d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d4:	4a0a      	ldr	r2, [pc, #40]	; (8008900 <HAL_PCD_MspInit+0xa0>)
 80088d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088da:	6453      	str	r3, [r2, #68]	; 0x44
 80088dc:	4b08      	ldr	r3, [pc, #32]	; (8008900 <HAL_PCD_MspInit+0xa0>)
 80088de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088e4:	60fb      	str	r3, [r7, #12]
 80088e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088e8:	2200      	movs	r2, #0
 80088ea:	2100      	movs	r1, #0
 80088ec:	2043      	movs	r0, #67	; 0x43
 80088ee:	f7f9 fbe6 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088f2:	2043      	movs	r0, #67	; 0x43
 80088f4:	f7f9 fbff 	bl	80020f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088f8:	bf00      	nop
 80088fa:	3728      	adds	r7, #40	; 0x28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	40023800 	.word	0x40023800
 8008904:	40020000 	.word	0x40020000

08008908 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800891c:	4619      	mov	r1, r3
 800891e:	4610      	mov	r0, r2
 8008920:	f7fe fd36 	bl	8007390 <USBD_LL_SetupStage>
}
 8008924:	bf00      	nop
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	4613      	mov	r3, r2
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	1a9b      	subs	r3, r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	440b      	add	r3, r1
 800894c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	78fb      	ldrb	r3, [r7, #3]
 8008954:	4619      	mov	r1, r3
 8008956:	f7fe fd6e 	bl	8007436 <USBD_LL_DataOutStage>
}
 800895a:	bf00      	nop
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b082      	sub	sp, #8
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008974:	78fa      	ldrb	r2, [r7, #3]
 8008976:	6879      	ldr	r1, [r7, #4]
 8008978:	4613      	mov	r3, r2
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	1a9b      	subs	r3, r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	440b      	add	r3, r1
 8008982:	3348      	adds	r3, #72	; 0x48
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	78fb      	ldrb	r3, [r7, #3]
 8008988:	4619      	mov	r1, r3
 800898a:	f7fe fdb7 	bl	80074fc <USBD_LL_DataInStage>
}
 800898e:	bf00      	nop
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b082      	sub	sp, #8
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fe febb 	bl	8007720 <USBD_LL_SOF>
}
 80089aa:	bf00      	nop
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b084      	sub	sp, #16
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089ba:	2301      	movs	r3, #1
 80089bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d102      	bne.n	80089cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80089c6:	2300      	movs	r3, #0
 80089c8:	73fb      	strb	r3, [r7, #15]
 80089ca:	e008      	b.n	80089de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d102      	bne.n	80089da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80089d4:	2301      	movs	r3, #1
 80089d6:	73fb      	strb	r3, [r7, #15]
 80089d8:	e001      	b.n	80089de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80089da:	f7f8 fff7 	bl	80019cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089e4:	7bfa      	ldrb	r2, [r7, #15]
 80089e6:	4611      	mov	r1, r2
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7fe fe5e 	bl	80076aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fe fe17 	bl	8007628 <USBD_LL_Reset>
}
 80089fa:	bf00      	nop
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
	...

08008a04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fe fe59 	bl	80076ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	6812      	ldr	r2, [r2, #0]
 8008a26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a2a:	f043 0301 	orr.w	r3, r3, #1
 8008a2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d005      	beq.n	8008a44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a38:	4b04      	ldr	r3, [pc, #16]	; (8008a4c <HAL_PCD_SuspendCallback+0x48>)
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	4a03      	ldr	r2, [pc, #12]	; (8008a4c <HAL_PCD_SuspendCallback+0x48>)
 8008a3e:	f043 0306 	orr.w	r3, r3, #6
 8008a42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a44:	bf00      	nop
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	e000ed00 	.word	0xe000ed00

08008a50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe fe48 	bl	80076f4 <USBD_LL_Resume>
}
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a7e:	78fa      	ldrb	r2, [r7, #3]
 8008a80:	4611      	mov	r1, r2
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fe fe73 	bl	800776e <USBD_LL_IsoOUTIncomplete>
}
 8008a88:	bf00      	nop
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008aa2:	78fa      	ldrb	r2, [r7, #3]
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fe fe54 	bl	8007754 <USBD_LL_IsoINIncomplete>
}
 8008aac:	bf00      	nop
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fe fe60 	bl	8007788 <USBD_LL_DevConnected>
}
 8008ac8:	bf00      	nop
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fe fe5d 	bl	800779e <USBD_LL_DevDisconnected>
}
 8008ae4:	bf00      	nop
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d13c      	bne.n	8008b76 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008afc:	4a20      	ldr	r2, [pc, #128]	; (8008b80 <USBD_LL_Init+0x94>)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a1e      	ldr	r2, [pc, #120]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b0c:	4b1c      	ldr	r3, [pc, #112]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008b14:	4b1a      	ldr	r3, [pc, #104]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b16:	2204      	movs	r2, #4
 8008b18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008b1a:	4b19      	ldr	r3, [pc, #100]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b1c:	2202      	movs	r2, #2
 8008b1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b20:	4b17      	ldr	r3, [pc, #92]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b26:	4b16      	ldr	r3, [pc, #88]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b28:	2202      	movs	r2, #2
 8008b2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b2c:	4b14      	ldr	r3, [pc, #80]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b32:	4b13      	ldr	r3, [pc, #76]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b38:	4b11      	ldr	r3, [pc, #68]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008b3e:	4b10      	ldr	r3, [pc, #64]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b44:	4b0e      	ldr	r3, [pc, #56]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b4a:	480d      	ldr	r0, [pc, #52]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b4c:	f7f9 fcdc 	bl	8002508 <HAL_PCD_Init>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b56:	f7f8 ff39 	bl	80019cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b5a:	2180      	movs	r1, #128	; 0x80
 8008b5c:	4808      	ldr	r0, [pc, #32]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b5e:	f7fa fe3a 	bl	80037d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b62:	2240      	movs	r2, #64	; 0x40
 8008b64:	2100      	movs	r1, #0
 8008b66:	4806      	ldr	r0, [pc, #24]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b68:	f7fa fdee 	bl	8003748 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b6c:	2280      	movs	r2, #128	; 0x80
 8008b6e:	2101      	movs	r1, #1
 8008b70:	4803      	ldr	r0, [pc, #12]	; (8008b80 <USBD_LL_Init+0x94>)
 8008b72:	f7fa fde9 	bl	8003748 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	200019b0 	.word	0x200019b0

08008b84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7f9 fdd1 	bl	8002742 <HAL_PCD_Start>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 f92a 	bl	8008e00 <USBD_Get_USB_Status>
 8008bac:	4603      	mov	r3, r0
 8008bae:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	4608      	mov	r0, r1
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	4603      	mov	r3, r0
 8008bca:	70fb      	strb	r3, [r7, #3]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	70bb      	strb	r3, [r7, #2]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008be2:	78bb      	ldrb	r3, [r7, #2]
 8008be4:	883a      	ldrh	r2, [r7, #0]
 8008be6:	78f9      	ldrb	r1, [r7, #3]
 8008be8:	f7fa f9b5 	bl	8002f56 <HAL_PCD_EP_Open>
 8008bec:	4603      	mov	r3, r0
 8008bee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 f904 	bl	8008e00 <USBD_Get_USB_Status>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c12:	2300      	movs	r3, #0
 8008c14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c20:	78fa      	ldrb	r2, [r7, #3]
 8008c22:	4611      	mov	r1, r2
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7fa f9fe 	bl	8003026 <HAL_PCD_EP_Close>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 f8e5 	bl	8008e00 <USBD_Get_USB_Status>
 8008c36:	4603      	mov	r3, r0
 8008c38:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008c3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c5e:	78fa      	ldrb	r2, [r7, #3]
 8008c60:	4611      	mov	r1, r2
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fa fad6 	bl	8003214 <HAL_PCD_EP_SetStall>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 f8c6 	bl	8008e00 <USBD_Get_USB_Status>
 8008c74:	4603      	mov	r3, r0
 8008c76:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c9c:	78fa      	ldrb	r2, [r7, #3]
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7fa fb1b 	bl	80032dc <HAL_PCD_EP_ClrStall>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 f8a7 	bl	8008e00 <USBD_Get_USB_Status>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cd2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	da0b      	bge.n	8008cf4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008cdc:	78fb      	ldrb	r3, [r7, #3]
 8008cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ce2:	68f9      	ldr	r1, [r7, #12]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	1a9b      	subs	r3, r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	440b      	add	r3, r1
 8008cee:	333e      	adds	r3, #62	; 0x3e
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	e00b      	b.n	8008d0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008cf4:	78fb      	ldrb	r3, [r7, #3]
 8008cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cfa:	68f9      	ldr	r1, [r7, #12]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	00db      	lsls	r3, r3, #3
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	440b      	add	r3, r1
 8008d06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008d0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d32:	78fa      	ldrb	r2, [r7, #3]
 8008d34:	4611      	mov	r1, r2
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fa f8e8 	bl	8002f0c <HAL_PCD_SetAddress>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f85c 	bl	8008e00 <USBD_Get_USB_Status>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b086      	sub	sp, #24
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	60f8      	str	r0, [r7, #12]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	603b      	str	r3, [r7, #0]
 8008d62:	460b      	mov	r3, r1
 8008d64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d74:	7af9      	ldrb	r1, [r7, #11]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	f7fa fa01 	bl	8003180 <HAL_PCD_EP_Transmit>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	4618      	mov	r0, r3
 8008d86:	f000 f83b 	bl	8008e00 <USBD_Get_USB_Status>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008d8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	607a      	str	r2, [r7, #4]
 8008da2:	603b      	str	r3, [r7, #0]
 8008da4:	460b      	mov	r3, r1
 8008da6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008db6:	7af9      	ldrb	r1, [r7, #11]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	f7fa f97d 	bl	80030ba <HAL_PCD_EP_Receive>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 f81a 	bl	8008e00 <USBD_Get_USB_Status>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8008dd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b082      	sub	sp, #8
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	460b      	mov	r3, r1
 8008de4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008dec:	78fa      	ldrb	r2, [r7, #3]
 8008dee:	4611      	mov	r1, r2
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fa f9ad 	bl	8003150 <HAL_PCD_EP_GetRxCount>
 8008df6:	4603      	mov	r3, r0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	4603      	mov	r3, r0
 8008e08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e0e:	79fb      	ldrb	r3, [r7, #7]
 8008e10:	2b03      	cmp	r3, #3
 8008e12:	d817      	bhi.n	8008e44 <USBD_Get_USB_Status+0x44>
 8008e14:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <USBD_Get_USB_Status+0x1c>)
 8008e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1a:	bf00      	nop
 8008e1c:	08008e2d 	.word	0x08008e2d
 8008e20:	08008e33 	.word	0x08008e33
 8008e24:	08008e39 	.word	0x08008e39
 8008e28:	08008e3f 	.word	0x08008e3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e30:	e00b      	b.n	8008e4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e32:	2303      	movs	r3, #3
 8008e34:	73fb      	strb	r3, [r7, #15]
    break;
 8008e36:	e008      	b.n	8008e4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e3c:	e005      	b.n	8008e4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	73fb      	strb	r3, [r7, #15]
    break;
 8008e42:	e002      	b.n	8008e4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e44:	2303      	movs	r3, #3
 8008e46:	73fb      	strb	r3, [r7, #15]
    break;
 8008e48:	bf00      	nop
  }
  return usb_status;
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3714      	adds	r7, #20
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <__errno>:
 8008e58:	4b01      	ldr	r3, [pc, #4]	; (8008e60 <__errno+0x8>)
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	20000180 	.word	0x20000180

08008e64 <__libc_init_array>:
 8008e64:	b570      	push	{r4, r5, r6, lr}
 8008e66:	4e0d      	ldr	r6, [pc, #52]	; (8008e9c <__libc_init_array+0x38>)
 8008e68:	4c0d      	ldr	r4, [pc, #52]	; (8008ea0 <__libc_init_array+0x3c>)
 8008e6a:	1ba4      	subs	r4, r4, r6
 8008e6c:	10a4      	asrs	r4, r4, #2
 8008e6e:	2500      	movs	r5, #0
 8008e70:	42a5      	cmp	r5, r4
 8008e72:	d109      	bne.n	8008e88 <__libc_init_array+0x24>
 8008e74:	4e0b      	ldr	r6, [pc, #44]	; (8008ea4 <__libc_init_array+0x40>)
 8008e76:	4c0c      	ldr	r4, [pc, #48]	; (8008ea8 <__libc_init_array+0x44>)
 8008e78:	f001 fd9a 	bl	800a9b0 <_init>
 8008e7c:	1ba4      	subs	r4, r4, r6
 8008e7e:	10a4      	asrs	r4, r4, #2
 8008e80:	2500      	movs	r5, #0
 8008e82:	42a5      	cmp	r5, r4
 8008e84:	d105      	bne.n	8008e92 <__libc_init_array+0x2e>
 8008e86:	bd70      	pop	{r4, r5, r6, pc}
 8008e88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e8c:	4798      	blx	r3
 8008e8e:	3501      	adds	r5, #1
 8008e90:	e7ee      	b.n	8008e70 <__libc_init_array+0xc>
 8008e92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e96:	4798      	blx	r3
 8008e98:	3501      	adds	r5, #1
 8008e9a:	e7f2      	b.n	8008e82 <__libc_init_array+0x1e>
 8008e9c:	0800ac58 	.word	0x0800ac58
 8008ea0:	0800ac58 	.word	0x0800ac58
 8008ea4:	0800ac58 	.word	0x0800ac58
 8008ea8:	0800ac5c 	.word	0x0800ac5c

08008eac <malloc>:
 8008eac:	4b02      	ldr	r3, [pc, #8]	; (8008eb8 <malloc+0xc>)
 8008eae:	4601      	mov	r1, r0
 8008eb0:	6818      	ldr	r0, [r3, #0]
 8008eb2:	f000 b861 	b.w	8008f78 <_malloc_r>
 8008eb6:	bf00      	nop
 8008eb8:	20000180 	.word	0x20000180

08008ebc <free>:
 8008ebc:	4b02      	ldr	r3, [pc, #8]	; (8008ec8 <free+0xc>)
 8008ebe:	4601      	mov	r1, r0
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	f000 b80b 	b.w	8008edc <_free_r>
 8008ec6:	bf00      	nop
 8008ec8:	20000180 	.word	0x20000180

08008ecc <memset>:
 8008ecc:	4402      	add	r2, r0
 8008ece:	4603      	mov	r3, r0
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d100      	bne.n	8008ed6 <memset+0xa>
 8008ed4:	4770      	bx	lr
 8008ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8008eda:	e7f9      	b.n	8008ed0 <memset+0x4>

08008edc <_free_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4605      	mov	r5, r0
 8008ee0:	2900      	cmp	r1, #0
 8008ee2:	d045      	beq.n	8008f70 <_free_r+0x94>
 8008ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ee8:	1f0c      	subs	r4, r1, #4
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	bfb8      	it	lt
 8008eee:	18e4      	addlt	r4, r4, r3
 8008ef0:	f001 fa53 	bl	800a39a <__malloc_lock>
 8008ef4:	4a1f      	ldr	r2, [pc, #124]	; (8008f74 <_free_r+0x98>)
 8008ef6:	6813      	ldr	r3, [r2, #0]
 8008ef8:	4610      	mov	r0, r2
 8008efa:	b933      	cbnz	r3, 8008f0a <_free_r+0x2e>
 8008efc:	6063      	str	r3, [r4, #4]
 8008efe:	6014      	str	r4, [r2, #0]
 8008f00:	4628      	mov	r0, r5
 8008f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f06:	f001 ba49 	b.w	800a39c <__malloc_unlock>
 8008f0a:	42a3      	cmp	r3, r4
 8008f0c:	d90c      	bls.n	8008f28 <_free_r+0x4c>
 8008f0e:	6821      	ldr	r1, [r4, #0]
 8008f10:	1862      	adds	r2, r4, r1
 8008f12:	4293      	cmp	r3, r2
 8008f14:	bf04      	itt	eq
 8008f16:	681a      	ldreq	r2, [r3, #0]
 8008f18:	685b      	ldreq	r3, [r3, #4]
 8008f1a:	6063      	str	r3, [r4, #4]
 8008f1c:	bf04      	itt	eq
 8008f1e:	1852      	addeq	r2, r2, r1
 8008f20:	6022      	streq	r2, [r4, #0]
 8008f22:	6004      	str	r4, [r0, #0]
 8008f24:	e7ec      	b.n	8008f00 <_free_r+0x24>
 8008f26:	4613      	mov	r3, r2
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	b10a      	cbz	r2, 8008f30 <_free_r+0x54>
 8008f2c:	42a2      	cmp	r2, r4
 8008f2e:	d9fa      	bls.n	8008f26 <_free_r+0x4a>
 8008f30:	6819      	ldr	r1, [r3, #0]
 8008f32:	1858      	adds	r0, r3, r1
 8008f34:	42a0      	cmp	r0, r4
 8008f36:	d10b      	bne.n	8008f50 <_free_r+0x74>
 8008f38:	6820      	ldr	r0, [r4, #0]
 8008f3a:	4401      	add	r1, r0
 8008f3c:	1858      	adds	r0, r3, r1
 8008f3e:	4282      	cmp	r2, r0
 8008f40:	6019      	str	r1, [r3, #0]
 8008f42:	d1dd      	bne.n	8008f00 <_free_r+0x24>
 8008f44:	6810      	ldr	r0, [r2, #0]
 8008f46:	6852      	ldr	r2, [r2, #4]
 8008f48:	605a      	str	r2, [r3, #4]
 8008f4a:	4401      	add	r1, r0
 8008f4c:	6019      	str	r1, [r3, #0]
 8008f4e:	e7d7      	b.n	8008f00 <_free_r+0x24>
 8008f50:	d902      	bls.n	8008f58 <_free_r+0x7c>
 8008f52:	230c      	movs	r3, #12
 8008f54:	602b      	str	r3, [r5, #0]
 8008f56:	e7d3      	b.n	8008f00 <_free_r+0x24>
 8008f58:	6820      	ldr	r0, [r4, #0]
 8008f5a:	1821      	adds	r1, r4, r0
 8008f5c:	428a      	cmp	r2, r1
 8008f5e:	bf04      	itt	eq
 8008f60:	6811      	ldreq	r1, [r2, #0]
 8008f62:	6852      	ldreq	r2, [r2, #4]
 8008f64:	6062      	str	r2, [r4, #4]
 8008f66:	bf04      	itt	eq
 8008f68:	1809      	addeq	r1, r1, r0
 8008f6a:	6021      	streq	r1, [r4, #0]
 8008f6c:	605c      	str	r4, [r3, #4]
 8008f6e:	e7c7      	b.n	8008f00 <_free_r+0x24>
 8008f70:	bd38      	pop	{r3, r4, r5, pc}
 8008f72:	bf00      	nop
 8008f74:	20000374 	.word	0x20000374

08008f78 <_malloc_r>:
 8008f78:	b570      	push	{r4, r5, r6, lr}
 8008f7a:	1ccd      	adds	r5, r1, #3
 8008f7c:	f025 0503 	bic.w	r5, r5, #3
 8008f80:	3508      	adds	r5, #8
 8008f82:	2d0c      	cmp	r5, #12
 8008f84:	bf38      	it	cc
 8008f86:	250c      	movcc	r5, #12
 8008f88:	2d00      	cmp	r5, #0
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	db01      	blt.n	8008f92 <_malloc_r+0x1a>
 8008f8e:	42a9      	cmp	r1, r5
 8008f90:	d903      	bls.n	8008f9a <_malloc_r+0x22>
 8008f92:	230c      	movs	r3, #12
 8008f94:	6033      	str	r3, [r6, #0]
 8008f96:	2000      	movs	r0, #0
 8008f98:	bd70      	pop	{r4, r5, r6, pc}
 8008f9a:	f001 f9fe 	bl	800a39a <__malloc_lock>
 8008f9e:	4a21      	ldr	r2, [pc, #132]	; (8009024 <_malloc_r+0xac>)
 8008fa0:	6814      	ldr	r4, [r2, #0]
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	b991      	cbnz	r1, 8008fcc <_malloc_r+0x54>
 8008fa6:	4c20      	ldr	r4, [pc, #128]	; (8009028 <_malloc_r+0xb0>)
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	b91b      	cbnz	r3, 8008fb4 <_malloc_r+0x3c>
 8008fac:	4630      	mov	r0, r6
 8008fae:	f000 fb87 	bl	80096c0 <_sbrk_r>
 8008fb2:	6020      	str	r0, [r4, #0]
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f000 fb82 	bl	80096c0 <_sbrk_r>
 8008fbc:	1c43      	adds	r3, r0, #1
 8008fbe:	d124      	bne.n	800900a <_malloc_r+0x92>
 8008fc0:	230c      	movs	r3, #12
 8008fc2:	6033      	str	r3, [r6, #0]
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f001 f9e9 	bl	800a39c <__malloc_unlock>
 8008fca:	e7e4      	b.n	8008f96 <_malloc_r+0x1e>
 8008fcc:	680b      	ldr	r3, [r1, #0]
 8008fce:	1b5b      	subs	r3, r3, r5
 8008fd0:	d418      	bmi.n	8009004 <_malloc_r+0x8c>
 8008fd2:	2b0b      	cmp	r3, #11
 8008fd4:	d90f      	bls.n	8008ff6 <_malloc_r+0x7e>
 8008fd6:	600b      	str	r3, [r1, #0]
 8008fd8:	50cd      	str	r5, [r1, r3]
 8008fda:	18cc      	adds	r4, r1, r3
 8008fdc:	4630      	mov	r0, r6
 8008fde:	f001 f9dd 	bl	800a39c <__malloc_unlock>
 8008fe2:	f104 000b 	add.w	r0, r4, #11
 8008fe6:	1d23      	adds	r3, r4, #4
 8008fe8:	f020 0007 	bic.w	r0, r0, #7
 8008fec:	1ac3      	subs	r3, r0, r3
 8008fee:	d0d3      	beq.n	8008f98 <_malloc_r+0x20>
 8008ff0:	425a      	negs	r2, r3
 8008ff2:	50e2      	str	r2, [r4, r3]
 8008ff4:	e7d0      	b.n	8008f98 <_malloc_r+0x20>
 8008ff6:	428c      	cmp	r4, r1
 8008ff8:	684b      	ldr	r3, [r1, #4]
 8008ffa:	bf16      	itet	ne
 8008ffc:	6063      	strne	r3, [r4, #4]
 8008ffe:	6013      	streq	r3, [r2, #0]
 8009000:	460c      	movne	r4, r1
 8009002:	e7eb      	b.n	8008fdc <_malloc_r+0x64>
 8009004:	460c      	mov	r4, r1
 8009006:	6849      	ldr	r1, [r1, #4]
 8009008:	e7cc      	b.n	8008fa4 <_malloc_r+0x2c>
 800900a:	1cc4      	adds	r4, r0, #3
 800900c:	f024 0403 	bic.w	r4, r4, #3
 8009010:	42a0      	cmp	r0, r4
 8009012:	d005      	beq.n	8009020 <_malloc_r+0xa8>
 8009014:	1a21      	subs	r1, r4, r0
 8009016:	4630      	mov	r0, r6
 8009018:	f000 fb52 	bl	80096c0 <_sbrk_r>
 800901c:	3001      	adds	r0, #1
 800901e:	d0cf      	beq.n	8008fc0 <_malloc_r+0x48>
 8009020:	6025      	str	r5, [r4, #0]
 8009022:	e7db      	b.n	8008fdc <_malloc_r+0x64>
 8009024:	20000374 	.word	0x20000374
 8009028:	20000378 	.word	0x20000378

0800902c <__cvt>:
 800902c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009030:	ec55 4b10 	vmov	r4, r5, d0
 8009034:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009036:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800903a:	2d00      	cmp	r5, #0
 800903c:	460e      	mov	r6, r1
 800903e:	4691      	mov	r9, r2
 8009040:	4619      	mov	r1, r3
 8009042:	bfb8      	it	lt
 8009044:	4622      	movlt	r2, r4
 8009046:	462b      	mov	r3, r5
 8009048:	f027 0720 	bic.w	r7, r7, #32
 800904c:	bfbb      	ittet	lt
 800904e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009052:	461d      	movlt	r5, r3
 8009054:	2300      	movge	r3, #0
 8009056:	232d      	movlt	r3, #45	; 0x2d
 8009058:	bfb8      	it	lt
 800905a:	4614      	movlt	r4, r2
 800905c:	2f46      	cmp	r7, #70	; 0x46
 800905e:	700b      	strb	r3, [r1, #0]
 8009060:	d004      	beq.n	800906c <__cvt+0x40>
 8009062:	2f45      	cmp	r7, #69	; 0x45
 8009064:	d100      	bne.n	8009068 <__cvt+0x3c>
 8009066:	3601      	adds	r6, #1
 8009068:	2102      	movs	r1, #2
 800906a:	e000      	b.n	800906e <__cvt+0x42>
 800906c:	2103      	movs	r1, #3
 800906e:	ab03      	add	r3, sp, #12
 8009070:	9301      	str	r3, [sp, #4]
 8009072:	ab02      	add	r3, sp, #8
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	4632      	mov	r2, r6
 8009078:	4653      	mov	r3, sl
 800907a:	ec45 4b10 	vmov	d0, r4, r5
 800907e:	f000 fbbb 	bl	80097f8 <_dtoa_r>
 8009082:	2f47      	cmp	r7, #71	; 0x47
 8009084:	4680      	mov	r8, r0
 8009086:	d102      	bne.n	800908e <__cvt+0x62>
 8009088:	f019 0f01 	tst.w	r9, #1
 800908c:	d026      	beq.n	80090dc <__cvt+0xb0>
 800908e:	2f46      	cmp	r7, #70	; 0x46
 8009090:	eb08 0906 	add.w	r9, r8, r6
 8009094:	d111      	bne.n	80090ba <__cvt+0x8e>
 8009096:	f898 3000 	ldrb.w	r3, [r8]
 800909a:	2b30      	cmp	r3, #48	; 0x30
 800909c:	d10a      	bne.n	80090b4 <__cvt+0x88>
 800909e:	2200      	movs	r2, #0
 80090a0:	2300      	movs	r3, #0
 80090a2:	4620      	mov	r0, r4
 80090a4:	4629      	mov	r1, r5
 80090a6:	f7f7 fcbb 	bl	8000a20 <__aeabi_dcmpeq>
 80090aa:	b918      	cbnz	r0, 80090b4 <__cvt+0x88>
 80090ac:	f1c6 0601 	rsb	r6, r6, #1
 80090b0:	f8ca 6000 	str.w	r6, [sl]
 80090b4:	f8da 3000 	ldr.w	r3, [sl]
 80090b8:	4499      	add	r9, r3
 80090ba:	2200      	movs	r2, #0
 80090bc:	2300      	movs	r3, #0
 80090be:	4620      	mov	r0, r4
 80090c0:	4629      	mov	r1, r5
 80090c2:	f7f7 fcad 	bl	8000a20 <__aeabi_dcmpeq>
 80090c6:	b938      	cbnz	r0, 80090d8 <__cvt+0xac>
 80090c8:	2230      	movs	r2, #48	; 0x30
 80090ca:	9b03      	ldr	r3, [sp, #12]
 80090cc:	454b      	cmp	r3, r9
 80090ce:	d205      	bcs.n	80090dc <__cvt+0xb0>
 80090d0:	1c59      	adds	r1, r3, #1
 80090d2:	9103      	str	r1, [sp, #12]
 80090d4:	701a      	strb	r2, [r3, #0]
 80090d6:	e7f8      	b.n	80090ca <__cvt+0x9e>
 80090d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80090dc:	9b03      	ldr	r3, [sp, #12]
 80090de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090e0:	eba3 0308 	sub.w	r3, r3, r8
 80090e4:	4640      	mov	r0, r8
 80090e6:	6013      	str	r3, [r2, #0]
 80090e8:	b004      	add	sp, #16
 80090ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080090ee <__exponent>:
 80090ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090f0:	2900      	cmp	r1, #0
 80090f2:	4604      	mov	r4, r0
 80090f4:	bfba      	itte	lt
 80090f6:	4249      	neglt	r1, r1
 80090f8:	232d      	movlt	r3, #45	; 0x2d
 80090fa:	232b      	movge	r3, #43	; 0x2b
 80090fc:	2909      	cmp	r1, #9
 80090fe:	f804 2b02 	strb.w	r2, [r4], #2
 8009102:	7043      	strb	r3, [r0, #1]
 8009104:	dd20      	ble.n	8009148 <__exponent+0x5a>
 8009106:	f10d 0307 	add.w	r3, sp, #7
 800910a:	461f      	mov	r7, r3
 800910c:	260a      	movs	r6, #10
 800910e:	fb91 f5f6 	sdiv	r5, r1, r6
 8009112:	fb06 1115 	mls	r1, r6, r5, r1
 8009116:	3130      	adds	r1, #48	; 0x30
 8009118:	2d09      	cmp	r5, #9
 800911a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800911e:	f103 32ff 	add.w	r2, r3, #4294967295
 8009122:	4629      	mov	r1, r5
 8009124:	dc09      	bgt.n	800913a <__exponent+0x4c>
 8009126:	3130      	adds	r1, #48	; 0x30
 8009128:	3b02      	subs	r3, #2
 800912a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800912e:	42bb      	cmp	r3, r7
 8009130:	4622      	mov	r2, r4
 8009132:	d304      	bcc.n	800913e <__exponent+0x50>
 8009134:	1a10      	subs	r0, r2, r0
 8009136:	b003      	add	sp, #12
 8009138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800913a:	4613      	mov	r3, r2
 800913c:	e7e7      	b.n	800910e <__exponent+0x20>
 800913e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009142:	f804 2b01 	strb.w	r2, [r4], #1
 8009146:	e7f2      	b.n	800912e <__exponent+0x40>
 8009148:	2330      	movs	r3, #48	; 0x30
 800914a:	4419      	add	r1, r3
 800914c:	7083      	strb	r3, [r0, #2]
 800914e:	1d02      	adds	r2, r0, #4
 8009150:	70c1      	strb	r1, [r0, #3]
 8009152:	e7ef      	b.n	8009134 <__exponent+0x46>

08009154 <_printf_float>:
 8009154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009158:	b08d      	sub	sp, #52	; 0x34
 800915a:	460c      	mov	r4, r1
 800915c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009160:	4616      	mov	r6, r2
 8009162:	461f      	mov	r7, r3
 8009164:	4605      	mov	r5, r0
 8009166:	f001 f8ff 	bl	800a368 <_localeconv_r>
 800916a:	6803      	ldr	r3, [r0, #0]
 800916c:	9304      	str	r3, [sp, #16]
 800916e:	4618      	mov	r0, r3
 8009170:	f7f7 f82a 	bl	80001c8 <strlen>
 8009174:	2300      	movs	r3, #0
 8009176:	930a      	str	r3, [sp, #40]	; 0x28
 8009178:	f8d8 3000 	ldr.w	r3, [r8]
 800917c:	9005      	str	r0, [sp, #20]
 800917e:	3307      	adds	r3, #7
 8009180:	f023 0307 	bic.w	r3, r3, #7
 8009184:	f103 0208 	add.w	r2, r3, #8
 8009188:	f894 a018 	ldrb.w	sl, [r4, #24]
 800918c:	f8d4 b000 	ldr.w	fp, [r4]
 8009190:	f8c8 2000 	str.w	r2, [r8]
 8009194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009198:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800919c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80091a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80091a4:	9307      	str	r3, [sp, #28]
 80091a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80091aa:	f04f 32ff 	mov.w	r2, #4294967295
 80091ae:	4ba7      	ldr	r3, [pc, #668]	; (800944c <_printf_float+0x2f8>)
 80091b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091b4:	f7f7 fc66 	bl	8000a84 <__aeabi_dcmpun>
 80091b8:	bb70      	cbnz	r0, 8009218 <_printf_float+0xc4>
 80091ba:	f04f 32ff 	mov.w	r2, #4294967295
 80091be:	4ba3      	ldr	r3, [pc, #652]	; (800944c <_printf_float+0x2f8>)
 80091c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091c4:	f7f7 fc40 	bl	8000a48 <__aeabi_dcmple>
 80091c8:	bb30      	cbnz	r0, 8009218 <_printf_float+0xc4>
 80091ca:	2200      	movs	r2, #0
 80091cc:	2300      	movs	r3, #0
 80091ce:	4640      	mov	r0, r8
 80091d0:	4649      	mov	r1, r9
 80091d2:	f7f7 fc2f 	bl	8000a34 <__aeabi_dcmplt>
 80091d6:	b110      	cbz	r0, 80091de <_printf_float+0x8a>
 80091d8:	232d      	movs	r3, #45	; 0x2d
 80091da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091de:	4a9c      	ldr	r2, [pc, #624]	; (8009450 <_printf_float+0x2fc>)
 80091e0:	4b9c      	ldr	r3, [pc, #624]	; (8009454 <_printf_float+0x300>)
 80091e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80091e6:	bf8c      	ite	hi
 80091e8:	4690      	movhi	r8, r2
 80091ea:	4698      	movls	r8, r3
 80091ec:	2303      	movs	r3, #3
 80091ee:	f02b 0204 	bic.w	r2, fp, #4
 80091f2:	6123      	str	r3, [r4, #16]
 80091f4:	6022      	str	r2, [r4, #0]
 80091f6:	f04f 0900 	mov.w	r9, #0
 80091fa:	9700      	str	r7, [sp, #0]
 80091fc:	4633      	mov	r3, r6
 80091fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8009200:	4621      	mov	r1, r4
 8009202:	4628      	mov	r0, r5
 8009204:	f000 f9e6 	bl	80095d4 <_printf_common>
 8009208:	3001      	adds	r0, #1
 800920a:	f040 808d 	bne.w	8009328 <_printf_float+0x1d4>
 800920e:	f04f 30ff 	mov.w	r0, #4294967295
 8009212:	b00d      	add	sp, #52	; 0x34
 8009214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009218:	4642      	mov	r2, r8
 800921a:	464b      	mov	r3, r9
 800921c:	4640      	mov	r0, r8
 800921e:	4649      	mov	r1, r9
 8009220:	f7f7 fc30 	bl	8000a84 <__aeabi_dcmpun>
 8009224:	b110      	cbz	r0, 800922c <_printf_float+0xd8>
 8009226:	4a8c      	ldr	r2, [pc, #560]	; (8009458 <_printf_float+0x304>)
 8009228:	4b8c      	ldr	r3, [pc, #560]	; (800945c <_printf_float+0x308>)
 800922a:	e7da      	b.n	80091e2 <_printf_float+0x8e>
 800922c:	6861      	ldr	r1, [r4, #4]
 800922e:	1c4b      	adds	r3, r1, #1
 8009230:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009234:	a80a      	add	r0, sp, #40	; 0x28
 8009236:	d13e      	bne.n	80092b6 <_printf_float+0x162>
 8009238:	2306      	movs	r3, #6
 800923a:	6063      	str	r3, [r4, #4]
 800923c:	2300      	movs	r3, #0
 800923e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009242:	ab09      	add	r3, sp, #36	; 0x24
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	ec49 8b10 	vmov	d0, r8, r9
 800924a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800924e:	6022      	str	r2, [r4, #0]
 8009250:	f8cd a004 	str.w	sl, [sp, #4]
 8009254:	6861      	ldr	r1, [r4, #4]
 8009256:	4628      	mov	r0, r5
 8009258:	f7ff fee8 	bl	800902c <__cvt>
 800925c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009260:	2b47      	cmp	r3, #71	; 0x47
 8009262:	4680      	mov	r8, r0
 8009264:	d109      	bne.n	800927a <_printf_float+0x126>
 8009266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009268:	1cd8      	adds	r0, r3, #3
 800926a:	db02      	blt.n	8009272 <_printf_float+0x11e>
 800926c:	6862      	ldr	r2, [r4, #4]
 800926e:	4293      	cmp	r3, r2
 8009270:	dd47      	ble.n	8009302 <_printf_float+0x1ae>
 8009272:	f1aa 0a02 	sub.w	sl, sl, #2
 8009276:	fa5f fa8a 	uxtb.w	sl, sl
 800927a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800927e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009280:	d824      	bhi.n	80092cc <_printf_float+0x178>
 8009282:	3901      	subs	r1, #1
 8009284:	4652      	mov	r2, sl
 8009286:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800928a:	9109      	str	r1, [sp, #36]	; 0x24
 800928c:	f7ff ff2f 	bl	80090ee <__exponent>
 8009290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009292:	1813      	adds	r3, r2, r0
 8009294:	2a01      	cmp	r2, #1
 8009296:	4681      	mov	r9, r0
 8009298:	6123      	str	r3, [r4, #16]
 800929a:	dc02      	bgt.n	80092a2 <_printf_float+0x14e>
 800929c:	6822      	ldr	r2, [r4, #0]
 800929e:	07d1      	lsls	r1, r2, #31
 80092a0:	d501      	bpl.n	80092a6 <_printf_float+0x152>
 80092a2:	3301      	adds	r3, #1
 80092a4:	6123      	str	r3, [r4, #16]
 80092a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d0a5      	beq.n	80091fa <_printf_float+0xa6>
 80092ae:	232d      	movs	r3, #45	; 0x2d
 80092b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092b4:	e7a1      	b.n	80091fa <_printf_float+0xa6>
 80092b6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80092ba:	f000 8177 	beq.w	80095ac <_printf_float+0x458>
 80092be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80092c2:	d1bb      	bne.n	800923c <_printf_float+0xe8>
 80092c4:	2900      	cmp	r1, #0
 80092c6:	d1b9      	bne.n	800923c <_printf_float+0xe8>
 80092c8:	2301      	movs	r3, #1
 80092ca:	e7b6      	b.n	800923a <_printf_float+0xe6>
 80092cc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80092d0:	d119      	bne.n	8009306 <_printf_float+0x1b2>
 80092d2:	2900      	cmp	r1, #0
 80092d4:	6863      	ldr	r3, [r4, #4]
 80092d6:	dd0c      	ble.n	80092f2 <_printf_float+0x19e>
 80092d8:	6121      	str	r1, [r4, #16]
 80092da:	b913      	cbnz	r3, 80092e2 <_printf_float+0x18e>
 80092dc:	6822      	ldr	r2, [r4, #0]
 80092de:	07d2      	lsls	r2, r2, #31
 80092e0:	d502      	bpl.n	80092e8 <_printf_float+0x194>
 80092e2:	3301      	adds	r3, #1
 80092e4:	440b      	add	r3, r1
 80092e6:	6123      	str	r3, [r4, #16]
 80092e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80092ec:	f04f 0900 	mov.w	r9, #0
 80092f0:	e7d9      	b.n	80092a6 <_printf_float+0x152>
 80092f2:	b913      	cbnz	r3, 80092fa <_printf_float+0x1a6>
 80092f4:	6822      	ldr	r2, [r4, #0]
 80092f6:	07d0      	lsls	r0, r2, #31
 80092f8:	d501      	bpl.n	80092fe <_printf_float+0x1aa>
 80092fa:	3302      	adds	r3, #2
 80092fc:	e7f3      	b.n	80092e6 <_printf_float+0x192>
 80092fe:	2301      	movs	r3, #1
 8009300:	e7f1      	b.n	80092e6 <_printf_float+0x192>
 8009302:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009306:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800930a:	4293      	cmp	r3, r2
 800930c:	db05      	blt.n	800931a <_printf_float+0x1c6>
 800930e:	6822      	ldr	r2, [r4, #0]
 8009310:	6123      	str	r3, [r4, #16]
 8009312:	07d1      	lsls	r1, r2, #31
 8009314:	d5e8      	bpl.n	80092e8 <_printf_float+0x194>
 8009316:	3301      	adds	r3, #1
 8009318:	e7e5      	b.n	80092e6 <_printf_float+0x192>
 800931a:	2b00      	cmp	r3, #0
 800931c:	bfd4      	ite	le
 800931e:	f1c3 0302 	rsble	r3, r3, #2
 8009322:	2301      	movgt	r3, #1
 8009324:	4413      	add	r3, r2
 8009326:	e7de      	b.n	80092e6 <_printf_float+0x192>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	055a      	lsls	r2, r3, #21
 800932c:	d407      	bmi.n	800933e <_printf_float+0x1ea>
 800932e:	6923      	ldr	r3, [r4, #16]
 8009330:	4642      	mov	r2, r8
 8009332:	4631      	mov	r1, r6
 8009334:	4628      	mov	r0, r5
 8009336:	47b8      	blx	r7
 8009338:	3001      	adds	r0, #1
 800933a:	d12b      	bne.n	8009394 <_printf_float+0x240>
 800933c:	e767      	b.n	800920e <_printf_float+0xba>
 800933e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009342:	f240 80dc 	bls.w	80094fe <_printf_float+0x3aa>
 8009346:	2200      	movs	r2, #0
 8009348:	2300      	movs	r3, #0
 800934a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800934e:	f7f7 fb67 	bl	8000a20 <__aeabi_dcmpeq>
 8009352:	2800      	cmp	r0, #0
 8009354:	d033      	beq.n	80093be <_printf_float+0x26a>
 8009356:	2301      	movs	r3, #1
 8009358:	4a41      	ldr	r2, [pc, #260]	; (8009460 <_printf_float+0x30c>)
 800935a:	4631      	mov	r1, r6
 800935c:	4628      	mov	r0, r5
 800935e:	47b8      	blx	r7
 8009360:	3001      	adds	r0, #1
 8009362:	f43f af54 	beq.w	800920e <_printf_float+0xba>
 8009366:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800936a:	429a      	cmp	r2, r3
 800936c:	db02      	blt.n	8009374 <_printf_float+0x220>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	07d8      	lsls	r0, r3, #31
 8009372:	d50f      	bpl.n	8009394 <_printf_float+0x240>
 8009374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009378:	4631      	mov	r1, r6
 800937a:	4628      	mov	r0, r5
 800937c:	47b8      	blx	r7
 800937e:	3001      	adds	r0, #1
 8009380:	f43f af45 	beq.w	800920e <_printf_float+0xba>
 8009384:	f04f 0800 	mov.w	r8, #0
 8009388:	f104 091a 	add.w	r9, r4, #26
 800938c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800938e:	3b01      	subs	r3, #1
 8009390:	4543      	cmp	r3, r8
 8009392:	dc09      	bgt.n	80093a8 <_printf_float+0x254>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	079b      	lsls	r3, r3, #30
 8009398:	f100 8103 	bmi.w	80095a2 <_printf_float+0x44e>
 800939c:	68e0      	ldr	r0, [r4, #12]
 800939e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093a0:	4298      	cmp	r0, r3
 80093a2:	bfb8      	it	lt
 80093a4:	4618      	movlt	r0, r3
 80093a6:	e734      	b.n	8009212 <_printf_float+0xbe>
 80093a8:	2301      	movs	r3, #1
 80093aa:	464a      	mov	r2, r9
 80093ac:	4631      	mov	r1, r6
 80093ae:	4628      	mov	r0, r5
 80093b0:	47b8      	blx	r7
 80093b2:	3001      	adds	r0, #1
 80093b4:	f43f af2b 	beq.w	800920e <_printf_float+0xba>
 80093b8:	f108 0801 	add.w	r8, r8, #1
 80093bc:	e7e6      	b.n	800938c <_printf_float+0x238>
 80093be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	dc2b      	bgt.n	800941c <_printf_float+0x2c8>
 80093c4:	2301      	movs	r3, #1
 80093c6:	4a26      	ldr	r2, [pc, #152]	; (8009460 <_printf_float+0x30c>)
 80093c8:	4631      	mov	r1, r6
 80093ca:	4628      	mov	r0, r5
 80093cc:	47b8      	blx	r7
 80093ce:	3001      	adds	r0, #1
 80093d0:	f43f af1d 	beq.w	800920e <_printf_float+0xba>
 80093d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d6:	b923      	cbnz	r3, 80093e2 <_printf_float+0x28e>
 80093d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093da:	b913      	cbnz	r3, 80093e2 <_printf_float+0x28e>
 80093dc:	6823      	ldr	r3, [r4, #0]
 80093de:	07d9      	lsls	r1, r3, #31
 80093e0:	d5d8      	bpl.n	8009394 <_printf_float+0x240>
 80093e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093e6:	4631      	mov	r1, r6
 80093e8:	4628      	mov	r0, r5
 80093ea:	47b8      	blx	r7
 80093ec:	3001      	adds	r0, #1
 80093ee:	f43f af0e 	beq.w	800920e <_printf_float+0xba>
 80093f2:	f04f 0900 	mov.w	r9, #0
 80093f6:	f104 0a1a 	add.w	sl, r4, #26
 80093fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093fc:	425b      	negs	r3, r3
 80093fe:	454b      	cmp	r3, r9
 8009400:	dc01      	bgt.n	8009406 <_printf_float+0x2b2>
 8009402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009404:	e794      	b.n	8009330 <_printf_float+0x1dc>
 8009406:	2301      	movs	r3, #1
 8009408:	4652      	mov	r2, sl
 800940a:	4631      	mov	r1, r6
 800940c:	4628      	mov	r0, r5
 800940e:	47b8      	blx	r7
 8009410:	3001      	adds	r0, #1
 8009412:	f43f aefc 	beq.w	800920e <_printf_float+0xba>
 8009416:	f109 0901 	add.w	r9, r9, #1
 800941a:	e7ee      	b.n	80093fa <_printf_float+0x2a6>
 800941c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800941e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009420:	429a      	cmp	r2, r3
 8009422:	bfa8      	it	ge
 8009424:	461a      	movge	r2, r3
 8009426:	2a00      	cmp	r2, #0
 8009428:	4691      	mov	r9, r2
 800942a:	dd07      	ble.n	800943c <_printf_float+0x2e8>
 800942c:	4613      	mov	r3, r2
 800942e:	4631      	mov	r1, r6
 8009430:	4642      	mov	r2, r8
 8009432:	4628      	mov	r0, r5
 8009434:	47b8      	blx	r7
 8009436:	3001      	adds	r0, #1
 8009438:	f43f aee9 	beq.w	800920e <_printf_float+0xba>
 800943c:	f104 031a 	add.w	r3, r4, #26
 8009440:	f04f 0b00 	mov.w	fp, #0
 8009444:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009448:	9306      	str	r3, [sp, #24]
 800944a:	e015      	b.n	8009478 <_printf_float+0x324>
 800944c:	7fefffff 	.word	0x7fefffff
 8009450:	0800aa2c 	.word	0x0800aa2c
 8009454:	0800aa28 	.word	0x0800aa28
 8009458:	0800aa34 	.word	0x0800aa34
 800945c:	0800aa30 	.word	0x0800aa30
 8009460:	0800aa38 	.word	0x0800aa38
 8009464:	2301      	movs	r3, #1
 8009466:	9a06      	ldr	r2, [sp, #24]
 8009468:	4631      	mov	r1, r6
 800946a:	4628      	mov	r0, r5
 800946c:	47b8      	blx	r7
 800946e:	3001      	adds	r0, #1
 8009470:	f43f aecd 	beq.w	800920e <_printf_float+0xba>
 8009474:	f10b 0b01 	add.w	fp, fp, #1
 8009478:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800947c:	ebaa 0309 	sub.w	r3, sl, r9
 8009480:	455b      	cmp	r3, fp
 8009482:	dcef      	bgt.n	8009464 <_printf_float+0x310>
 8009484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009488:	429a      	cmp	r2, r3
 800948a:	44d0      	add	r8, sl
 800948c:	db15      	blt.n	80094ba <_printf_float+0x366>
 800948e:	6823      	ldr	r3, [r4, #0]
 8009490:	07da      	lsls	r2, r3, #31
 8009492:	d412      	bmi.n	80094ba <_printf_float+0x366>
 8009494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009496:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009498:	eba3 020a 	sub.w	r2, r3, sl
 800949c:	eba3 0a01 	sub.w	sl, r3, r1
 80094a0:	4592      	cmp	sl, r2
 80094a2:	bfa8      	it	ge
 80094a4:	4692      	movge	sl, r2
 80094a6:	f1ba 0f00 	cmp.w	sl, #0
 80094aa:	dc0e      	bgt.n	80094ca <_printf_float+0x376>
 80094ac:	f04f 0800 	mov.w	r8, #0
 80094b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094b4:	f104 091a 	add.w	r9, r4, #26
 80094b8:	e019      	b.n	80094ee <_printf_float+0x39a>
 80094ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094be:	4631      	mov	r1, r6
 80094c0:	4628      	mov	r0, r5
 80094c2:	47b8      	blx	r7
 80094c4:	3001      	adds	r0, #1
 80094c6:	d1e5      	bne.n	8009494 <_printf_float+0x340>
 80094c8:	e6a1      	b.n	800920e <_printf_float+0xba>
 80094ca:	4653      	mov	r3, sl
 80094cc:	4642      	mov	r2, r8
 80094ce:	4631      	mov	r1, r6
 80094d0:	4628      	mov	r0, r5
 80094d2:	47b8      	blx	r7
 80094d4:	3001      	adds	r0, #1
 80094d6:	d1e9      	bne.n	80094ac <_printf_float+0x358>
 80094d8:	e699      	b.n	800920e <_printf_float+0xba>
 80094da:	2301      	movs	r3, #1
 80094dc:	464a      	mov	r2, r9
 80094de:	4631      	mov	r1, r6
 80094e0:	4628      	mov	r0, r5
 80094e2:	47b8      	blx	r7
 80094e4:	3001      	adds	r0, #1
 80094e6:	f43f ae92 	beq.w	800920e <_printf_float+0xba>
 80094ea:	f108 0801 	add.w	r8, r8, #1
 80094ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094f2:	1a9b      	subs	r3, r3, r2
 80094f4:	eba3 030a 	sub.w	r3, r3, sl
 80094f8:	4543      	cmp	r3, r8
 80094fa:	dcee      	bgt.n	80094da <_printf_float+0x386>
 80094fc:	e74a      	b.n	8009394 <_printf_float+0x240>
 80094fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009500:	2a01      	cmp	r2, #1
 8009502:	dc01      	bgt.n	8009508 <_printf_float+0x3b4>
 8009504:	07db      	lsls	r3, r3, #31
 8009506:	d53a      	bpl.n	800957e <_printf_float+0x42a>
 8009508:	2301      	movs	r3, #1
 800950a:	4642      	mov	r2, r8
 800950c:	4631      	mov	r1, r6
 800950e:	4628      	mov	r0, r5
 8009510:	47b8      	blx	r7
 8009512:	3001      	adds	r0, #1
 8009514:	f43f ae7b 	beq.w	800920e <_printf_float+0xba>
 8009518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800951c:	4631      	mov	r1, r6
 800951e:	4628      	mov	r0, r5
 8009520:	47b8      	blx	r7
 8009522:	3001      	adds	r0, #1
 8009524:	f108 0801 	add.w	r8, r8, #1
 8009528:	f43f ae71 	beq.w	800920e <_printf_float+0xba>
 800952c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800952e:	2200      	movs	r2, #0
 8009530:	f103 3aff 	add.w	sl, r3, #4294967295
 8009534:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009538:	2300      	movs	r3, #0
 800953a:	f7f7 fa71 	bl	8000a20 <__aeabi_dcmpeq>
 800953e:	b9c8      	cbnz	r0, 8009574 <_printf_float+0x420>
 8009540:	4653      	mov	r3, sl
 8009542:	4642      	mov	r2, r8
 8009544:	4631      	mov	r1, r6
 8009546:	4628      	mov	r0, r5
 8009548:	47b8      	blx	r7
 800954a:	3001      	adds	r0, #1
 800954c:	d10e      	bne.n	800956c <_printf_float+0x418>
 800954e:	e65e      	b.n	800920e <_printf_float+0xba>
 8009550:	2301      	movs	r3, #1
 8009552:	4652      	mov	r2, sl
 8009554:	4631      	mov	r1, r6
 8009556:	4628      	mov	r0, r5
 8009558:	47b8      	blx	r7
 800955a:	3001      	adds	r0, #1
 800955c:	f43f ae57 	beq.w	800920e <_printf_float+0xba>
 8009560:	f108 0801 	add.w	r8, r8, #1
 8009564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009566:	3b01      	subs	r3, #1
 8009568:	4543      	cmp	r3, r8
 800956a:	dcf1      	bgt.n	8009550 <_printf_float+0x3fc>
 800956c:	464b      	mov	r3, r9
 800956e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009572:	e6de      	b.n	8009332 <_printf_float+0x1de>
 8009574:	f04f 0800 	mov.w	r8, #0
 8009578:	f104 0a1a 	add.w	sl, r4, #26
 800957c:	e7f2      	b.n	8009564 <_printf_float+0x410>
 800957e:	2301      	movs	r3, #1
 8009580:	e7df      	b.n	8009542 <_printf_float+0x3ee>
 8009582:	2301      	movs	r3, #1
 8009584:	464a      	mov	r2, r9
 8009586:	4631      	mov	r1, r6
 8009588:	4628      	mov	r0, r5
 800958a:	47b8      	blx	r7
 800958c:	3001      	adds	r0, #1
 800958e:	f43f ae3e 	beq.w	800920e <_printf_float+0xba>
 8009592:	f108 0801 	add.w	r8, r8, #1
 8009596:	68e3      	ldr	r3, [r4, #12]
 8009598:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800959a:	1a9b      	subs	r3, r3, r2
 800959c:	4543      	cmp	r3, r8
 800959e:	dcf0      	bgt.n	8009582 <_printf_float+0x42e>
 80095a0:	e6fc      	b.n	800939c <_printf_float+0x248>
 80095a2:	f04f 0800 	mov.w	r8, #0
 80095a6:	f104 0919 	add.w	r9, r4, #25
 80095aa:	e7f4      	b.n	8009596 <_printf_float+0x442>
 80095ac:	2900      	cmp	r1, #0
 80095ae:	f43f ae8b 	beq.w	80092c8 <_printf_float+0x174>
 80095b2:	2300      	movs	r3, #0
 80095b4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80095b8:	ab09      	add	r3, sp, #36	; 0x24
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	ec49 8b10 	vmov	d0, r8, r9
 80095c0:	6022      	str	r2, [r4, #0]
 80095c2:	f8cd a004 	str.w	sl, [sp, #4]
 80095c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80095ca:	4628      	mov	r0, r5
 80095cc:	f7ff fd2e 	bl	800902c <__cvt>
 80095d0:	4680      	mov	r8, r0
 80095d2:	e648      	b.n	8009266 <_printf_float+0x112>

080095d4 <_printf_common>:
 80095d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d8:	4691      	mov	r9, r2
 80095da:	461f      	mov	r7, r3
 80095dc:	688a      	ldr	r2, [r1, #8]
 80095de:	690b      	ldr	r3, [r1, #16]
 80095e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095e4:	4293      	cmp	r3, r2
 80095e6:	bfb8      	it	lt
 80095e8:	4613      	movlt	r3, r2
 80095ea:	f8c9 3000 	str.w	r3, [r9]
 80095ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095f2:	4606      	mov	r6, r0
 80095f4:	460c      	mov	r4, r1
 80095f6:	b112      	cbz	r2, 80095fe <_printf_common+0x2a>
 80095f8:	3301      	adds	r3, #1
 80095fa:	f8c9 3000 	str.w	r3, [r9]
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	0699      	lsls	r1, r3, #26
 8009602:	bf42      	ittt	mi
 8009604:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009608:	3302      	addmi	r3, #2
 800960a:	f8c9 3000 	strmi.w	r3, [r9]
 800960e:	6825      	ldr	r5, [r4, #0]
 8009610:	f015 0506 	ands.w	r5, r5, #6
 8009614:	d107      	bne.n	8009626 <_printf_common+0x52>
 8009616:	f104 0a19 	add.w	sl, r4, #25
 800961a:	68e3      	ldr	r3, [r4, #12]
 800961c:	f8d9 2000 	ldr.w	r2, [r9]
 8009620:	1a9b      	subs	r3, r3, r2
 8009622:	42ab      	cmp	r3, r5
 8009624:	dc28      	bgt.n	8009678 <_printf_common+0xa4>
 8009626:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800962a:	6822      	ldr	r2, [r4, #0]
 800962c:	3300      	adds	r3, #0
 800962e:	bf18      	it	ne
 8009630:	2301      	movne	r3, #1
 8009632:	0692      	lsls	r2, r2, #26
 8009634:	d42d      	bmi.n	8009692 <_printf_common+0xbe>
 8009636:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800963a:	4639      	mov	r1, r7
 800963c:	4630      	mov	r0, r6
 800963e:	47c0      	blx	r8
 8009640:	3001      	adds	r0, #1
 8009642:	d020      	beq.n	8009686 <_printf_common+0xb2>
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	68e5      	ldr	r5, [r4, #12]
 8009648:	f8d9 2000 	ldr.w	r2, [r9]
 800964c:	f003 0306 	and.w	r3, r3, #6
 8009650:	2b04      	cmp	r3, #4
 8009652:	bf08      	it	eq
 8009654:	1aad      	subeq	r5, r5, r2
 8009656:	68a3      	ldr	r3, [r4, #8]
 8009658:	6922      	ldr	r2, [r4, #16]
 800965a:	bf0c      	ite	eq
 800965c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009660:	2500      	movne	r5, #0
 8009662:	4293      	cmp	r3, r2
 8009664:	bfc4      	itt	gt
 8009666:	1a9b      	subgt	r3, r3, r2
 8009668:	18ed      	addgt	r5, r5, r3
 800966a:	f04f 0900 	mov.w	r9, #0
 800966e:	341a      	adds	r4, #26
 8009670:	454d      	cmp	r5, r9
 8009672:	d11a      	bne.n	80096aa <_printf_common+0xd6>
 8009674:	2000      	movs	r0, #0
 8009676:	e008      	b.n	800968a <_printf_common+0xb6>
 8009678:	2301      	movs	r3, #1
 800967a:	4652      	mov	r2, sl
 800967c:	4639      	mov	r1, r7
 800967e:	4630      	mov	r0, r6
 8009680:	47c0      	blx	r8
 8009682:	3001      	adds	r0, #1
 8009684:	d103      	bne.n	800968e <_printf_common+0xba>
 8009686:	f04f 30ff 	mov.w	r0, #4294967295
 800968a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800968e:	3501      	adds	r5, #1
 8009690:	e7c3      	b.n	800961a <_printf_common+0x46>
 8009692:	18e1      	adds	r1, r4, r3
 8009694:	1c5a      	adds	r2, r3, #1
 8009696:	2030      	movs	r0, #48	; 0x30
 8009698:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800969c:	4422      	add	r2, r4
 800969e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096a6:	3302      	adds	r3, #2
 80096a8:	e7c5      	b.n	8009636 <_printf_common+0x62>
 80096aa:	2301      	movs	r3, #1
 80096ac:	4622      	mov	r2, r4
 80096ae:	4639      	mov	r1, r7
 80096b0:	4630      	mov	r0, r6
 80096b2:	47c0      	blx	r8
 80096b4:	3001      	adds	r0, #1
 80096b6:	d0e6      	beq.n	8009686 <_printf_common+0xb2>
 80096b8:	f109 0901 	add.w	r9, r9, #1
 80096bc:	e7d8      	b.n	8009670 <_printf_common+0x9c>
	...

080096c0 <_sbrk_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4c06      	ldr	r4, [pc, #24]	; (80096dc <_sbrk_r+0x1c>)
 80096c4:	2300      	movs	r3, #0
 80096c6:	4605      	mov	r5, r0
 80096c8:	4608      	mov	r0, r1
 80096ca:	6023      	str	r3, [r4, #0]
 80096cc:	f7f8 fb1c 	bl	8001d08 <_sbrk>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d102      	bne.n	80096da <_sbrk_r+0x1a>
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	b103      	cbz	r3, 80096da <_sbrk_r+0x1a>
 80096d8:	602b      	str	r3, [r5, #0]
 80096da:	bd38      	pop	{r3, r4, r5, pc}
 80096dc:	20001db8 	.word	0x20001db8

080096e0 <quorem>:
 80096e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	6903      	ldr	r3, [r0, #16]
 80096e6:	690c      	ldr	r4, [r1, #16]
 80096e8:	42a3      	cmp	r3, r4
 80096ea:	4680      	mov	r8, r0
 80096ec:	f2c0 8082 	blt.w	80097f4 <quorem+0x114>
 80096f0:	3c01      	subs	r4, #1
 80096f2:	f101 0714 	add.w	r7, r1, #20
 80096f6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80096fa:	f100 0614 	add.w	r6, r0, #20
 80096fe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009702:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009706:	eb06 030c 	add.w	r3, r6, ip
 800970a:	3501      	adds	r5, #1
 800970c:	eb07 090c 	add.w	r9, r7, ip
 8009710:	9301      	str	r3, [sp, #4]
 8009712:	fbb0 f5f5 	udiv	r5, r0, r5
 8009716:	b395      	cbz	r5, 800977e <quorem+0x9e>
 8009718:	f04f 0a00 	mov.w	sl, #0
 800971c:	4638      	mov	r0, r7
 800971e:	46b6      	mov	lr, r6
 8009720:	46d3      	mov	fp, sl
 8009722:	f850 2b04 	ldr.w	r2, [r0], #4
 8009726:	b293      	uxth	r3, r2
 8009728:	fb05 a303 	mla	r3, r5, r3, sl
 800972c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009730:	b29b      	uxth	r3, r3
 8009732:	ebab 0303 	sub.w	r3, fp, r3
 8009736:	0c12      	lsrs	r2, r2, #16
 8009738:	f8de b000 	ldr.w	fp, [lr]
 800973c:	fb05 a202 	mla	r2, r5, r2, sl
 8009740:	fa13 f38b 	uxtah	r3, r3, fp
 8009744:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009748:	fa1f fb82 	uxth.w	fp, r2
 800974c:	f8de 2000 	ldr.w	r2, [lr]
 8009750:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009754:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009758:	b29b      	uxth	r3, r3
 800975a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800975e:	4581      	cmp	r9, r0
 8009760:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009764:	f84e 3b04 	str.w	r3, [lr], #4
 8009768:	d2db      	bcs.n	8009722 <quorem+0x42>
 800976a:	f856 300c 	ldr.w	r3, [r6, ip]
 800976e:	b933      	cbnz	r3, 800977e <quorem+0x9e>
 8009770:	9b01      	ldr	r3, [sp, #4]
 8009772:	3b04      	subs	r3, #4
 8009774:	429e      	cmp	r6, r3
 8009776:	461a      	mov	r2, r3
 8009778:	d330      	bcc.n	80097dc <quorem+0xfc>
 800977a:	f8c8 4010 	str.w	r4, [r8, #16]
 800977e:	4640      	mov	r0, r8
 8009780:	f001 f822 	bl	800a7c8 <__mcmp>
 8009784:	2800      	cmp	r0, #0
 8009786:	db25      	blt.n	80097d4 <quorem+0xf4>
 8009788:	3501      	adds	r5, #1
 800978a:	4630      	mov	r0, r6
 800978c:	f04f 0c00 	mov.w	ip, #0
 8009790:	f857 2b04 	ldr.w	r2, [r7], #4
 8009794:	f8d0 e000 	ldr.w	lr, [r0]
 8009798:	b293      	uxth	r3, r2
 800979a:	ebac 0303 	sub.w	r3, ip, r3
 800979e:	0c12      	lsrs	r2, r2, #16
 80097a0:	fa13 f38e 	uxtah	r3, r3, lr
 80097a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097b2:	45b9      	cmp	r9, r7
 80097b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097b8:	f840 3b04 	str.w	r3, [r0], #4
 80097bc:	d2e8      	bcs.n	8009790 <quorem+0xb0>
 80097be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80097c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80097c6:	b92a      	cbnz	r2, 80097d4 <quorem+0xf4>
 80097c8:	3b04      	subs	r3, #4
 80097ca:	429e      	cmp	r6, r3
 80097cc:	461a      	mov	r2, r3
 80097ce:	d30b      	bcc.n	80097e8 <quorem+0x108>
 80097d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80097d4:	4628      	mov	r0, r5
 80097d6:	b003      	add	sp, #12
 80097d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097dc:	6812      	ldr	r2, [r2, #0]
 80097de:	3b04      	subs	r3, #4
 80097e0:	2a00      	cmp	r2, #0
 80097e2:	d1ca      	bne.n	800977a <quorem+0x9a>
 80097e4:	3c01      	subs	r4, #1
 80097e6:	e7c5      	b.n	8009774 <quorem+0x94>
 80097e8:	6812      	ldr	r2, [r2, #0]
 80097ea:	3b04      	subs	r3, #4
 80097ec:	2a00      	cmp	r2, #0
 80097ee:	d1ef      	bne.n	80097d0 <quorem+0xf0>
 80097f0:	3c01      	subs	r4, #1
 80097f2:	e7ea      	b.n	80097ca <quorem+0xea>
 80097f4:	2000      	movs	r0, #0
 80097f6:	e7ee      	b.n	80097d6 <quorem+0xf6>

080097f8 <_dtoa_r>:
 80097f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fc:	ec57 6b10 	vmov	r6, r7, d0
 8009800:	b097      	sub	sp, #92	; 0x5c
 8009802:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009804:	9106      	str	r1, [sp, #24]
 8009806:	4604      	mov	r4, r0
 8009808:	920b      	str	r2, [sp, #44]	; 0x2c
 800980a:	9312      	str	r3, [sp, #72]	; 0x48
 800980c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009810:	e9cd 6700 	strd	r6, r7, [sp]
 8009814:	b93d      	cbnz	r5, 8009826 <_dtoa_r+0x2e>
 8009816:	2010      	movs	r0, #16
 8009818:	f7ff fb48 	bl	8008eac <malloc>
 800981c:	6260      	str	r0, [r4, #36]	; 0x24
 800981e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009822:	6005      	str	r5, [r0, #0]
 8009824:	60c5      	str	r5, [r0, #12]
 8009826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009828:	6819      	ldr	r1, [r3, #0]
 800982a:	b151      	cbz	r1, 8009842 <_dtoa_r+0x4a>
 800982c:	685a      	ldr	r2, [r3, #4]
 800982e:	604a      	str	r2, [r1, #4]
 8009830:	2301      	movs	r3, #1
 8009832:	4093      	lsls	r3, r2
 8009834:	608b      	str	r3, [r1, #8]
 8009836:	4620      	mov	r0, r4
 8009838:	f000 fde5 	bl	800a406 <_Bfree>
 800983c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800983e:	2200      	movs	r2, #0
 8009840:	601a      	str	r2, [r3, #0]
 8009842:	1e3b      	subs	r3, r7, #0
 8009844:	bfbb      	ittet	lt
 8009846:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800984a:	9301      	strlt	r3, [sp, #4]
 800984c:	2300      	movge	r3, #0
 800984e:	2201      	movlt	r2, #1
 8009850:	bfac      	ite	ge
 8009852:	f8c8 3000 	strge.w	r3, [r8]
 8009856:	f8c8 2000 	strlt.w	r2, [r8]
 800985a:	4baf      	ldr	r3, [pc, #700]	; (8009b18 <_dtoa_r+0x320>)
 800985c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009860:	ea33 0308 	bics.w	r3, r3, r8
 8009864:	d114      	bne.n	8009890 <_dtoa_r+0x98>
 8009866:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009868:	f242 730f 	movw	r3, #9999	; 0x270f
 800986c:	6013      	str	r3, [r2, #0]
 800986e:	9b00      	ldr	r3, [sp, #0]
 8009870:	b923      	cbnz	r3, 800987c <_dtoa_r+0x84>
 8009872:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009876:	2800      	cmp	r0, #0
 8009878:	f000 8542 	beq.w	800a300 <_dtoa_r+0xb08>
 800987c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800987e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009b2c <_dtoa_r+0x334>
 8009882:	2b00      	cmp	r3, #0
 8009884:	f000 8544 	beq.w	800a310 <_dtoa_r+0xb18>
 8009888:	f10b 0303 	add.w	r3, fp, #3
 800988c:	f000 bd3e 	b.w	800a30c <_dtoa_r+0xb14>
 8009890:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009894:	2200      	movs	r2, #0
 8009896:	2300      	movs	r3, #0
 8009898:	4630      	mov	r0, r6
 800989a:	4639      	mov	r1, r7
 800989c:	f7f7 f8c0 	bl	8000a20 <__aeabi_dcmpeq>
 80098a0:	4681      	mov	r9, r0
 80098a2:	b168      	cbz	r0, 80098c0 <_dtoa_r+0xc8>
 80098a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098a6:	2301      	movs	r3, #1
 80098a8:	6013      	str	r3, [r2, #0]
 80098aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 8524 	beq.w	800a2fa <_dtoa_r+0xb02>
 80098b2:	4b9a      	ldr	r3, [pc, #616]	; (8009b1c <_dtoa_r+0x324>)
 80098b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098b6:	f103 3bff 	add.w	fp, r3, #4294967295
 80098ba:	6013      	str	r3, [r2, #0]
 80098bc:	f000 bd28 	b.w	800a310 <_dtoa_r+0xb18>
 80098c0:	aa14      	add	r2, sp, #80	; 0x50
 80098c2:	a915      	add	r1, sp, #84	; 0x54
 80098c4:	ec47 6b10 	vmov	d0, r6, r7
 80098c8:	4620      	mov	r0, r4
 80098ca:	f000 fff4 	bl	800a8b6 <__d2b>
 80098ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80098d2:	9004      	str	r0, [sp, #16]
 80098d4:	2d00      	cmp	r5, #0
 80098d6:	d07c      	beq.n	80099d2 <_dtoa_r+0x1da>
 80098d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80098dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80098e0:	46b2      	mov	sl, r6
 80098e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80098e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80098ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80098ee:	2200      	movs	r2, #0
 80098f0:	4b8b      	ldr	r3, [pc, #556]	; (8009b20 <_dtoa_r+0x328>)
 80098f2:	4650      	mov	r0, sl
 80098f4:	4659      	mov	r1, fp
 80098f6:	f7f6 fc73 	bl	80001e0 <__aeabi_dsub>
 80098fa:	a381      	add	r3, pc, #516	; (adr r3, 8009b00 <_dtoa_r+0x308>)
 80098fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009900:	f7f6 fe26 	bl	8000550 <__aeabi_dmul>
 8009904:	a380      	add	r3, pc, #512	; (adr r3, 8009b08 <_dtoa_r+0x310>)
 8009906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990a:	f7f6 fc6b 	bl	80001e4 <__adddf3>
 800990e:	4606      	mov	r6, r0
 8009910:	4628      	mov	r0, r5
 8009912:	460f      	mov	r7, r1
 8009914:	f7f6 fdb2 	bl	800047c <__aeabi_i2d>
 8009918:	a37d      	add	r3, pc, #500	; (adr r3, 8009b10 <_dtoa_r+0x318>)
 800991a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991e:	f7f6 fe17 	bl	8000550 <__aeabi_dmul>
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	4630      	mov	r0, r6
 8009928:	4639      	mov	r1, r7
 800992a:	f7f6 fc5b 	bl	80001e4 <__adddf3>
 800992e:	4606      	mov	r6, r0
 8009930:	460f      	mov	r7, r1
 8009932:	f7f7 f8bd 	bl	8000ab0 <__aeabi_d2iz>
 8009936:	2200      	movs	r2, #0
 8009938:	4682      	mov	sl, r0
 800993a:	2300      	movs	r3, #0
 800993c:	4630      	mov	r0, r6
 800993e:	4639      	mov	r1, r7
 8009940:	f7f7 f878 	bl	8000a34 <__aeabi_dcmplt>
 8009944:	b148      	cbz	r0, 800995a <_dtoa_r+0x162>
 8009946:	4650      	mov	r0, sl
 8009948:	f7f6 fd98 	bl	800047c <__aeabi_i2d>
 800994c:	4632      	mov	r2, r6
 800994e:	463b      	mov	r3, r7
 8009950:	f7f7 f866 	bl	8000a20 <__aeabi_dcmpeq>
 8009954:	b908      	cbnz	r0, 800995a <_dtoa_r+0x162>
 8009956:	f10a 3aff 	add.w	sl, sl, #4294967295
 800995a:	f1ba 0f16 	cmp.w	sl, #22
 800995e:	d859      	bhi.n	8009a14 <_dtoa_r+0x21c>
 8009960:	4970      	ldr	r1, [pc, #448]	; (8009b24 <_dtoa_r+0x32c>)
 8009962:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009966:	e9dd 2300 	ldrd	r2, r3, [sp]
 800996a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800996e:	f7f7 f87f 	bl	8000a70 <__aeabi_dcmpgt>
 8009972:	2800      	cmp	r0, #0
 8009974:	d050      	beq.n	8009a18 <_dtoa_r+0x220>
 8009976:	f10a 3aff 	add.w	sl, sl, #4294967295
 800997a:	2300      	movs	r3, #0
 800997c:	930f      	str	r3, [sp, #60]	; 0x3c
 800997e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009980:	1b5d      	subs	r5, r3, r5
 8009982:	f1b5 0801 	subs.w	r8, r5, #1
 8009986:	bf49      	itett	mi
 8009988:	f1c5 0301 	rsbmi	r3, r5, #1
 800998c:	2300      	movpl	r3, #0
 800998e:	9305      	strmi	r3, [sp, #20]
 8009990:	f04f 0800 	movmi.w	r8, #0
 8009994:	bf58      	it	pl
 8009996:	9305      	strpl	r3, [sp, #20]
 8009998:	f1ba 0f00 	cmp.w	sl, #0
 800999c:	db3e      	blt.n	8009a1c <_dtoa_r+0x224>
 800999e:	2300      	movs	r3, #0
 80099a0:	44d0      	add	r8, sl
 80099a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80099a6:	9307      	str	r3, [sp, #28]
 80099a8:	9b06      	ldr	r3, [sp, #24]
 80099aa:	2b09      	cmp	r3, #9
 80099ac:	f200 8090 	bhi.w	8009ad0 <_dtoa_r+0x2d8>
 80099b0:	2b05      	cmp	r3, #5
 80099b2:	bfc4      	itt	gt
 80099b4:	3b04      	subgt	r3, #4
 80099b6:	9306      	strgt	r3, [sp, #24]
 80099b8:	9b06      	ldr	r3, [sp, #24]
 80099ba:	f1a3 0302 	sub.w	r3, r3, #2
 80099be:	bfcc      	ite	gt
 80099c0:	2500      	movgt	r5, #0
 80099c2:	2501      	movle	r5, #1
 80099c4:	2b03      	cmp	r3, #3
 80099c6:	f200 808f 	bhi.w	8009ae8 <_dtoa_r+0x2f0>
 80099ca:	e8df f003 	tbb	[pc, r3]
 80099ce:	7f7d      	.short	0x7f7d
 80099d0:	7131      	.short	0x7131
 80099d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80099d6:	441d      	add	r5, r3
 80099d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80099dc:	2820      	cmp	r0, #32
 80099de:	dd13      	ble.n	8009a08 <_dtoa_r+0x210>
 80099e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80099e4:	9b00      	ldr	r3, [sp, #0]
 80099e6:	fa08 f800 	lsl.w	r8, r8, r0
 80099ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80099ee:	fa23 f000 	lsr.w	r0, r3, r0
 80099f2:	ea48 0000 	orr.w	r0, r8, r0
 80099f6:	f7f6 fd31 	bl	800045c <__aeabi_ui2d>
 80099fa:	2301      	movs	r3, #1
 80099fc:	4682      	mov	sl, r0
 80099fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009a02:	3d01      	subs	r5, #1
 8009a04:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a06:	e772      	b.n	80098ee <_dtoa_r+0xf6>
 8009a08:	9b00      	ldr	r3, [sp, #0]
 8009a0a:	f1c0 0020 	rsb	r0, r0, #32
 8009a0e:	fa03 f000 	lsl.w	r0, r3, r0
 8009a12:	e7f0      	b.n	80099f6 <_dtoa_r+0x1fe>
 8009a14:	2301      	movs	r3, #1
 8009a16:	e7b1      	b.n	800997c <_dtoa_r+0x184>
 8009a18:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a1a:	e7b0      	b.n	800997e <_dtoa_r+0x186>
 8009a1c:	9b05      	ldr	r3, [sp, #20]
 8009a1e:	eba3 030a 	sub.w	r3, r3, sl
 8009a22:	9305      	str	r3, [sp, #20]
 8009a24:	f1ca 0300 	rsb	r3, sl, #0
 8009a28:	9307      	str	r3, [sp, #28]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	930e      	str	r3, [sp, #56]	; 0x38
 8009a2e:	e7bb      	b.n	80099a8 <_dtoa_r+0x1b0>
 8009a30:	2301      	movs	r3, #1
 8009a32:	930a      	str	r3, [sp, #40]	; 0x28
 8009a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	dd59      	ble.n	8009aee <_dtoa_r+0x2f6>
 8009a3a:	9302      	str	r3, [sp, #8]
 8009a3c:	4699      	mov	r9, r3
 8009a3e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a40:	2200      	movs	r2, #0
 8009a42:	6072      	str	r2, [r6, #4]
 8009a44:	2204      	movs	r2, #4
 8009a46:	f102 0014 	add.w	r0, r2, #20
 8009a4a:	4298      	cmp	r0, r3
 8009a4c:	6871      	ldr	r1, [r6, #4]
 8009a4e:	d953      	bls.n	8009af8 <_dtoa_r+0x300>
 8009a50:	4620      	mov	r0, r4
 8009a52:	f000 fca4 	bl	800a39e <_Balloc>
 8009a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a58:	6030      	str	r0, [r6, #0]
 8009a5a:	f1b9 0f0e 	cmp.w	r9, #14
 8009a5e:	f8d3 b000 	ldr.w	fp, [r3]
 8009a62:	f200 80e6 	bhi.w	8009c32 <_dtoa_r+0x43a>
 8009a66:	2d00      	cmp	r5, #0
 8009a68:	f000 80e3 	beq.w	8009c32 <_dtoa_r+0x43a>
 8009a6c:	ed9d 7b00 	vldr	d7, [sp]
 8009a70:	f1ba 0f00 	cmp.w	sl, #0
 8009a74:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009a78:	dd74      	ble.n	8009b64 <_dtoa_r+0x36c>
 8009a7a:	4a2a      	ldr	r2, [pc, #168]	; (8009b24 <_dtoa_r+0x32c>)
 8009a7c:	f00a 030f 	and.w	r3, sl, #15
 8009a80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a84:	ed93 7b00 	vldr	d7, [r3]
 8009a88:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009a8c:	06f0      	lsls	r0, r6, #27
 8009a8e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009a92:	d565      	bpl.n	8009b60 <_dtoa_r+0x368>
 8009a94:	4b24      	ldr	r3, [pc, #144]	; (8009b28 <_dtoa_r+0x330>)
 8009a96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a9a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a9e:	f7f6 fe81 	bl	80007a4 <__aeabi_ddiv>
 8009aa2:	e9cd 0100 	strd	r0, r1, [sp]
 8009aa6:	f006 060f 	and.w	r6, r6, #15
 8009aaa:	2503      	movs	r5, #3
 8009aac:	4f1e      	ldr	r7, [pc, #120]	; (8009b28 <_dtoa_r+0x330>)
 8009aae:	e04c      	b.n	8009b4a <_dtoa_r+0x352>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8009ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ab6:	4453      	add	r3, sl
 8009ab8:	f103 0901 	add.w	r9, r3, #1
 8009abc:	9302      	str	r3, [sp, #8]
 8009abe:	464b      	mov	r3, r9
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	bfb8      	it	lt
 8009ac4:	2301      	movlt	r3, #1
 8009ac6:	e7ba      	b.n	8009a3e <_dtoa_r+0x246>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	e7b2      	b.n	8009a32 <_dtoa_r+0x23a>
 8009acc:	2300      	movs	r3, #0
 8009ace:	e7f0      	b.n	8009ab2 <_dtoa_r+0x2ba>
 8009ad0:	2501      	movs	r5, #1
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	9306      	str	r3, [sp, #24]
 8009ad6:	950a      	str	r5, [sp, #40]	; 0x28
 8009ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8009adc:	9302      	str	r3, [sp, #8]
 8009ade:	4699      	mov	r9, r3
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2312      	movs	r3, #18
 8009ae4:	920b      	str	r2, [sp, #44]	; 0x2c
 8009ae6:	e7aa      	b.n	8009a3e <_dtoa_r+0x246>
 8009ae8:	2301      	movs	r3, #1
 8009aea:	930a      	str	r3, [sp, #40]	; 0x28
 8009aec:	e7f4      	b.n	8009ad8 <_dtoa_r+0x2e0>
 8009aee:	2301      	movs	r3, #1
 8009af0:	9302      	str	r3, [sp, #8]
 8009af2:	4699      	mov	r9, r3
 8009af4:	461a      	mov	r2, r3
 8009af6:	e7f5      	b.n	8009ae4 <_dtoa_r+0x2ec>
 8009af8:	3101      	adds	r1, #1
 8009afa:	6071      	str	r1, [r6, #4]
 8009afc:	0052      	lsls	r2, r2, #1
 8009afe:	e7a2      	b.n	8009a46 <_dtoa_r+0x24e>
 8009b00:	636f4361 	.word	0x636f4361
 8009b04:	3fd287a7 	.word	0x3fd287a7
 8009b08:	8b60c8b3 	.word	0x8b60c8b3
 8009b0c:	3fc68a28 	.word	0x3fc68a28
 8009b10:	509f79fb 	.word	0x509f79fb
 8009b14:	3fd34413 	.word	0x3fd34413
 8009b18:	7ff00000 	.word	0x7ff00000
 8009b1c:	0800aa39 	.word	0x0800aa39
 8009b20:	3ff80000 	.word	0x3ff80000
 8009b24:	0800aa70 	.word	0x0800aa70
 8009b28:	0800aa48 	.word	0x0800aa48
 8009b2c:	0800aa43 	.word	0x0800aa43
 8009b30:	07f1      	lsls	r1, r6, #31
 8009b32:	d508      	bpl.n	8009b46 <_dtoa_r+0x34e>
 8009b34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b3c:	f7f6 fd08 	bl	8000550 <__aeabi_dmul>
 8009b40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b44:	3501      	adds	r5, #1
 8009b46:	1076      	asrs	r6, r6, #1
 8009b48:	3708      	adds	r7, #8
 8009b4a:	2e00      	cmp	r6, #0
 8009b4c:	d1f0      	bne.n	8009b30 <_dtoa_r+0x338>
 8009b4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b56:	f7f6 fe25 	bl	80007a4 <__aeabi_ddiv>
 8009b5a:	e9cd 0100 	strd	r0, r1, [sp]
 8009b5e:	e01a      	b.n	8009b96 <_dtoa_r+0x39e>
 8009b60:	2502      	movs	r5, #2
 8009b62:	e7a3      	b.n	8009aac <_dtoa_r+0x2b4>
 8009b64:	f000 80a0 	beq.w	8009ca8 <_dtoa_r+0x4b0>
 8009b68:	f1ca 0600 	rsb	r6, sl, #0
 8009b6c:	4b9f      	ldr	r3, [pc, #636]	; (8009dec <_dtoa_r+0x5f4>)
 8009b6e:	4fa0      	ldr	r7, [pc, #640]	; (8009df0 <_dtoa_r+0x5f8>)
 8009b70:	f006 020f 	and.w	r2, r6, #15
 8009b74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b80:	f7f6 fce6 	bl	8000550 <__aeabi_dmul>
 8009b84:	e9cd 0100 	strd	r0, r1, [sp]
 8009b88:	1136      	asrs	r6, r6, #4
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	2502      	movs	r5, #2
 8009b8e:	2e00      	cmp	r6, #0
 8009b90:	d17f      	bne.n	8009c92 <_dtoa_r+0x49a>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1e1      	bne.n	8009b5a <_dtoa_r+0x362>
 8009b96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f000 8087 	beq.w	8009cac <_dtoa_r+0x4b4>
 8009b9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	4b93      	ldr	r3, [pc, #588]	; (8009df4 <_dtoa_r+0x5fc>)
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	4639      	mov	r1, r7
 8009baa:	f7f6 ff43 	bl	8000a34 <__aeabi_dcmplt>
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d07c      	beq.n	8009cac <_dtoa_r+0x4b4>
 8009bb2:	f1b9 0f00 	cmp.w	r9, #0
 8009bb6:	d079      	beq.n	8009cac <_dtoa_r+0x4b4>
 8009bb8:	9b02      	ldr	r3, [sp, #8]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	dd35      	ble.n	8009c2a <_dtoa_r+0x432>
 8009bbe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009bc2:	9308      	str	r3, [sp, #32]
 8009bc4:	4639      	mov	r1, r7
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	4b8b      	ldr	r3, [pc, #556]	; (8009df8 <_dtoa_r+0x600>)
 8009bca:	4630      	mov	r0, r6
 8009bcc:	f7f6 fcc0 	bl	8000550 <__aeabi_dmul>
 8009bd0:	e9cd 0100 	strd	r0, r1, [sp]
 8009bd4:	9f02      	ldr	r7, [sp, #8]
 8009bd6:	3501      	adds	r5, #1
 8009bd8:	4628      	mov	r0, r5
 8009bda:	f7f6 fc4f 	bl	800047c <__aeabi_i2d>
 8009bde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009be2:	f7f6 fcb5 	bl	8000550 <__aeabi_dmul>
 8009be6:	2200      	movs	r2, #0
 8009be8:	4b84      	ldr	r3, [pc, #528]	; (8009dfc <_dtoa_r+0x604>)
 8009bea:	f7f6 fafb 	bl	80001e4 <__adddf3>
 8009bee:	4605      	mov	r5, r0
 8009bf0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009bf4:	2f00      	cmp	r7, #0
 8009bf6:	d15d      	bne.n	8009cb4 <_dtoa_r+0x4bc>
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	4b81      	ldr	r3, [pc, #516]	; (8009e00 <_dtoa_r+0x608>)
 8009bfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c00:	f7f6 faee 	bl	80001e0 <__aeabi_dsub>
 8009c04:	462a      	mov	r2, r5
 8009c06:	4633      	mov	r3, r6
 8009c08:	e9cd 0100 	strd	r0, r1, [sp]
 8009c0c:	f7f6 ff30 	bl	8000a70 <__aeabi_dcmpgt>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	f040 8288 	bne.w	800a126 <_dtoa_r+0x92e>
 8009c16:	462a      	mov	r2, r5
 8009c18:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c20:	f7f6 ff08 	bl	8000a34 <__aeabi_dcmplt>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	f040 827c 	bne.w	800a122 <_dtoa_r+0x92a>
 8009c2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c2e:	e9cd 2300 	strd	r2, r3, [sp]
 8009c32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f2c0 8150 	blt.w	8009eda <_dtoa_r+0x6e2>
 8009c3a:	f1ba 0f0e 	cmp.w	sl, #14
 8009c3e:	f300 814c 	bgt.w	8009eda <_dtoa_r+0x6e2>
 8009c42:	4b6a      	ldr	r3, [pc, #424]	; (8009dec <_dtoa_r+0x5f4>)
 8009c44:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c48:	ed93 7b00 	vldr	d7, [r3]
 8009c4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c54:	f280 80d8 	bge.w	8009e08 <_dtoa_r+0x610>
 8009c58:	f1b9 0f00 	cmp.w	r9, #0
 8009c5c:	f300 80d4 	bgt.w	8009e08 <_dtoa_r+0x610>
 8009c60:	f040 825e 	bne.w	800a120 <_dtoa_r+0x928>
 8009c64:	2200      	movs	r2, #0
 8009c66:	4b66      	ldr	r3, [pc, #408]	; (8009e00 <_dtoa_r+0x608>)
 8009c68:	ec51 0b17 	vmov	r0, r1, d7
 8009c6c:	f7f6 fc70 	bl	8000550 <__aeabi_dmul>
 8009c70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c74:	f7f6 fef2 	bl	8000a5c <__aeabi_dcmpge>
 8009c78:	464f      	mov	r7, r9
 8009c7a:	464e      	mov	r6, r9
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	f040 8234 	bne.w	800a0ea <_dtoa_r+0x8f2>
 8009c82:	2331      	movs	r3, #49	; 0x31
 8009c84:	f10b 0501 	add.w	r5, fp, #1
 8009c88:	f88b 3000 	strb.w	r3, [fp]
 8009c8c:	f10a 0a01 	add.w	sl, sl, #1
 8009c90:	e22f      	b.n	800a0f2 <_dtoa_r+0x8fa>
 8009c92:	07f2      	lsls	r2, r6, #31
 8009c94:	d505      	bpl.n	8009ca2 <_dtoa_r+0x4aa>
 8009c96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c9a:	f7f6 fc59 	bl	8000550 <__aeabi_dmul>
 8009c9e:	3501      	adds	r5, #1
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	1076      	asrs	r6, r6, #1
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	e772      	b.n	8009b8e <_dtoa_r+0x396>
 8009ca8:	2502      	movs	r5, #2
 8009caa:	e774      	b.n	8009b96 <_dtoa_r+0x39e>
 8009cac:	f8cd a020 	str.w	sl, [sp, #32]
 8009cb0:	464f      	mov	r7, r9
 8009cb2:	e791      	b.n	8009bd8 <_dtoa_r+0x3e0>
 8009cb4:	4b4d      	ldr	r3, [pc, #308]	; (8009dec <_dtoa_r+0x5f4>)
 8009cb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009cba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d047      	beq.n	8009d54 <_dtoa_r+0x55c>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	2000      	movs	r0, #0
 8009cca:	494e      	ldr	r1, [pc, #312]	; (8009e04 <_dtoa_r+0x60c>)
 8009ccc:	f7f6 fd6a 	bl	80007a4 <__aeabi_ddiv>
 8009cd0:	462a      	mov	r2, r5
 8009cd2:	4633      	mov	r3, r6
 8009cd4:	f7f6 fa84 	bl	80001e0 <__aeabi_dsub>
 8009cd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009cdc:	465d      	mov	r5, fp
 8009cde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ce2:	f7f6 fee5 	bl	8000ab0 <__aeabi_d2iz>
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	f7f6 fbc8 	bl	800047c <__aeabi_i2d>
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cf4:	f7f6 fa74 	bl	80001e0 <__aeabi_dsub>
 8009cf8:	3630      	adds	r6, #48	; 0x30
 8009cfa:	f805 6b01 	strb.w	r6, [r5], #1
 8009cfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d02:	e9cd 0100 	strd	r0, r1, [sp]
 8009d06:	f7f6 fe95 	bl	8000a34 <__aeabi_dcmplt>
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d163      	bne.n	8009dd6 <_dtoa_r+0x5de>
 8009d0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d12:	2000      	movs	r0, #0
 8009d14:	4937      	ldr	r1, [pc, #220]	; (8009df4 <_dtoa_r+0x5fc>)
 8009d16:	f7f6 fa63 	bl	80001e0 <__aeabi_dsub>
 8009d1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d1e:	f7f6 fe89 	bl	8000a34 <__aeabi_dcmplt>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	f040 80b7 	bne.w	8009e96 <_dtoa_r+0x69e>
 8009d28:	eba5 030b 	sub.w	r3, r5, fp
 8009d2c:	429f      	cmp	r7, r3
 8009d2e:	f77f af7c 	ble.w	8009c2a <_dtoa_r+0x432>
 8009d32:	2200      	movs	r2, #0
 8009d34:	4b30      	ldr	r3, [pc, #192]	; (8009df8 <_dtoa_r+0x600>)
 8009d36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d3a:	f7f6 fc09 	bl	8000550 <__aeabi_dmul>
 8009d3e:	2200      	movs	r2, #0
 8009d40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d44:	4b2c      	ldr	r3, [pc, #176]	; (8009df8 <_dtoa_r+0x600>)
 8009d46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d4a:	f7f6 fc01 	bl	8000550 <__aeabi_dmul>
 8009d4e:	e9cd 0100 	strd	r0, r1, [sp]
 8009d52:	e7c4      	b.n	8009cde <_dtoa_r+0x4e6>
 8009d54:	462a      	mov	r2, r5
 8009d56:	4633      	mov	r3, r6
 8009d58:	f7f6 fbfa 	bl	8000550 <__aeabi_dmul>
 8009d5c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d60:	eb0b 0507 	add.w	r5, fp, r7
 8009d64:	465e      	mov	r6, fp
 8009d66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d6a:	f7f6 fea1 	bl	8000ab0 <__aeabi_d2iz>
 8009d6e:	4607      	mov	r7, r0
 8009d70:	f7f6 fb84 	bl	800047c <__aeabi_i2d>
 8009d74:	3730      	adds	r7, #48	; 0x30
 8009d76:	4602      	mov	r2, r0
 8009d78:	460b      	mov	r3, r1
 8009d7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d7e:	f7f6 fa2f 	bl	80001e0 <__aeabi_dsub>
 8009d82:	f806 7b01 	strb.w	r7, [r6], #1
 8009d86:	42ae      	cmp	r6, r5
 8009d88:	e9cd 0100 	strd	r0, r1, [sp]
 8009d8c:	f04f 0200 	mov.w	r2, #0
 8009d90:	d126      	bne.n	8009de0 <_dtoa_r+0x5e8>
 8009d92:	4b1c      	ldr	r3, [pc, #112]	; (8009e04 <_dtoa_r+0x60c>)
 8009d94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d98:	f7f6 fa24 	bl	80001e4 <__adddf3>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009da4:	f7f6 fe64 	bl	8000a70 <__aeabi_dcmpgt>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d174      	bne.n	8009e96 <_dtoa_r+0x69e>
 8009dac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009db0:	2000      	movs	r0, #0
 8009db2:	4914      	ldr	r1, [pc, #80]	; (8009e04 <_dtoa_r+0x60c>)
 8009db4:	f7f6 fa14 	bl	80001e0 <__aeabi_dsub>
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dc0:	f7f6 fe38 	bl	8000a34 <__aeabi_dcmplt>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	f43f af30 	beq.w	8009c2a <_dtoa_r+0x432>
 8009dca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009dce:	2b30      	cmp	r3, #48	; 0x30
 8009dd0:	f105 32ff 	add.w	r2, r5, #4294967295
 8009dd4:	d002      	beq.n	8009ddc <_dtoa_r+0x5e4>
 8009dd6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009dda:	e04a      	b.n	8009e72 <_dtoa_r+0x67a>
 8009ddc:	4615      	mov	r5, r2
 8009dde:	e7f4      	b.n	8009dca <_dtoa_r+0x5d2>
 8009de0:	4b05      	ldr	r3, [pc, #20]	; (8009df8 <_dtoa_r+0x600>)
 8009de2:	f7f6 fbb5 	bl	8000550 <__aeabi_dmul>
 8009de6:	e9cd 0100 	strd	r0, r1, [sp]
 8009dea:	e7bc      	b.n	8009d66 <_dtoa_r+0x56e>
 8009dec:	0800aa70 	.word	0x0800aa70
 8009df0:	0800aa48 	.word	0x0800aa48
 8009df4:	3ff00000 	.word	0x3ff00000
 8009df8:	40240000 	.word	0x40240000
 8009dfc:	401c0000 	.word	0x401c0000
 8009e00:	40140000 	.word	0x40140000
 8009e04:	3fe00000 	.word	0x3fe00000
 8009e08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009e0c:	465d      	mov	r5, fp
 8009e0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e12:	4630      	mov	r0, r6
 8009e14:	4639      	mov	r1, r7
 8009e16:	f7f6 fcc5 	bl	80007a4 <__aeabi_ddiv>
 8009e1a:	f7f6 fe49 	bl	8000ab0 <__aeabi_d2iz>
 8009e1e:	4680      	mov	r8, r0
 8009e20:	f7f6 fb2c 	bl	800047c <__aeabi_i2d>
 8009e24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e28:	f7f6 fb92 	bl	8000550 <__aeabi_dmul>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4630      	mov	r0, r6
 8009e32:	4639      	mov	r1, r7
 8009e34:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009e38:	f7f6 f9d2 	bl	80001e0 <__aeabi_dsub>
 8009e3c:	f805 6b01 	strb.w	r6, [r5], #1
 8009e40:	eba5 060b 	sub.w	r6, r5, fp
 8009e44:	45b1      	cmp	r9, r6
 8009e46:	4602      	mov	r2, r0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	d139      	bne.n	8009ec0 <_dtoa_r+0x6c8>
 8009e4c:	f7f6 f9ca 	bl	80001e4 <__adddf3>
 8009e50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e54:	4606      	mov	r6, r0
 8009e56:	460f      	mov	r7, r1
 8009e58:	f7f6 fe0a 	bl	8000a70 <__aeabi_dcmpgt>
 8009e5c:	b9c8      	cbnz	r0, 8009e92 <_dtoa_r+0x69a>
 8009e5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e62:	4630      	mov	r0, r6
 8009e64:	4639      	mov	r1, r7
 8009e66:	f7f6 fddb 	bl	8000a20 <__aeabi_dcmpeq>
 8009e6a:	b110      	cbz	r0, 8009e72 <_dtoa_r+0x67a>
 8009e6c:	f018 0f01 	tst.w	r8, #1
 8009e70:	d10f      	bne.n	8009e92 <_dtoa_r+0x69a>
 8009e72:	9904      	ldr	r1, [sp, #16]
 8009e74:	4620      	mov	r0, r4
 8009e76:	f000 fac6 	bl	800a406 <_Bfree>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e7e:	702b      	strb	r3, [r5, #0]
 8009e80:	f10a 0301 	add.w	r3, sl, #1
 8009e84:	6013      	str	r3, [r2, #0]
 8009e86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f000 8241 	beq.w	800a310 <_dtoa_r+0xb18>
 8009e8e:	601d      	str	r5, [r3, #0]
 8009e90:	e23e      	b.n	800a310 <_dtoa_r+0xb18>
 8009e92:	f8cd a020 	str.w	sl, [sp, #32]
 8009e96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009e9a:	2a39      	cmp	r2, #57	; 0x39
 8009e9c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009ea0:	d108      	bne.n	8009eb4 <_dtoa_r+0x6bc>
 8009ea2:	459b      	cmp	fp, r3
 8009ea4:	d10a      	bne.n	8009ebc <_dtoa_r+0x6c4>
 8009ea6:	9b08      	ldr	r3, [sp, #32]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	9308      	str	r3, [sp, #32]
 8009eac:	2330      	movs	r3, #48	; 0x30
 8009eae:	f88b 3000 	strb.w	r3, [fp]
 8009eb2:	465b      	mov	r3, fp
 8009eb4:	781a      	ldrb	r2, [r3, #0]
 8009eb6:	3201      	adds	r2, #1
 8009eb8:	701a      	strb	r2, [r3, #0]
 8009eba:	e78c      	b.n	8009dd6 <_dtoa_r+0x5de>
 8009ebc:	461d      	mov	r5, r3
 8009ebe:	e7ea      	b.n	8009e96 <_dtoa_r+0x69e>
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	4b9b      	ldr	r3, [pc, #620]	; (800a130 <_dtoa_r+0x938>)
 8009ec4:	f7f6 fb44 	bl	8000550 <__aeabi_dmul>
 8009ec8:	2200      	movs	r2, #0
 8009eca:	2300      	movs	r3, #0
 8009ecc:	4606      	mov	r6, r0
 8009ece:	460f      	mov	r7, r1
 8009ed0:	f7f6 fda6 	bl	8000a20 <__aeabi_dcmpeq>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d09a      	beq.n	8009e0e <_dtoa_r+0x616>
 8009ed8:	e7cb      	b.n	8009e72 <_dtoa_r+0x67a>
 8009eda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009edc:	2a00      	cmp	r2, #0
 8009ede:	f000 808b 	beq.w	8009ff8 <_dtoa_r+0x800>
 8009ee2:	9a06      	ldr	r2, [sp, #24]
 8009ee4:	2a01      	cmp	r2, #1
 8009ee6:	dc6e      	bgt.n	8009fc6 <_dtoa_r+0x7ce>
 8009ee8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009eea:	2a00      	cmp	r2, #0
 8009eec:	d067      	beq.n	8009fbe <_dtoa_r+0x7c6>
 8009eee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ef2:	9f07      	ldr	r7, [sp, #28]
 8009ef4:	9d05      	ldr	r5, [sp, #20]
 8009ef6:	9a05      	ldr	r2, [sp, #20]
 8009ef8:	2101      	movs	r1, #1
 8009efa:	441a      	add	r2, r3
 8009efc:	4620      	mov	r0, r4
 8009efe:	9205      	str	r2, [sp, #20]
 8009f00:	4498      	add	r8, r3
 8009f02:	f000 fb20 	bl	800a546 <__i2b>
 8009f06:	4606      	mov	r6, r0
 8009f08:	2d00      	cmp	r5, #0
 8009f0a:	dd0c      	ble.n	8009f26 <_dtoa_r+0x72e>
 8009f0c:	f1b8 0f00 	cmp.w	r8, #0
 8009f10:	dd09      	ble.n	8009f26 <_dtoa_r+0x72e>
 8009f12:	4545      	cmp	r5, r8
 8009f14:	9a05      	ldr	r2, [sp, #20]
 8009f16:	462b      	mov	r3, r5
 8009f18:	bfa8      	it	ge
 8009f1a:	4643      	movge	r3, r8
 8009f1c:	1ad2      	subs	r2, r2, r3
 8009f1e:	9205      	str	r2, [sp, #20]
 8009f20:	1aed      	subs	r5, r5, r3
 8009f22:	eba8 0803 	sub.w	r8, r8, r3
 8009f26:	9b07      	ldr	r3, [sp, #28]
 8009f28:	b1eb      	cbz	r3, 8009f66 <_dtoa_r+0x76e>
 8009f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d067      	beq.n	800a000 <_dtoa_r+0x808>
 8009f30:	b18f      	cbz	r7, 8009f56 <_dtoa_r+0x75e>
 8009f32:	4631      	mov	r1, r6
 8009f34:	463a      	mov	r2, r7
 8009f36:	4620      	mov	r0, r4
 8009f38:	f000 fba4 	bl	800a684 <__pow5mult>
 8009f3c:	9a04      	ldr	r2, [sp, #16]
 8009f3e:	4601      	mov	r1, r0
 8009f40:	4606      	mov	r6, r0
 8009f42:	4620      	mov	r0, r4
 8009f44:	f000 fb08 	bl	800a558 <__multiply>
 8009f48:	9904      	ldr	r1, [sp, #16]
 8009f4a:	9008      	str	r0, [sp, #32]
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f000 fa5a 	bl	800a406 <_Bfree>
 8009f52:	9b08      	ldr	r3, [sp, #32]
 8009f54:	9304      	str	r3, [sp, #16]
 8009f56:	9b07      	ldr	r3, [sp, #28]
 8009f58:	1bda      	subs	r2, r3, r7
 8009f5a:	d004      	beq.n	8009f66 <_dtoa_r+0x76e>
 8009f5c:	9904      	ldr	r1, [sp, #16]
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f000 fb90 	bl	800a684 <__pow5mult>
 8009f64:	9004      	str	r0, [sp, #16]
 8009f66:	2101      	movs	r1, #1
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f000 faec 	bl	800a546 <__i2b>
 8009f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f70:	4607      	mov	r7, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f000 81d0 	beq.w	800a318 <_dtoa_r+0xb20>
 8009f78:	461a      	mov	r2, r3
 8009f7a:	4601      	mov	r1, r0
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f000 fb81 	bl	800a684 <__pow5mult>
 8009f82:	9b06      	ldr	r3, [sp, #24]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	4607      	mov	r7, r0
 8009f88:	dc40      	bgt.n	800a00c <_dtoa_r+0x814>
 8009f8a:	9b00      	ldr	r3, [sp, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d139      	bne.n	800a004 <_dtoa_r+0x80c>
 8009f90:	9b01      	ldr	r3, [sp, #4]
 8009f92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d136      	bne.n	800a008 <_dtoa_r+0x810>
 8009f9a:	9b01      	ldr	r3, [sp, #4]
 8009f9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fa0:	0d1b      	lsrs	r3, r3, #20
 8009fa2:	051b      	lsls	r3, r3, #20
 8009fa4:	b12b      	cbz	r3, 8009fb2 <_dtoa_r+0x7ba>
 8009fa6:	9b05      	ldr	r3, [sp, #20]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	9305      	str	r3, [sp, #20]
 8009fac:	f108 0801 	add.w	r8, r8, #1
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	9307      	str	r3, [sp, #28]
 8009fb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d12a      	bne.n	800a010 <_dtoa_r+0x818>
 8009fba:	2001      	movs	r0, #1
 8009fbc:	e030      	b.n	800a020 <_dtoa_r+0x828>
 8009fbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fc0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009fc4:	e795      	b.n	8009ef2 <_dtoa_r+0x6fa>
 8009fc6:	9b07      	ldr	r3, [sp, #28]
 8009fc8:	f109 37ff 	add.w	r7, r9, #4294967295
 8009fcc:	42bb      	cmp	r3, r7
 8009fce:	bfbf      	itttt	lt
 8009fd0:	9b07      	ldrlt	r3, [sp, #28]
 8009fd2:	9707      	strlt	r7, [sp, #28]
 8009fd4:	1afa      	sublt	r2, r7, r3
 8009fd6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009fd8:	bfbb      	ittet	lt
 8009fda:	189b      	addlt	r3, r3, r2
 8009fdc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009fde:	1bdf      	subge	r7, r3, r7
 8009fe0:	2700      	movlt	r7, #0
 8009fe2:	f1b9 0f00 	cmp.w	r9, #0
 8009fe6:	bfb5      	itete	lt
 8009fe8:	9b05      	ldrlt	r3, [sp, #20]
 8009fea:	9d05      	ldrge	r5, [sp, #20]
 8009fec:	eba3 0509 	sublt.w	r5, r3, r9
 8009ff0:	464b      	movge	r3, r9
 8009ff2:	bfb8      	it	lt
 8009ff4:	2300      	movlt	r3, #0
 8009ff6:	e77e      	b.n	8009ef6 <_dtoa_r+0x6fe>
 8009ff8:	9f07      	ldr	r7, [sp, #28]
 8009ffa:	9d05      	ldr	r5, [sp, #20]
 8009ffc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009ffe:	e783      	b.n	8009f08 <_dtoa_r+0x710>
 800a000:	9a07      	ldr	r2, [sp, #28]
 800a002:	e7ab      	b.n	8009f5c <_dtoa_r+0x764>
 800a004:	2300      	movs	r3, #0
 800a006:	e7d4      	b.n	8009fb2 <_dtoa_r+0x7ba>
 800a008:	9b00      	ldr	r3, [sp, #0]
 800a00a:	e7d2      	b.n	8009fb2 <_dtoa_r+0x7ba>
 800a00c:	2300      	movs	r3, #0
 800a00e:	9307      	str	r3, [sp, #28]
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a016:	6918      	ldr	r0, [r3, #16]
 800a018:	f000 fa47 	bl	800a4aa <__hi0bits>
 800a01c:	f1c0 0020 	rsb	r0, r0, #32
 800a020:	4440      	add	r0, r8
 800a022:	f010 001f 	ands.w	r0, r0, #31
 800a026:	d047      	beq.n	800a0b8 <_dtoa_r+0x8c0>
 800a028:	f1c0 0320 	rsb	r3, r0, #32
 800a02c:	2b04      	cmp	r3, #4
 800a02e:	dd3b      	ble.n	800a0a8 <_dtoa_r+0x8b0>
 800a030:	9b05      	ldr	r3, [sp, #20]
 800a032:	f1c0 001c 	rsb	r0, r0, #28
 800a036:	4403      	add	r3, r0
 800a038:	9305      	str	r3, [sp, #20]
 800a03a:	4405      	add	r5, r0
 800a03c:	4480      	add	r8, r0
 800a03e:	9b05      	ldr	r3, [sp, #20]
 800a040:	2b00      	cmp	r3, #0
 800a042:	dd05      	ble.n	800a050 <_dtoa_r+0x858>
 800a044:	461a      	mov	r2, r3
 800a046:	9904      	ldr	r1, [sp, #16]
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 fb69 	bl	800a720 <__lshift>
 800a04e:	9004      	str	r0, [sp, #16]
 800a050:	f1b8 0f00 	cmp.w	r8, #0
 800a054:	dd05      	ble.n	800a062 <_dtoa_r+0x86a>
 800a056:	4639      	mov	r1, r7
 800a058:	4642      	mov	r2, r8
 800a05a:	4620      	mov	r0, r4
 800a05c:	f000 fb60 	bl	800a720 <__lshift>
 800a060:	4607      	mov	r7, r0
 800a062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a064:	b353      	cbz	r3, 800a0bc <_dtoa_r+0x8c4>
 800a066:	4639      	mov	r1, r7
 800a068:	9804      	ldr	r0, [sp, #16]
 800a06a:	f000 fbad 	bl	800a7c8 <__mcmp>
 800a06e:	2800      	cmp	r0, #0
 800a070:	da24      	bge.n	800a0bc <_dtoa_r+0x8c4>
 800a072:	2300      	movs	r3, #0
 800a074:	220a      	movs	r2, #10
 800a076:	9904      	ldr	r1, [sp, #16]
 800a078:	4620      	mov	r0, r4
 800a07a:	f000 f9db 	bl	800a434 <__multadd>
 800a07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a080:	9004      	str	r0, [sp, #16]
 800a082:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a086:	2b00      	cmp	r3, #0
 800a088:	f000 814d 	beq.w	800a326 <_dtoa_r+0xb2e>
 800a08c:	2300      	movs	r3, #0
 800a08e:	4631      	mov	r1, r6
 800a090:	220a      	movs	r2, #10
 800a092:	4620      	mov	r0, r4
 800a094:	f000 f9ce 	bl	800a434 <__multadd>
 800a098:	9b02      	ldr	r3, [sp, #8]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	4606      	mov	r6, r0
 800a09e:	dc4f      	bgt.n	800a140 <_dtoa_r+0x948>
 800a0a0:	9b06      	ldr	r3, [sp, #24]
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	dd4c      	ble.n	800a140 <_dtoa_r+0x948>
 800a0a6:	e011      	b.n	800a0cc <_dtoa_r+0x8d4>
 800a0a8:	d0c9      	beq.n	800a03e <_dtoa_r+0x846>
 800a0aa:	9a05      	ldr	r2, [sp, #20]
 800a0ac:	331c      	adds	r3, #28
 800a0ae:	441a      	add	r2, r3
 800a0b0:	9205      	str	r2, [sp, #20]
 800a0b2:	441d      	add	r5, r3
 800a0b4:	4498      	add	r8, r3
 800a0b6:	e7c2      	b.n	800a03e <_dtoa_r+0x846>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	e7f6      	b.n	800a0aa <_dtoa_r+0x8b2>
 800a0bc:	f1b9 0f00 	cmp.w	r9, #0
 800a0c0:	dc38      	bgt.n	800a134 <_dtoa_r+0x93c>
 800a0c2:	9b06      	ldr	r3, [sp, #24]
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	dd35      	ble.n	800a134 <_dtoa_r+0x93c>
 800a0c8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a0cc:	9b02      	ldr	r3, [sp, #8]
 800a0ce:	b963      	cbnz	r3, 800a0ea <_dtoa_r+0x8f2>
 800a0d0:	4639      	mov	r1, r7
 800a0d2:	2205      	movs	r2, #5
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	f000 f9ad 	bl	800a434 <__multadd>
 800a0da:	4601      	mov	r1, r0
 800a0dc:	4607      	mov	r7, r0
 800a0de:	9804      	ldr	r0, [sp, #16]
 800a0e0:	f000 fb72 	bl	800a7c8 <__mcmp>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	f73f adcc 	bgt.w	8009c82 <_dtoa_r+0x48a>
 800a0ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0ec:	465d      	mov	r5, fp
 800a0ee:	ea6f 0a03 	mvn.w	sl, r3
 800a0f2:	f04f 0900 	mov.w	r9, #0
 800a0f6:	4639      	mov	r1, r7
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	f000 f984 	bl	800a406 <_Bfree>
 800a0fe:	2e00      	cmp	r6, #0
 800a100:	f43f aeb7 	beq.w	8009e72 <_dtoa_r+0x67a>
 800a104:	f1b9 0f00 	cmp.w	r9, #0
 800a108:	d005      	beq.n	800a116 <_dtoa_r+0x91e>
 800a10a:	45b1      	cmp	r9, r6
 800a10c:	d003      	beq.n	800a116 <_dtoa_r+0x91e>
 800a10e:	4649      	mov	r1, r9
 800a110:	4620      	mov	r0, r4
 800a112:	f000 f978 	bl	800a406 <_Bfree>
 800a116:	4631      	mov	r1, r6
 800a118:	4620      	mov	r0, r4
 800a11a:	f000 f974 	bl	800a406 <_Bfree>
 800a11e:	e6a8      	b.n	8009e72 <_dtoa_r+0x67a>
 800a120:	2700      	movs	r7, #0
 800a122:	463e      	mov	r6, r7
 800a124:	e7e1      	b.n	800a0ea <_dtoa_r+0x8f2>
 800a126:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a12a:	463e      	mov	r6, r7
 800a12c:	e5a9      	b.n	8009c82 <_dtoa_r+0x48a>
 800a12e:	bf00      	nop
 800a130:	40240000 	.word	0x40240000
 800a134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a136:	f8cd 9008 	str.w	r9, [sp, #8]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 80fa 	beq.w	800a334 <_dtoa_r+0xb3c>
 800a140:	2d00      	cmp	r5, #0
 800a142:	dd05      	ble.n	800a150 <_dtoa_r+0x958>
 800a144:	4631      	mov	r1, r6
 800a146:	462a      	mov	r2, r5
 800a148:	4620      	mov	r0, r4
 800a14a:	f000 fae9 	bl	800a720 <__lshift>
 800a14e:	4606      	mov	r6, r0
 800a150:	9b07      	ldr	r3, [sp, #28]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d04c      	beq.n	800a1f0 <_dtoa_r+0x9f8>
 800a156:	6871      	ldr	r1, [r6, #4]
 800a158:	4620      	mov	r0, r4
 800a15a:	f000 f920 	bl	800a39e <_Balloc>
 800a15e:	6932      	ldr	r2, [r6, #16]
 800a160:	3202      	adds	r2, #2
 800a162:	4605      	mov	r5, r0
 800a164:	0092      	lsls	r2, r2, #2
 800a166:	f106 010c 	add.w	r1, r6, #12
 800a16a:	300c      	adds	r0, #12
 800a16c:	f000 f90a 	bl	800a384 <memcpy>
 800a170:	2201      	movs	r2, #1
 800a172:	4629      	mov	r1, r5
 800a174:	4620      	mov	r0, r4
 800a176:	f000 fad3 	bl	800a720 <__lshift>
 800a17a:	9b00      	ldr	r3, [sp, #0]
 800a17c:	f8cd b014 	str.w	fp, [sp, #20]
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	46b1      	mov	r9, r6
 800a186:	9307      	str	r3, [sp, #28]
 800a188:	4606      	mov	r6, r0
 800a18a:	4639      	mov	r1, r7
 800a18c:	9804      	ldr	r0, [sp, #16]
 800a18e:	f7ff faa7 	bl	80096e0 <quorem>
 800a192:	4649      	mov	r1, r9
 800a194:	4605      	mov	r5, r0
 800a196:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a19a:	9804      	ldr	r0, [sp, #16]
 800a19c:	f000 fb14 	bl	800a7c8 <__mcmp>
 800a1a0:	4632      	mov	r2, r6
 800a1a2:	9000      	str	r0, [sp, #0]
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f000 fb28 	bl	800a7fc <__mdiff>
 800a1ac:	68c3      	ldr	r3, [r0, #12]
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	bb03      	cbnz	r3, 800a1f4 <_dtoa_r+0x9fc>
 800a1b2:	4601      	mov	r1, r0
 800a1b4:	9008      	str	r0, [sp, #32]
 800a1b6:	9804      	ldr	r0, [sp, #16]
 800a1b8:	f000 fb06 	bl	800a7c8 <__mcmp>
 800a1bc:	9a08      	ldr	r2, [sp, #32]
 800a1be:	4603      	mov	r3, r0
 800a1c0:	4611      	mov	r1, r2
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	9308      	str	r3, [sp, #32]
 800a1c6:	f000 f91e 	bl	800a406 <_Bfree>
 800a1ca:	9b08      	ldr	r3, [sp, #32]
 800a1cc:	b9a3      	cbnz	r3, 800a1f8 <_dtoa_r+0xa00>
 800a1ce:	9a06      	ldr	r2, [sp, #24]
 800a1d0:	b992      	cbnz	r2, 800a1f8 <_dtoa_r+0xa00>
 800a1d2:	9a07      	ldr	r2, [sp, #28]
 800a1d4:	b982      	cbnz	r2, 800a1f8 <_dtoa_r+0xa00>
 800a1d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a1da:	d029      	beq.n	800a230 <_dtoa_r+0xa38>
 800a1dc:	9b00      	ldr	r3, [sp, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	dd01      	ble.n	800a1e6 <_dtoa_r+0x9ee>
 800a1e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a1e6:	9b05      	ldr	r3, [sp, #20]
 800a1e8:	1c5d      	adds	r5, r3, #1
 800a1ea:	f883 8000 	strb.w	r8, [r3]
 800a1ee:	e782      	b.n	800a0f6 <_dtoa_r+0x8fe>
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	e7c2      	b.n	800a17a <_dtoa_r+0x982>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e7e3      	b.n	800a1c0 <_dtoa_r+0x9c8>
 800a1f8:	9a00      	ldr	r2, [sp, #0]
 800a1fa:	2a00      	cmp	r2, #0
 800a1fc:	db04      	blt.n	800a208 <_dtoa_r+0xa10>
 800a1fe:	d125      	bne.n	800a24c <_dtoa_r+0xa54>
 800a200:	9a06      	ldr	r2, [sp, #24]
 800a202:	bb1a      	cbnz	r2, 800a24c <_dtoa_r+0xa54>
 800a204:	9a07      	ldr	r2, [sp, #28]
 800a206:	bb0a      	cbnz	r2, 800a24c <_dtoa_r+0xa54>
 800a208:	2b00      	cmp	r3, #0
 800a20a:	ddec      	ble.n	800a1e6 <_dtoa_r+0x9ee>
 800a20c:	2201      	movs	r2, #1
 800a20e:	9904      	ldr	r1, [sp, #16]
 800a210:	4620      	mov	r0, r4
 800a212:	f000 fa85 	bl	800a720 <__lshift>
 800a216:	4639      	mov	r1, r7
 800a218:	9004      	str	r0, [sp, #16]
 800a21a:	f000 fad5 	bl	800a7c8 <__mcmp>
 800a21e:	2800      	cmp	r0, #0
 800a220:	dc03      	bgt.n	800a22a <_dtoa_r+0xa32>
 800a222:	d1e0      	bne.n	800a1e6 <_dtoa_r+0x9ee>
 800a224:	f018 0f01 	tst.w	r8, #1
 800a228:	d0dd      	beq.n	800a1e6 <_dtoa_r+0x9ee>
 800a22a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a22e:	d1d8      	bne.n	800a1e2 <_dtoa_r+0x9ea>
 800a230:	9b05      	ldr	r3, [sp, #20]
 800a232:	9a05      	ldr	r2, [sp, #20]
 800a234:	1c5d      	adds	r5, r3, #1
 800a236:	2339      	movs	r3, #57	; 0x39
 800a238:	7013      	strb	r3, [r2, #0]
 800a23a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a23e:	2b39      	cmp	r3, #57	; 0x39
 800a240:	f105 32ff 	add.w	r2, r5, #4294967295
 800a244:	d04f      	beq.n	800a2e6 <_dtoa_r+0xaee>
 800a246:	3301      	adds	r3, #1
 800a248:	7013      	strb	r3, [r2, #0]
 800a24a:	e754      	b.n	800a0f6 <_dtoa_r+0x8fe>
 800a24c:	9a05      	ldr	r2, [sp, #20]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f102 0501 	add.w	r5, r2, #1
 800a254:	dd06      	ble.n	800a264 <_dtoa_r+0xa6c>
 800a256:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a25a:	d0e9      	beq.n	800a230 <_dtoa_r+0xa38>
 800a25c:	f108 0801 	add.w	r8, r8, #1
 800a260:	9b05      	ldr	r3, [sp, #20]
 800a262:	e7c2      	b.n	800a1ea <_dtoa_r+0x9f2>
 800a264:	9a02      	ldr	r2, [sp, #8]
 800a266:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a26a:	eba5 030b 	sub.w	r3, r5, fp
 800a26e:	4293      	cmp	r3, r2
 800a270:	d021      	beq.n	800a2b6 <_dtoa_r+0xabe>
 800a272:	2300      	movs	r3, #0
 800a274:	220a      	movs	r2, #10
 800a276:	9904      	ldr	r1, [sp, #16]
 800a278:	4620      	mov	r0, r4
 800a27a:	f000 f8db 	bl	800a434 <__multadd>
 800a27e:	45b1      	cmp	r9, r6
 800a280:	9004      	str	r0, [sp, #16]
 800a282:	f04f 0300 	mov.w	r3, #0
 800a286:	f04f 020a 	mov.w	r2, #10
 800a28a:	4649      	mov	r1, r9
 800a28c:	4620      	mov	r0, r4
 800a28e:	d105      	bne.n	800a29c <_dtoa_r+0xaa4>
 800a290:	f000 f8d0 	bl	800a434 <__multadd>
 800a294:	4681      	mov	r9, r0
 800a296:	4606      	mov	r6, r0
 800a298:	9505      	str	r5, [sp, #20]
 800a29a:	e776      	b.n	800a18a <_dtoa_r+0x992>
 800a29c:	f000 f8ca 	bl	800a434 <__multadd>
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	4681      	mov	r9, r0
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	220a      	movs	r2, #10
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f000 f8c3 	bl	800a434 <__multadd>
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	e7f2      	b.n	800a298 <_dtoa_r+0xaa0>
 800a2b2:	f04f 0900 	mov.w	r9, #0
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	9904      	ldr	r1, [sp, #16]
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f000 fa30 	bl	800a720 <__lshift>
 800a2c0:	4639      	mov	r1, r7
 800a2c2:	9004      	str	r0, [sp, #16]
 800a2c4:	f000 fa80 	bl	800a7c8 <__mcmp>
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	dcb6      	bgt.n	800a23a <_dtoa_r+0xa42>
 800a2cc:	d102      	bne.n	800a2d4 <_dtoa_r+0xadc>
 800a2ce:	f018 0f01 	tst.w	r8, #1
 800a2d2:	d1b2      	bne.n	800a23a <_dtoa_r+0xa42>
 800a2d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a2d8:	2b30      	cmp	r3, #48	; 0x30
 800a2da:	f105 32ff 	add.w	r2, r5, #4294967295
 800a2de:	f47f af0a 	bne.w	800a0f6 <_dtoa_r+0x8fe>
 800a2e2:	4615      	mov	r5, r2
 800a2e4:	e7f6      	b.n	800a2d4 <_dtoa_r+0xadc>
 800a2e6:	4593      	cmp	fp, r2
 800a2e8:	d105      	bne.n	800a2f6 <_dtoa_r+0xafe>
 800a2ea:	2331      	movs	r3, #49	; 0x31
 800a2ec:	f10a 0a01 	add.w	sl, sl, #1
 800a2f0:	f88b 3000 	strb.w	r3, [fp]
 800a2f4:	e6ff      	b.n	800a0f6 <_dtoa_r+0x8fe>
 800a2f6:	4615      	mov	r5, r2
 800a2f8:	e79f      	b.n	800a23a <_dtoa_r+0xa42>
 800a2fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a360 <_dtoa_r+0xb68>
 800a2fe:	e007      	b.n	800a310 <_dtoa_r+0xb18>
 800a300:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a302:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a364 <_dtoa_r+0xb6c>
 800a306:	b11b      	cbz	r3, 800a310 <_dtoa_r+0xb18>
 800a308:	f10b 0308 	add.w	r3, fp, #8
 800a30c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a30e:	6013      	str	r3, [r2, #0]
 800a310:	4658      	mov	r0, fp
 800a312:	b017      	add	sp, #92	; 0x5c
 800a314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a318:	9b06      	ldr	r3, [sp, #24]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	f77f ae35 	ble.w	8009f8a <_dtoa_r+0x792>
 800a320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a322:	9307      	str	r3, [sp, #28]
 800a324:	e649      	b.n	8009fba <_dtoa_r+0x7c2>
 800a326:	9b02      	ldr	r3, [sp, #8]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	dc03      	bgt.n	800a334 <_dtoa_r+0xb3c>
 800a32c:	9b06      	ldr	r3, [sp, #24]
 800a32e:	2b02      	cmp	r3, #2
 800a330:	f73f aecc 	bgt.w	800a0cc <_dtoa_r+0x8d4>
 800a334:	465d      	mov	r5, fp
 800a336:	4639      	mov	r1, r7
 800a338:	9804      	ldr	r0, [sp, #16]
 800a33a:	f7ff f9d1 	bl	80096e0 <quorem>
 800a33e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a342:	f805 8b01 	strb.w	r8, [r5], #1
 800a346:	9a02      	ldr	r2, [sp, #8]
 800a348:	eba5 030b 	sub.w	r3, r5, fp
 800a34c:	429a      	cmp	r2, r3
 800a34e:	ddb0      	ble.n	800a2b2 <_dtoa_r+0xaba>
 800a350:	2300      	movs	r3, #0
 800a352:	220a      	movs	r2, #10
 800a354:	9904      	ldr	r1, [sp, #16]
 800a356:	4620      	mov	r0, r4
 800a358:	f000 f86c 	bl	800a434 <__multadd>
 800a35c:	9004      	str	r0, [sp, #16]
 800a35e:	e7ea      	b.n	800a336 <_dtoa_r+0xb3e>
 800a360:	0800aa38 	.word	0x0800aa38
 800a364:	0800aa3a 	.word	0x0800aa3a

0800a368 <_localeconv_r>:
 800a368:	4b04      	ldr	r3, [pc, #16]	; (800a37c <_localeconv_r+0x14>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	6a18      	ldr	r0, [r3, #32]
 800a36e:	4b04      	ldr	r3, [pc, #16]	; (800a380 <_localeconv_r+0x18>)
 800a370:	2800      	cmp	r0, #0
 800a372:	bf08      	it	eq
 800a374:	4618      	moveq	r0, r3
 800a376:	30f0      	adds	r0, #240	; 0xf0
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	20000180 	.word	0x20000180
 800a380:	200001e4 	.word	0x200001e4

0800a384 <memcpy>:
 800a384:	b510      	push	{r4, lr}
 800a386:	1e43      	subs	r3, r0, #1
 800a388:	440a      	add	r2, r1
 800a38a:	4291      	cmp	r1, r2
 800a38c:	d100      	bne.n	800a390 <memcpy+0xc>
 800a38e:	bd10      	pop	{r4, pc}
 800a390:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a394:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a398:	e7f7      	b.n	800a38a <memcpy+0x6>

0800a39a <__malloc_lock>:
 800a39a:	4770      	bx	lr

0800a39c <__malloc_unlock>:
 800a39c:	4770      	bx	lr

0800a39e <_Balloc>:
 800a39e:	b570      	push	{r4, r5, r6, lr}
 800a3a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	460e      	mov	r6, r1
 800a3a6:	b93d      	cbnz	r5, 800a3b8 <_Balloc+0x1a>
 800a3a8:	2010      	movs	r0, #16
 800a3aa:	f7fe fd7f 	bl	8008eac <malloc>
 800a3ae:	6260      	str	r0, [r4, #36]	; 0x24
 800a3b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a3b4:	6005      	str	r5, [r0, #0]
 800a3b6:	60c5      	str	r5, [r0, #12]
 800a3b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a3ba:	68eb      	ldr	r3, [r5, #12]
 800a3bc:	b183      	cbz	r3, 800a3e0 <_Balloc+0x42>
 800a3be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a3c6:	b9b8      	cbnz	r0, 800a3f8 <_Balloc+0x5a>
 800a3c8:	2101      	movs	r1, #1
 800a3ca:	fa01 f506 	lsl.w	r5, r1, r6
 800a3ce:	1d6a      	adds	r2, r5, #5
 800a3d0:	0092      	lsls	r2, r2, #2
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	f000 fabe 	bl	800a954 <_calloc_r>
 800a3d8:	b160      	cbz	r0, 800a3f4 <_Balloc+0x56>
 800a3da:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a3de:	e00e      	b.n	800a3fe <_Balloc+0x60>
 800a3e0:	2221      	movs	r2, #33	; 0x21
 800a3e2:	2104      	movs	r1, #4
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f000 fab5 	bl	800a954 <_calloc_r>
 800a3ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3ec:	60e8      	str	r0, [r5, #12]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1e4      	bne.n	800a3be <_Balloc+0x20>
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	bd70      	pop	{r4, r5, r6, pc}
 800a3f8:	6802      	ldr	r2, [r0, #0]
 800a3fa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a3fe:	2300      	movs	r3, #0
 800a400:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a404:	e7f7      	b.n	800a3f6 <_Balloc+0x58>

0800a406 <_Bfree>:
 800a406:	b570      	push	{r4, r5, r6, lr}
 800a408:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a40a:	4606      	mov	r6, r0
 800a40c:	460d      	mov	r5, r1
 800a40e:	b93c      	cbnz	r4, 800a420 <_Bfree+0x1a>
 800a410:	2010      	movs	r0, #16
 800a412:	f7fe fd4b 	bl	8008eac <malloc>
 800a416:	6270      	str	r0, [r6, #36]	; 0x24
 800a418:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a41c:	6004      	str	r4, [r0, #0]
 800a41e:	60c4      	str	r4, [r0, #12]
 800a420:	b13d      	cbz	r5, 800a432 <_Bfree+0x2c>
 800a422:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a424:	686a      	ldr	r2, [r5, #4]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a42c:	6029      	str	r1, [r5, #0]
 800a42e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a432:	bd70      	pop	{r4, r5, r6, pc}

0800a434 <__multadd>:
 800a434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a438:	690d      	ldr	r5, [r1, #16]
 800a43a:	461f      	mov	r7, r3
 800a43c:	4606      	mov	r6, r0
 800a43e:	460c      	mov	r4, r1
 800a440:	f101 0c14 	add.w	ip, r1, #20
 800a444:	2300      	movs	r3, #0
 800a446:	f8dc 0000 	ldr.w	r0, [ip]
 800a44a:	b281      	uxth	r1, r0
 800a44c:	fb02 7101 	mla	r1, r2, r1, r7
 800a450:	0c0f      	lsrs	r7, r1, #16
 800a452:	0c00      	lsrs	r0, r0, #16
 800a454:	fb02 7000 	mla	r0, r2, r0, r7
 800a458:	b289      	uxth	r1, r1
 800a45a:	3301      	adds	r3, #1
 800a45c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a460:	429d      	cmp	r5, r3
 800a462:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a466:	f84c 1b04 	str.w	r1, [ip], #4
 800a46a:	dcec      	bgt.n	800a446 <__multadd+0x12>
 800a46c:	b1d7      	cbz	r7, 800a4a4 <__multadd+0x70>
 800a46e:	68a3      	ldr	r3, [r4, #8]
 800a470:	42ab      	cmp	r3, r5
 800a472:	dc12      	bgt.n	800a49a <__multadd+0x66>
 800a474:	6861      	ldr	r1, [r4, #4]
 800a476:	4630      	mov	r0, r6
 800a478:	3101      	adds	r1, #1
 800a47a:	f7ff ff90 	bl	800a39e <_Balloc>
 800a47e:	6922      	ldr	r2, [r4, #16]
 800a480:	3202      	adds	r2, #2
 800a482:	f104 010c 	add.w	r1, r4, #12
 800a486:	4680      	mov	r8, r0
 800a488:	0092      	lsls	r2, r2, #2
 800a48a:	300c      	adds	r0, #12
 800a48c:	f7ff ff7a 	bl	800a384 <memcpy>
 800a490:	4621      	mov	r1, r4
 800a492:	4630      	mov	r0, r6
 800a494:	f7ff ffb7 	bl	800a406 <_Bfree>
 800a498:	4644      	mov	r4, r8
 800a49a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a49e:	3501      	adds	r5, #1
 800a4a0:	615f      	str	r7, [r3, #20]
 800a4a2:	6125      	str	r5, [r4, #16]
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a4aa <__hi0bits>:
 800a4aa:	0c02      	lsrs	r2, r0, #16
 800a4ac:	0412      	lsls	r2, r2, #16
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	b9b2      	cbnz	r2, 800a4e0 <__hi0bits+0x36>
 800a4b2:	0403      	lsls	r3, r0, #16
 800a4b4:	2010      	movs	r0, #16
 800a4b6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a4ba:	bf04      	itt	eq
 800a4bc:	021b      	lsleq	r3, r3, #8
 800a4be:	3008      	addeq	r0, #8
 800a4c0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a4c4:	bf04      	itt	eq
 800a4c6:	011b      	lsleq	r3, r3, #4
 800a4c8:	3004      	addeq	r0, #4
 800a4ca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a4ce:	bf04      	itt	eq
 800a4d0:	009b      	lsleq	r3, r3, #2
 800a4d2:	3002      	addeq	r0, #2
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	db06      	blt.n	800a4e6 <__hi0bits+0x3c>
 800a4d8:	005b      	lsls	r3, r3, #1
 800a4da:	d503      	bpl.n	800a4e4 <__hi0bits+0x3a>
 800a4dc:	3001      	adds	r0, #1
 800a4de:	4770      	bx	lr
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	e7e8      	b.n	800a4b6 <__hi0bits+0xc>
 800a4e4:	2020      	movs	r0, #32
 800a4e6:	4770      	bx	lr

0800a4e8 <__lo0bits>:
 800a4e8:	6803      	ldr	r3, [r0, #0]
 800a4ea:	f013 0207 	ands.w	r2, r3, #7
 800a4ee:	4601      	mov	r1, r0
 800a4f0:	d00b      	beq.n	800a50a <__lo0bits+0x22>
 800a4f2:	07da      	lsls	r2, r3, #31
 800a4f4:	d423      	bmi.n	800a53e <__lo0bits+0x56>
 800a4f6:	0798      	lsls	r0, r3, #30
 800a4f8:	bf49      	itett	mi
 800a4fa:	085b      	lsrmi	r3, r3, #1
 800a4fc:	089b      	lsrpl	r3, r3, #2
 800a4fe:	2001      	movmi	r0, #1
 800a500:	600b      	strmi	r3, [r1, #0]
 800a502:	bf5c      	itt	pl
 800a504:	600b      	strpl	r3, [r1, #0]
 800a506:	2002      	movpl	r0, #2
 800a508:	4770      	bx	lr
 800a50a:	b298      	uxth	r0, r3
 800a50c:	b9a8      	cbnz	r0, 800a53a <__lo0bits+0x52>
 800a50e:	0c1b      	lsrs	r3, r3, #16
 800a510:	2010      	movs	r0, #16
 800a512:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a516:	bf04      	itt	eq
 800a518:	0a1b      	lsreq	r3, r3, #8
 800a51a:	3008      	addeq	r0, #8
 800a51c:	071a      	lsls	r2, r3, #28
 800a51e:	bf04      	itt	eq
 800a520:	091b      	lsreq	r3, r3, #4
 800a522:	3004      	addeq	r0, #4
 800a524:	079a      	lsls	r2, r3, #30
 800a526:	bf04      	itt	eq
 800a528:	089b      	lsreq	r3, r3, #2
 800a52a:	3002      	addeq	r0, #2
 800a52c:	07da      	lsls	r2, r3, #31
 800a52e:	d402      	bmi.n	800a536 <__lo0bits+0x4e>
 800a530:	085b      	lsrs	r3, r3, #1
 800a532:	d006      	beq.n	800a542 <__lo0bits+0x5a>
 800a534:	3001      	adds	r0, #1
 800a536:	600b      	str	r3, [r1, #0]
 800a538:	4770      	bx	lr
 800a53a:	4610      	mov	r0, r2
 800a53c:	e7e9      	b.n	800a512 <__lo0bits+0x2a>
 800a53e:	2000      	movs	r0, #0
 800a540:	4770      	bx	lr
 800a542:	2020      	movs	r0, #32
 800a544:	4770      	bx	lr

0800a546 <__i2b>:
 800a546:	b510      	push	{r4, lr}
 800a548:	460c      	mov	r4, r1
 800a54a:	2101      	movs	r1, #1
 800a54c:	f7ff ff27 	bl	800a39e <_Balloc>
 800a550:	2201      	movs	r2, #1
 800a552:	6144      	str	r4, [r0, #20]
 800a554:	6102      	str	r2, [r0, #16]
 800a556:	bd10      	pop	{r4, pc}

0800a558 <__multiply>:
 800a558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	4614      	mov	r4, r2
 800a55e:	690a      	ldr	r2, [r1, #16]
 800a560:	6923      	ldr	r3, [r4, #16]
 800a562:	429a      	cmp	r2, r3
 800a564:	bfb8      	it	lt
 800a566:	460b      	movlt	r3, r1
 800a568:	4688      	mov	r8, r1
 800a56a:	bfbc      	itt	lt
 800a56c:	46a0      	movlt	r8, r4
 800a56e:	461c      	movlt	r4, r3
 800a570:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a574:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a578:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a57c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a580:	eb07 0609 	add.w	r6, r7, r9
 800a584:	42b3      	cmp	r3, r6
 800a586:	bfb8      	it	lt
 800a588:	3101      	addlt	r1, #1
 800a58a:	f7ff ff08 	bl	800a39e <_Balloc>
 800a58e:	f100 0514 	add.w	r5, r0, #20
 800a592:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a596:	462b      	mov	r3, r5
 800a598:	2200      	movs	r2, #0
 800a59a:	4573      	cmp	r3, lr
 800a59c:	d316      	bcc.n	800a5cc <__multiply+0x74>
 800a59e:	f104 0214 	add.w	r2, r4, #20
 800a5a2:	f108 0114 	add.w	r1, r8, #20
 800a5a6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a5aa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	9b00      	ldr	r3, [sp, #0]
 800a5b2:	9201      	str	r2, [sp, #4]
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d80c      	bhi.n	800a5d2 <__multiply+0x7a>
 800a5b8:	2e00      	cmp	r6, #0
 800a5ba:	dd03      	ble.n	800a5c4 <__multiply+0x6c>
 800a5bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d05d      	beq.n	800a680 <__multiply+0x128>
 800a5c4:	6106      	str	r6, [r0, #16]
 800a5c6:	b003      	add	sp, #12
 800a5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5cc:	f843 2b04 	str.w	r2, [r3], #4
 800a5d0:	e7e3      	b.n	800a59a <__multiply+0x42>
 800a5d2:	f8b2 b000 	ldrh.w	fp, [r2]
 800a5d6:	f1bb 0f00 	cmp.w	fp, #0
 800a5da:	d023      	beq.n	800a624 <__multiply+0xcc>
 800a5dc:	4689      	mov	r9, r1
 800a5de:	46ac      	mov	ip, r5
 800a5e0:	f04f 0800 	mov.w	r8, #0
 800a5e4:	f859 4b04 	ldr.w	r4, [r9], #4
 800a5e8:	f8dc a000 	ldr.w	sl, [ip]
 800a5ec:	b2a3      	uxth	r3, r4
 800a5ee:	fa1f fa8a 	uxth.w	sl, sl
 800a5f2:	fb0b a303 	mla	r3, fp, r3, sl
 800a5f6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a5fa:	f8dc 4000 	ldr.w	r4, [ip]
 800a5fe:	4443      	add	r3, r8
 800a600:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a604:	fb0b 840a 	mla	r4, fp, sl, r8
 800a608:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a60c:	46e2      	mov	sl, ip
 800a60e:	b29b      	uxth	r3, r3
 800a610:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a614:	454f      	cmp	r7, r9
 800a616:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a61a:	f84a 3b04 	str.w	r3, [sl], #4
 800a61e:	d82b      	bhi.n	800a678 <__multiply+0x120>
 800a620:	f8cc 8004 	str.w	r8, [ip, #4]
 800a624:	9b01      	ldr	r3, [sp, #4]
 800a626:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a62a:	3204      	adds	r2, #4
 800a62c:	f1ba 0f00 	cmp.w	sl, #0
 800a630:	d020      	beq.n	800a674 <__multiply+0x11c>
 800a632:	682b      	ldr	r3, [r5, #0]
 800a634:	4689      	mov	r9, r1
 800a636:	46a8      	mov	r8, r5
 800a638:	f04f 0b00 	mov.w	fp, #0
 800a63c:	f8b9 c000 	ldrh.w	ip, [r9]
 800a640:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a644:	fb0a 440c 	mla	r4, sl, ip, r4
 800a648:	445c      	add	r4, fp
 800a64a:	46c4      	mov	ip, r8
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a652:	f84c 3b04 	str.w	r3, [ip], #4
 800a656:	f859 3b04 	ldr.w	r3, [r9], #4
 800a65a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a65e:	0c1b      	lsrs	r3, r3, #16
 800a660:	fb0a b303 	mla	r3, sl, r3, fp
 800a664:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a668:	454f      	cmp	r7, r9
 800a66a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a66e:	d805      	bhi.n	800a67c <__multiply+0x124>
 800a670:	f8c8 3004 	str.w	r3, [r8, #4]
 800a674:	3504      	adds	r5, #4
 800a676:	e79b      	b.n	800a5b0 <__multiply+0x58>
 800a678:	46d4      	mov	ip, sl
 800a67a:	e7b3      	b.n	800a5e4 <__multiply+0x8c>
 800a67c:	46e0      	mov	r8, ip
 800a67e:	e7dd      	b.n	800a63c <__multiply+0xe4>
 800a680:	3e01      	subs	r6, #1
 800a682:	e799      	b.n	800a5b8 <__multiply+0x60>

0800a684 <__pow5mult>:
 800a684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a688:	4615      	mov	r5, r2
 800a68a:	f012 0203 	ands.w	r2, r2, #3
 800a68e:	4606      	mov	r6, r0
 800a690:	460f      	mov	r7, r1
 800a692:	d007      	beq.n	800a6a4 <__pow5mult+0x20>
 800a694:	3a01      	subs	r2, #1
 800a696:	4c21      	ldr	r4, [pc, #132]	; (800a71c <__pow5mult+0x98>)
 800a698:	2300      	movs	r3, #0
 800a69a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a69e:	f7ff fec9 	bl	800a434 <__multadd>
 800a6a2:	4607      	mov	r7, r0
 800a6a4:	10ad      	asrs	r5, r5, #2
 800a6a6:	d035      	beq.n	800a714 <__pow5mult+0x90>
 800a6a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a6aa:	b93c      	cbnz	r4, 800a6bc <__pow5mult+0x38>
 800a6ac:	2010      	movs	r0, #16
 800a6ae:	f7fe fbfd 	bl	8008eac <malloc>
 800a6b2:	6270      	str	r0, [r6, #36]	; 0x24
 800a6b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6b8:	6004      	str	r4, [r0, #0]
 800a6ba:	60c4      	str	r4, [r0, #12]
 800a6bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a6c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6c4:	b94c      	cbnz	r4, 800a6da <__pow5mult+0x56>
 800a6c6:	f240 2171 	movw	r1, #625	; 0x271
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	f7ff ff3b 	bl	800a546 <__i2b>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	6003      	str	r3, [r0, #0]
 800a6da:	f04f 0800 	mov.w	r8, #0
 800a6de:	07eb      	lsls	r3, r5, #31
 800a6e0:	d50a      	bpl.n	800a6f8 <__pow5mult+0x74>
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	4622      	mov	r2, r4
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f7ff ff36 	bl	800a558 <__multiply>
 800a6ec:	4639      	mov	r1, r7
 800a6ee:	4681      	mov	r9, r0
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	f7ff fe88 	bl	800a406 <_Bfree>
 800a6f6:	464f      	mov	r7, r9
 800a6f8:	106d      	asrs	r5, r5, #1
 800a6fa:	d00b      	beq.n	800a714 <__pow5mult+0x90>
 800a6fc:	6820      	ldr	r0, [r4, #0]
 800a6fe:	b938      	cbnz	r0, 800a710 <__pow5mult+0x8c>
 800a700:	4622      	mov	r2, r4
 800a702:	4621      	mov	r1, r4
 800a704:	4630      	mov	r0, r6
 800a706:	f7ff ff27 	bl	800a558 <__multiply>
 800a70a:	6020      	str	r0, [r4, #0]
 800a70c:	f8c0 8000 	str.w	r8, [r0]
 800a710:	4604      	mov	r4, r0
 800a712:	e7e4      	b.n	800a6de <__pow5mult+0x5a>
 800a714:	4638      	mov	r0, r7
 800a716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a71a:	bf00      	nop
 800a71c:	0800ab38 	.word	0x0800ab38

0800a720 <__lshift>:
 800a720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a724:	460c      	mov	r4, r1
 800a726:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a72a:	6923      	ldr	r3, [r4, #16]
 800a72c:	6849      	ldr	r1, [r1, #4]
 800a72e:	eb0a 0903 	add.w	r9, sl, r3
 800a732:	68a3      	ldr	r3, [r4, #8]
 800a734:	4607      	mov	r7, r0
 800a736:	4616      	mov	r6, r2
 800a738:	f109 0501 	add.w	r5, r9, #1
 800a73c:	42ab      	cmp	r3, r5
 800a73e:	db32      	blt.n	800a7a6 <__lshift+0x86>
 800a740:	4638      	mov	r0, r7
 800a742:	f7ff fe2c 	bl	800a39e <_Balloc>
 800a746:	2300      	movs	r3, #0
 800a748:	4680      	mov	r8, r0
 800a74a:	f100 0114 	add.w	r1, r0, #20
 800a74e:	461a      	mov	r2, r3
 800a750:	4553      	cmp	r3, sl
 800a752:	db2b      	blt.n	800a7ac <__lshift+0x8c>
 800a754:	6920      	ldr	r0, [r4, #16]
 800a756:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a75a:	f104 0314 	add.w	r3, r4, #20
 800a75e:	f016 021f 	ands.w	r2, r6, #31
 800a762:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a766:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a76a:	d025      	beq.n	800a7b8 <__lshift+0x98>
 800a76c:	f1c2 0e20 	rsb	lr, r2, #32
 800a770:	2000      	movs	r0, #0
 800a772:	681e      	ldr	r6, [r3, #0]
 800a774:	468a      	mov	sl, r1
 800a776:	4096      	lsls	r6, r2
 800a778:	4330      	orrs	r0, r6
 800a77a:	f84a 0b04 	str.w	r0, [sl], #4
 800a77e:	f853 0b04 	ldr.w	r0, [r3], #4
 800a782:	459c      	cmp	ip, r3
 800a784:	fa20 f00e 	lsr.w	r0, r0, lr
 800a788:	d814      	bhi.n	800a7b4 <__lshift+0x94>
 800a78a:	6048      	str	r0, [r1, #4]
 800a78c:	b108      	cbz	r0, 800a792 <__lshift+0x72>
 800a78e:	f109 0502 	add.w	r5, r9, #2
 800a792:	3d01      	subs	r5, #1
 800a794:	4638      	mov	r0, r7
 800a796:	f8c8 5010 	str.w	r5, [r8, #16]
 800a79a:	4621      	mov	r1, r4
 800a79c:	f7ff fe33 	bl	800a406 <_Bfree>
 800a7a0:	4640      	mov	r0, r8
 800a7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a6:	3101      	adds	r1, #1
 800a7a8:	005b      	lsls	r3, r3, #1
 800a7aa:	e7c7      	b.n	800a73c <__lshift+0x1c>
 800a7ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	e7cd      	b.n	800a750 <__lshift+0x30>
 800a7b4:	4651      	mov	r1, sl
 800a7b6:	e7dc      	b.n	800a772 <__lshift+0x52>
 800a7b8:	3904      	subs	r1, #4
 800a7ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7be:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7c2:	459c      	cmp	ip, r3
 800a7c4:	d8f9      	bhi.n	800a7ba <__lshift+0x9a>
 800a7c6:	e7e4      	b.n	800a792 <__lshift+0x72>

0800a7c8 <__mcmp>:
 800a7c8:	6903      	ldr	r3, [r0, #16]
 800a7ca:	690a      	ldr	r2, [r1, #16]
 800a7cc:	1a9b      	subs	r3, r3, r2
 800a7ce:	b530      	push	{r4, r5, lr}
 800a7d0:	d10c      	bne.n	800a7ec <__mcmp+0x24>
 800a7d2:	0092      	lsls	r2, r2, #2
 800a7d4:	3014      	adds	r0, #20
 800a7d6:	3114      	adds	r1, #20
 800a7d8:	1884      	adds	r4, r0, r2
 800a7da:	4411      	add	r1, r2
 800a7dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a7e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a7e4:	4295      	cmp	r5, r2
 800a7e6:	d003      	beq.n	800a7f0 <__mcmp+0x28>
 800a7e8:	d305      	bcc.n	800a7f6 <__mcmp+0x2e>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	bd30      	pop	{r4, r5, pc}
 800a7f0:	42a0      	cmp	r0, r4
 800a7f2:	d3f3      	bcc.n	800a7dc <__mcmp+0x14>
 800a7f4:	e7fa      	b.n	800a7ec <__mcmp+0x24>
 800a7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7fa:	e7f7      	b.n	800a7ec <__mcmp+0x24>

0800a7fc <__mdiff>:
 800a7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a800:	460d      	mov	r5, r1
 800a802:	4607      	mov	r7, r0
 800a804:	4611      	mov	r1, r2
 800a806:	4628      	mov	r0, r5
 800a808:	4614      	mov	r4, r2
 800a80a:	f7ff ffdd 	bl	800a7c8 <__mcmp>
 800a80e:	1e06      	subs	r6, r0, #0
 800a810:	d108      	bne.n	800a824 <__mdiff+0x28>
 800a812:	4631      	mov	r1, r6
 800a814:	4638      	mov	r0, r7
 800a816:	f7ff fdc2 	bl	800a39e <_Balloc>
 800a81a:	2301      	movs	r3, #1
 800a81c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a824:	bfa4      	itt	ge
 800a826:	4623      	movge	r3, r4
 800a828:	462c      	movge	r4, r5
 800a82a:	4638      	mov	r0, r7
 800a82c:	6861      	ldr	r1, [r4, #4]
 800a82e:	bfa6      	itte	ge
 800a830:	461d      	movge	r5, r3
 800a832:	2600      	movge	r6, #0
 800a834:	2601      	movlt	r6, #1
 800a836:	f7ff fdb2 	bl	800a39e <_Balloc>
 800a83a:	692b      	ldr	r3, [r5, #16]
 800a83c:	60c6      	str	r6, [r0, #12]
 800a83e:	6926      	ldr	r6, [r4, #16]
 800a840:	f105 0914 	add.w	r9, r5, #20
 800a844:	f104 0214 	add.w	r2, r4, #20
 800a848:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a84c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a850:	f100 0514 	add.w	r5, r0, #20
 800a854:	f04f 0e00 	mov.w	lr, #0
 800a858:	f852 ab04 	ldr.w	sl, [r2], #4
 800a85c:	f859 4b04 	ldr.w	r4, [r9], #4
 800a860:	fa1e f18a 	uxtah	r1, lr, sl
 800a864:	b2a3      	uxth	r3, r4
 800a866:	1ac9      	subs	r1, r1, r3
 800a868:	0c23      	lsrs	r3, r4, #16
 800a86a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a86e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a872:	b289      	uxth	r1, r1
 800a874:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a878:	45c8      	cmp	r8, r9
 800a87a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a87e:	4694      	mov	ip, r2
 800a880:	f845 3b04 	str.w	r3, [r5], #4
 800a884:	d8e8      	bhi.n	800a858 <__mdiff+0x5c>
 800a886:	45bc      	cmp	ip, r7
 800a888:	d304      	bcc.n	800a894 <__mdiff+0x98>
 800a88a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a88e:	b183      	cbz	r3, 800a8b2 <__mdiff+0xb6>
 800a890:	6106      	str	r6, [r0, #16]
 800a892:	e7c5      	b.n	800a820 <__mdiff+0x24>
 800a894:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a898:	fa1e f381 	uxtah	r3, lr, r1
 800a89c:	141a      	asrs	r2, r3, #16
 800a89e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a8ac:	f845 3b04 	str.w	r3, [r5], #4
 800a8b0:	e7e9      	b.n	800a886 <__mdiff+0x8a>
 800a8b2:	3e01      	subs	r6, #1
 800a8b4:	e7e9      	b.n	800a88a <__mdiff+0x8e>

0800a8b6 <__d2b>:
 800a8b6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8ba:	460e      	mov	r6, r1
 800a8bc:	2101      	movs	r1, #1
 800a8be:	ec59 8b10 	vmov	r8, r9, d0
 800a8c2:	4615      	mov	r5, r2
 800a8c4:	f7ff fd6b 	bl	800a39e <_Balloc>
 800a8c8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a8cc:	4607      	mov	r7, r0
 800a8ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8d2:	bb34      	cbnz	r4, 800a922 <__d2b+0x6c>
 800a8d4:	9301      	str	r3, [sp, #4]
 800a8d6:	f1b8 0300 	subs.w	r3, r8, #0
 800a8da:	d027      	beq.n	800a92c <__d2b+0x76>
 800a8dc:	a802      	add	r0, sp, #8
 800a8de:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a8e2:	f7ff fe01 	bl	800a4e8 <__lo0bits>
 800a8e6:	9900      	ldr	r1, [sp, #0]
 800a8e8:	b1f0      	cbz	r0, 800a928 <__d2b+0x72>
 800a8ea:	9a01      	ldr	r2, [sp, #4]
 800a8ec:	f1c0 0320 	rsb	r3, r0, #32
 800a8f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f4:	430b      	orrs	r3, r1
 800a8f6:	40c2      	lsrs	r2, r0
 800a8f8:	617b      	str	r3, [r7, #20]
 800a8fa:	9201      	str	r2, [sp, #4]
 800a8fc:	9b01      	ldr	r3, [sp, #4]
 800a8fe:	61bb      	str	r3, [r7, #24]
 800a900:	2b00      	cmp	r3, #0
 800a902:	bf14      	ite	ne
 800a904:	2102      	movne	r1, #2
 800a906:	2101      	moveq	r1, #1
 800a908:	6139      	str	r1, [r7, #16]
 800a90a:	b1c4      	cbz	r4, 800a93e <__d2b+0x88>
 800a90c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a910:	4404      	add	r4, r0
 800a912:	6034      	str	r4, [r6, #0]
 800a914:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a918:	6028      	str	r0, [r5, #0]
 800a91a:	4638      	mov	r0, r7
 800a91c:	b003      	add	sp, #12
 800a91e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a926:	e7d5      	b.n	800a8d4 <__d2b+0x1e>
 800a928:	6179      	str	r1, [r7, #20]
 800a92a:	e7e7      	b.n	800a8fc <__d2b+0x46>
 800a92c:	a801      	add	r0, sp, #4
 800a92e:	f7ff fddb 	bl	800a4e8 <__lo0bits>
 800a932:	9b01      	ldr	r3, [sp, #4]
 800a934:	617b      	str	r3, [r7, #20]
 800a936:	2101      	movs	r1, #1
 800a938:	6139      	str	r1, [r7, #16]
 800a93a:	3020      	adds	r0, #32
 800a93c:	e7e5      	b.n	800a90a <__d2b+0x54>
 800a93e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a942:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a946:	6030      	str	r0, [r6, #0]
 800a948:	6918      	ldr	r0, [r3, #16]
 800a94a:	f7ff fdae 	bl	800a4aa <__hi0bits>
 800a94e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a952:	e7e1      	b.n	800a918 <__d2b+0x62>

0800a954 <_calloc_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	fb02 f401 	mul.w	r4, r2, r1
 800a95a:	4621      	mov	r1, r4
 800a95c:	f7fe fb0c 	bl	8008f78 <_malloc_r>
 800a960:	4605      	mov	r5, r0
 800a962:	b118      	cbz	r0, 800a96c <_calloc_r+0x18>
 800a964:	4622      	mov	r2, r4
 800a966:	2100      	movs	r1, #0
 800a968:	f7fe fab0 	bl	8008ecc <memset>
 800a96c:	4628      	mov	r0, r5
 800a96e:	bd38      	pop	{r3, r4, r5, pc}

0800a970 <__ascii_mbtowc>:
 800a970:	b082      	sub	sp, #8
 800a972:	b901      	cbnz	r1, 800a976 <__ascii_mbtowc+0x6>
 800a974:	a901      	add	r1, sp, #4
 800a976:	b142      	cbz	r2, 800a98a <__ascii_mbtowc+0x1a>
 800a978:	b14b      	cbz	r3, 800a98e <__ascii_mbtowc+0x1e>
 800a97a:	7813      	ldrb	r3, [r2, #0]
 800a97c:	600b      	str	r3, [r1, #0]
 800a97e:	7812      	ldrb	r2, [r2, #0]
 800a980:	1c10      	adds	r0, r2, #0
 800a982:	bf18      	it	ne
 800a984:	2001      	movne	r0, #1
 800a986:	b002      	add	sp, #8
 800a988:	4770      	bx	lr
 800a98a:	4610      	mov	r0, r2
 800a98c:	e7fb      	b.n	800a986 <__ascii_mbtowc+0x16>
 800a98e:	f06f 0001 	mvn.w	r0, #1
 800a992:	e7f8      	b.n	800a986 <__ascii_mbtowc+0x16>

0800a994 <__ascii_wctomb>:
 800a994:	b149      	cbz	r1, 800a9aa <__ascii_wctomb+0x16>
 800a996:	2aff      	cmp	r2, #255	; 0xff
 800a998:	bf85      	ittet	hi
 800a99a:	238a      	movhi	r3, #138	; 0x8a
 800a99c:	6003      	strhi	r3, [r0, #0]
 800a99e:	700a      	strbls	r2, [r1, #0]
 800a9a0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a9a4:	bf98      	it	ls
 800a9a6:	2001      	movls	r0, #1
 800a9a8:	4770      	bx	lr
 800a9aa:	4608      	mov	r0, r1
 800a9ac:	4770      	bx	lr
	...

0800a9b0 <_init>:
 800a9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b2:	bf00      	nop
 800a9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9b6:	bc08      	pop	{r3}
 800a9b8:	469e      	mov	lr, r3
 800a9ba:	4770      	bx	lr

0800a9bc <_fini>:
 800a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9be:	bf00      	nop
 800a9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9c2:	bc08      	pop	{r3}
 800a9c4:	469e      	mov	lr, r3
 800a9c6:	4770      	bx	lr
